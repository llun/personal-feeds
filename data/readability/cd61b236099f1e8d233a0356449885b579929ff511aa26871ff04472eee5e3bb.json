{"title":"New type of supply-chain attack hit Apple, Microsoft and 33 other companies","link":"https://arstechnica.com/?p=1742499","date":1613479799000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><h4>DEPENDENCY CONFUSION —</h4><h2 itemprop=\"description\">Researcher who got targets to automatically install his code gets $130,000 payout.</h2></div><div itemprop=\"articleBody\"><figure><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/02/software-code-800x534.jpg\" alt=\"New type of supply-chain attack hit Apple, Microsoft and 33 other companies\"><figcaption><p>Getty Images</p></figcaption></figure><p>Last week, a researcher demonstrated a new supply-chain attack that executed counterfeit code on networks belonging to some of the biggest companies on the planet, Apple, Microsoft, and Tesla included. Now, fellow researchers are peppering the Internet with copycat packages, with more than 150 of them detected so far.</p><p>The technique was <a href=\"https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610\">unveiled last Tuesday</a> by security researcher Alex Birsan. His so-called dependency confusion or namespace confusion attack starts by placing malicious code in an official public repository such as NPM, PyPI, or RubyGems. By giving the submissions the same package name as dependencies used by companies such as Apple, Microsoft, Tesla, and 33 other companies, Birsan was able to get these companies to automatically download and install the counterfeit code.</p><h2>Automatic pwnage</h2><p>Dependencies are public code libraries or packages that developers use to add common types of functionality to the software they write. By leveraging the work of thousands of their open source peers, developers are spared the hassle and expense of creating the code themselves. The developer’s code automatically downloads and incorporates the dependency, or any update to it, either from the developer’s local computer or from a public repository.</p><p>Birsan scoured Internet forums, JavaScript code, accidentally published internal packages, and other sources to find the names of code dependencies used in software from 35 companies. He then uploaded his own code to NPM, PyPI, or Ruby Gems using the same dependency names. In other words, the researcher was squatting on the authentic package name belonging to the companies. The researcher ended up receiving $130,000 in bug bounties.</p><p>By giving the packages version numbers that were higher than the authentic ones, the targeted companies automatically downloaded and executed Birsan’s counterfeit packages.</p><p>“The success rate was simply astonishing,” Birsan wrote. He added:</p><blockquote><p>From one-off mistakes made by developers on their own machines, to misconfigured internal or cloud-based build servers, to systemically vulnerable development pipelines, one thing was clear: squatting valid internal package names was a nearly sure-fire method to get into the networks of some of the biggest tech companies out there, gaining remote code execution, and possibly allowing attackers to add backdoors during builds.</p></blockquote><p>Within two days of Birsan publishing his results, security company Sonotype said last Friday, other developers or researchers had <a href=\"https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks\">carried out copycat attacks</a>&nbsp;and put 150 similarly name-squatted packages in NPM.</p><h2>How it works</h2><p>Package managers typically accept dependencies listed as names and attempt to parse developers’ intentions. The managers look for dependencies both on the local computer where the project is stored and the Internet-accessible directory belonging to the package manager.</p><p>“The dependency confusion problem is an inherent design flaw in the native installation tools and DevOps workflows that pull dependencies into your software supply chain,” Sonotype researchers wrote in an <a href=\"https://blog.sonatype.com/dependency-hijacking-software-supply-chain-attack-hits-more-than-35-organizations\">earlier writeup</a> on Birsan’s attack. “In this context, dependency confusion refers to the inability of your development environment to distinguish between a private, internally-created present package in your software build, and a package by the same name available in a public software repository.”</p><p>Sonotype researchers went on to explain the technique this way:</p><blockquote><p>For example, let’s assume your application uses an internal, privately-created PyPI component called foobar (version 1) as a dependency. Later, should an unrelated component by the same name but higher version number foobar (version 9999) be published to the PyPI downloads public repository, the default configuration of PyPI development environments dictates that the foobar with the higher version be downloaded as a dependency.</p><p>In this case, that would mean, the attacker’s counterfeit foobar package with a higher version number would silently and automatically make its way into your software build.</p></blockquote><p>So-called <a href=\"https://arstechnica.com/information-technology/2017/09/devs-unknowingly-use-malicious-modules-put-into-official-python-repository/?\">typo-squatting</a> attacks have <a href=\"https://arstechnica.com/information-technology/2018/06/backdoored-images-downloaded-5-million-times-finally-removed-from-docker-hub/\">existed for years</a>. They upload code into public repositories and use names that are similar to the names of legitimate packages in the hopes a developer will make a typo or click on a malicious link that causes the fake code to be downloaded. The advantage of Birsan’s dependency confusion technique is that it doesn’t rely on human error to work.</p><p>While the affected companies didn’t spot the counterfeit, Sonotype did. After checking with Birsan the company learned that the bogus dependencies were part of a benign experiment.</p><h2>Proof of concept</h2><p>Birsan found that the 35 affected companies used locally stored dependencies that weren’t available in the public directory. When he uploaded his own proof-of-concept malicious code to a public repository using the same name as the legitimate dependency and a higher version number, the companies’ software automatically installed and ran them.</p><p>To keep from running afoul of companies’ vulnerability-reporting policies, Birsan’s code limited its activities to sending the username, hostname, and current patch of each unique installation to the researcher. He also had permission to test the security of all 35 companies, either through public bug bounty programs or private agreements.</p><p>To ensure security defenses didn’t block the information from leaving the target company’s network, Birsan’s PoC code hex-encoded the data and sent it in a DNS query. The companies’ failure to block the traffic comes at least four years after the use of DNS exfiltration by malware came to the <a href=\"https://arstechnica.com/information-technology/2017/03/researchers-uncover-powershell-trojan-that-uses-dns-queries-to-get-its-orders/\">attention of researchers</a>.</p><p>Canadian ecommerce company Shopify automatically installed a Ruby Gem named shopify-cloud within a few hours of Birsan making it available in the Ruby Gems repository. Meanwhile, multiple machines inside Apple’s network executed code Birsan uploaded to NPM. Birsan said the affected Apple projects appeared to be related to Apple ID, the company’s authentication system. Both Shopify and Apple awarded Birsan $30,000 bounties each.</p><p>Sonotype has a list of steps <a href=\"https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks\">here</a> that developers can take to prevent dependency confusion attacks. Chief among the defenses is for repositories to enforce mandatory namespace and scope verification. One verification technique is the reverse use of the fully qualified domain name, which allows rightful owners of a brand or namespace to publish components in that namespace while keeping adversaries out.</p></div></div>","author":"Dan Goodin","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"cd61b236099f1e8d233a0356449885b579929ff511aa26871ff04472eee5e3bb","category":"Tech"}
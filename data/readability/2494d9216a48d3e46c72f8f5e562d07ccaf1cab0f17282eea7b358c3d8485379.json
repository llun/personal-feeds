{"title":"คำถามเรื่อง Java Stream vs For loop","link":"https://www.somkiat.cc/java-stream-vs-for-loop/","date":1620740188000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1.png\" alt=\"\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1.png 1024w, https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1-300x99.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1-768x254.png 768w\" sizes=\"(max-width: 1024px) 100vw, 1024px\"></figure><p>เจอคำถามเกี่ยวกับ <strong><a href=\"https://www.facebook.com/groups/265480147632946/permalink/898792590968362\" target=\"_blank\" rel=\"noreferrer noopener\">Java Stream vs For loop ใน facebook group</a></strong><br>ถ้าเป็น Java developer/programmer ที่เรียนรู้ความสามารถภาษา Java ใหม่ ๆ<br>น่าจะใช้ Java stream และ Lambda กันหมดแล้ว<br>หรือหลาย ๆ คนก็ไปสาย Reactive กันหมดเล้ว<br>แต่แน่นอนว่า คำถามนี้ก็ยังน่าสนใจ<br>เพราะว่า ผมก็เจอคำถามแบบนี้บ่อยมาก ๆ<br>สิ่งที่ต้องพิจารณานั้น ควรดูให้ครบทุกมุมยกตัวอย่างเช่น</p><ul><li>Readability</li><li>Performance</li></ul><p><strong>เรื่องแรก Performance ของการทำงาน</strong></p><p>performance มักจะตรงข้ามกับ readability อย่างมากนั่นคือ</p><ul><li>กรณีที่ข้อมูลแบบ List ที่มีขนาดไม่ใหญ่มาก For loop จะเร็วกว่า</li><li>กรณีที่ข้อมูลแบบ List ที่มีขนาดใหญ่ Stream จะเร็วกว่า แถมทำงานแบบ parallel ได้ด้วย ดังนั้นยิ่ง CPU มีหลาย core ยิ่งเร็วขึ้นไปอีก</li></ul><p>แต่ที่น่าสนใจคือ JVM สมัยใหม่ตั้งแต่ JDK 1.8 หรือ 8 ขึ้นไป<br>พยายามทำการ optimize ให้ Stream มีการทำงานที่ดีขึ้นอย่างมาก</p><p>อาจจะต้องเลือกว่าcost ของ performance vs cost ของ readability และ maintain อะไรดีกว่ากันในแต่ละบริบทจะต่างกันไป</p><p>ลองทำการ benchmark ด้วย <strong><a rel=\"noreferrer noopener\" href=\"https://github.com/openjdk/jmh\" target=\"_blank\">JMH (Java Microbenchmark Harness)</a></strong></p><p><strong>เรื่องที่สองคือ readability</strong></p><p>ระหว่าง loop ซ้อน loopหรือใน loop<br>มี if ซ้อน if ไปเรื่อย ๆ<br>กับใช้งาน Stream ร่วมกับ operation ต่าง ๆ และ Lambda<br>อะไรน่าจะอ่านและเข้าใจง่ายกว่ากัน<br>แต่ถ้าปกติก็เริ่มที่ for loop นี่แหละ ง่ายที่สุดแล้ว</p><p>จากที่ผมทำงานมาหลัง ๆ ก็ไป Stream กันเลย ตามความเคยชิน !!</p><p><strong>ตัวอย่าง code แบบง่าย ๆ</strong><br>แน่นอนว่า ใช้ for loop เลยง่าย ๆ</p><div itemprop=\"text\" id=\"gist109446958\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-1-java-L1\" data-line-number=\"1\"></td><td id=\"file-1-java-LC1\"><span>private</span> <span>void</span> demo() {</td></tr><tr><td id=\"file-1-java-L2\" data-line-number=\"2\"></td><td id=\"file-1-java-LC2\"><span>List&lt;<span>Integer</span>&gt;</span> numbers <span>=</span> <span>new</span> <span>ArrayList&lt;&gt;</span>();</td></tr><tr><td id=\"file-1-java-L3\" data-line-number=\"3\"></td><td id=\"file-1-java-LC3\"><span>List&lt;<span>Integer</span>&gt;</span> results <span>=</span> <span>new</span> <span>ArrayList&lt;&gt;</span>();</td></tr><tr><td id=\"file-1-java-L4\" data-line-number=\"4\"></td><td id=\"file-1-java-LC4\"></td></tr><tr><td id=\"file-1-java-L5\" data-line-number=\"5\"></td><td id=\"file-1-java-LC5\"><span>for</span> (<span>Integer</span> n <span>:</span> numbers) {</td></tr><tr><td id=\"file-1-java-L6\" data-line-number=\"6\"></td><td id=\"file-1-java-LC6\"><span>if</span> (n <span>%</span> <span>2</span> <span>==</span> <span>0</span>) {</td></tr><tr><td id=\"file-1-java-L7\" data-line-number=\"7\"></td><td id=\"file-1-java-LC7\">results<span>.</span>add(n);</td></tr><tr><td id=\"file-1-java-L8\" data-line-number=\"8\"></td><td id=\"file-1-java-LC8\">}</td></tr><tr><td id=\"file-1-java-L9\" data-line-number=\"9\"></td><td id=\"file-1-java-LC9\">}</td></tr><tr><td id=\"file-1-java-L10\" data-line-number=\"10\"></td><td id=\"file-1-java-LC10\">}</td></tr><tr><td id=\"file-1-java-L11\" data-line-number=\"11\"></td><td id=\"file-1-java-LC11\"></td></tr><tr><td id=\"file-1-java-L12\" data-line-number=\"12\"></td><td id=\"file-1-java-LC12\"><span>private</span> <span>void</span> demo2() {</td></tr><tr><td id=\"file-1-java-L13\" data-line-number=\"13\"></td><td id=\"file-1-java-LC13\"><span>List&lt;<span>Integer</span>&gt;</span> numbers <span>=</span> <span>new</span> <span>ArrayList&lt;&gt;</span>();</td></tr><tr><td id=\"file-1-java-L14\" data-line-number=\"14\"></td><td id=\"file-1-java-LC14\"><span>List&lt;<span>Integer</span>&gt;</span> results <span>=</span> numbers<span>.</span>stream()</td></tr><tr><td id=\"file-1-java-L15\" data-line-number=\"15\"></td><td id=\"file-1-java-LC15\">.filter(n <span>-</span><span>&gt;</span> n <span>%</span> <span>2</span> <span>==</span> <span>0</span>)</td></tr><tr><td id=\"file-1-java-L16\" data-line-number=\"16\"></td><td id=\"file-1-java-LC16\">.collect(<span>Collectors</span><span>.</span>toList());</td></tr><tr><td id=\"file-1-java-L17\" data-line-number=\"17\"></td><td id=\"file-1-java-LC17\"></td></tr><tr><td id=\"file-1-java-L18\" data-line-number=\"18\"></td><td id=\"file-1-java-LC18\">}</td></tr></tbody></table></div><p>แต่ถ้าซับซ้อนกว่าละ !!<br>ต้องลองกันดูครับแบบนี้อ่านง่ายขึ้นไหม ?</p><div itemprop=\"text\" id=\"gist109446958\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-2-java-L1\" data-line-number=\"1\"></td><td id=\"file-2-java-LC1\"><span>List&lt;<span>String</span>&gt;</span> result <span>=</span> persons<span>.</span>stream()</td></tr><tr><td id=\"file-2-java-L2\" data-line-number=\"2\"></td><td id=\"file-2-java-LC2\">.filter(p <span>-</span><span>&gt;</span> p<span>.</span>getGender()<span>.</span>equals(<span><span>\"</span>Male<span>\"</span></span>))</td></tr><tr><td id=\"file-2-java-L3\" data-line-number=\"3\"></td><td id=\"file-2-java-LC3\">.filter(p <span>-</span><span>&gt;</span> p<span>.</span>getAge() <span>&gt;=</span> <span>60</span>)</td></tr><tr><td id=\"file-2-java-L4\" data-line-number=\"4\"></td><td id=\"file-2-java-LC4\">.filter(p <span>-</span><span>&gt;</span> p<span>.</span>getPerformance() <span>!=</span> <span>null</span>)</td></tr><tr><td id=\"file-2-java-L5\" data-line-number=\"5\"></td><td id=\"file-2-java-LC5\">.map(p <span>-</span><span>&gt;</span> p<span>.</span>getName())</td></tr><tr><td id=\"file-2-java-L6\" data-line-number=\"6\"></td><td id=\"file-2-java-LC6\">.collect(<span>Collectors</span><span>.</span>toList());</td></tr></tbody></table></div><p><strong>จะแบบไหนลองเลือกดูครับ</strong><br>แต่ควรต้องรู้และเข้าใจทั้ง for i, for each และ stream<br>เพื่อให้เราเลือกใช้ได้เหมาะสมครับ</p><p><em>ปล. 1<br>ตอนนี้ Java 16 แล้วนะครับเรื่อง Java Stream และ Lambda<br>น่าจะเป็นพื้นฐานของภาษา Java ไปแล้ว<br>จะใช้งาน for loop หรือ stream ก็ต้องเลือกให้เหมาะสม<br></em></p><p><em>ปล. 2<br>อย่าหนีปัญหาด้วยการเปลี่ยนภาษา เช่นเรายังเขียน Java ต่ำกว่า 1.8 หรือ 8<br>ดังนั้นเพื่อความ modern เราจะไปภาษา Kotlin เลย !!</em></p></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"2494d9216a48d3e46c72f8f5e562d07ccaf1cab0f17282eea7b358c3d8485379","category":"Thai"}
{"title":"[Java] การใช้งาน Sequential และ Parallel Stream","link":"https://www.somkiat.cc/java-ith-sequential-and-parallel-stream/","date":1621850939000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/cartoon-mice-and-elephant.png\" alt=\"\" width=\"558\" height=\"298\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/05/cartoon-mice-and-elephant.png 870w, https://www.somkiat.cc/wp-content/uploads/2021/05/cartoon-mice-and-elephant-300x161.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/05/cartoon-mice-and-elephant-768x411.png 768w\" sizes=\"(max-width: 558px) 100vw, 558px\"></figure><p>ใน Java 8 ขึ้นมานั้น (นานแล้ว)<br>มี <strong><a rel=\"noreferrer noopener\" href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/package-summary.html\" target=\"_blank\">Stream API</a></strong> เพิ่มเข้ามา<br>ทำให้ง่ายต่อการเข้าถึงข้อมูลในรูปแบบของ collection<br>โดยไม่ทำการแก้ไขข้อมูลต้นทางหรือต้นฉบับ<br>สามารถทำซ้ำแล้วซ้ำเล่า<br>จะได้ผลเช่นเดิม ใน operation เดิมเสมอ<br>ซึ่งการใช้งานสามารถสร้าง stream ในรูปแบบของ sequential<br>หรือ parallel (ตาม core ของ CPU) ก็ได้</p><p><strong>คำถามที่น่าสนใจคือ</strong></p><p>เมื่อใดควรใช้ sequential stream ?<br>เมื่อใดควรใช้ parallel stream ?<br></p><p><strong>ก่อนที่จะเลือกว่าจะใช้อะไรนั้น</strong><br><strong>ควรทำความเข้าใจแต่ละอย่างก่อนว่าเป็นอย่างไร ?</strong></p><p>พื้นฐานของ Stream คือตัวหุ้มหรือ wrapper ของ data source นั่นเอง<br>ช่วยให้เราสามารถทำงานหรือ operation ต่าง ๆ บน data source ได้อย่างง่าย<br>หรือเรียกว่าการเพิ่ม operation บน data pipeline</p><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-24-at-01.26.59.png\" alt=\"\" width=\"519\" height=\"96\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-24-at-01.26.59.png 734w, https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-24-at-01.26.59-300x56.png 300w\" sizes=\"(max-width: 519px) 100vw, 519px\"></figure><p><strong>Sequential stream คืออะไร</strong></p><p>เป็นค่า default สำหรับ Stream นั่นเอง<br>โดยที่ operation ต่าง ๆ จะทำงานแบบตามลำดับอยู่แล้ว<br>การทำงานแบบ sequential คือ ทำงานบน main thread<br>ดัง code ตัวอย่าง</p><div itemprop=\"text\" id=\"gist109662517\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-1-java-L1\" data-line-number=\"1\"></td><td id=\"file-1-java-LC1\"><span>private</span> <span>void</span> sequential() {</td></tr><tr><td id=\"file-1-java-L2\" data-line-number=\"2\"></td><td id=\"file-1-java-LC2\"><span>List&lt;<span>Integer</span>&gt;</span> scores <span>=</span> <span>Arrays</span><span>.</span>asList(<span>50</span>, <span>55</span>, <span>40</span>, <span>80</span>, <span>76</span>);</td></tr><tr><td id=\"file-1-java-L3\" data-line-number=\"3\"></td><td id=\"file-1-java-LC3\">scores<span>.</span>stream()<span>.</span>forEach(score <span>-</span><span>&gt;</span></td></tr><tr><td id=\"file-1-java-L4\" data-line-number=\"4\"></td><td id=\"file-1-java-LC4\"><span>System</span><span>.</span>out<span>.</span>println(score <span>+</span> <span><span>\"</span> run on thread name = <span>\"</span></span> <span>+</span> <span>Thread</span><span>.</span>currentThread()<span>.</span>getName())</td></tr><tr><td id=\"file-1-java-L5\" data-line-number=\"5\"></td><td id=\"file-1-java-LC5\">);</td></tr><tr><td id=\"file-1-java-L6\" data-line-number=\"6\"></td><td id=\"file-1-java-LC6\">}</td></tr><tr><td id=\"file-1-java-L7\" data-line-number=\"7\"></td><td id=\"file-1-java-LC7\"></td></tr><tr><td id=\"file-1-java-L8\" data-line-number=\"8\"></td><td id=\"file-1-java-LC8\">ผลการทำงาน</td></tr><tr><td id=\"file-1-java-L9\" data-line-number=\"9\"></td><td id=\"file-1-java-LC9\"></td></tr><tr><td id=\"file-1-java-L10\" data-line-number=\"10\"></td><td id=\"file-1-java-LC10\"><span>50</span> run on thread name <span>=</span> main</td></tr><tr><td id=\"file-1-java-L11\" data-line-number=\"11\"></td><td id=\"file-1-java-LC11\"><span>55</span> run on thread name <span>=</span> main</td></tr><tr><td id=\"file-1-java-L12\" data-line-number=\"12\"></td><td id=\"file-1-java-LC12\"><span>40</span> run on thread name <span>=</span> main</td></tr><tr><td id=\"file-1-java-L13\" data-line-number=\"13\"></td><td id=\"file-1-java-LC13\"><span>80</span> run on thread name <span>=</span> main</td></tr><tr><td id=\"file-1-java-L14\" data-line-number=\"14\"></td><td id=\"file-1-java-LC14\"><span>76</span> run on thread name <span>=</span> main</td></tr></tbody></table></div><p><strong>Parallel stream คืออะไร</strong></p><p>เราสามารถแปลงจาก sequential มาเป็น parallel ได้เลย<br>โดยใช้งานผ่าน method parallelStream() หรือ parallel()<br>ซึ่งจะทำการแยก thread ไปทำงานตามแต่ละ core ของ CPU<br>และนำผลที่ได้มารวมกัน<br>ซึ่งใช้เทคนิคของ <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ForkJoinPool.html\" target=\"_blank\" rel=\"noreferrer noopener\">Fork and Join</a><br>ดัง code ตัวอย่าง</p><div itemprop=\"text\" id=\"gist109662517\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-2-java-L1\" data-line-number=\"1\"></td><td id=\"file-2-java-LC1\"><span>private</span> <span>void</span> parallel() {</td></tr><tr><td id=\"file-2-java-L2\" data-line-number=\"2\"></td><td id=\"file-2-java-LC2\"><span>List&lt;<span>Integer</span>&gt;</span> scores <span>=</span> <span>Arrays</span><span>.</span>asList(<span>50</span>, <span>55</span>, <span>40</span>, <span>80</span>, <span>76</span>);</td></tr><tr><td id=\"file-2-java-L3\" data-line-number=\"3\"></td><td id=\"file-2-java-LC3\">scores<span>.</span>stream()<span>.</span>parallel()<span>.</span>forEach(score <span>-</span><span>&gt;</span></td></tr><tr><td id=\"file-2-java-L4\" data-line-number=\"4\"></td><td id=\"file-2-java-LC4\"><span>System</span><span>.</span>out<span>.</span>println(score <span>+</span> <span><span>\"</span> run on thread name = <span>\"</span></span> <span>+</span> <span>Thread</span><span>.</span>currentThread()<span>.</span>getName())</td></tr><tr><td id=\"file-2-java-L5\" data-line-number=\"5\"></td><td id=\"file-2-java-LC5\">);</td></tr><tr><td id=\"file-2-java-L6\" data-line-number=\"6\"></td><td id=\"file-2-java-LC6\">}</td></tr><tr><td id=\"file-2-java-L7\" data-line-number=\"7\"></td><td id=\"file-2-java-LC7\"></td></tr><tr><td id=\"file-2-java-L8\" data-line-number=\"8\"></td><td id=\"file-2-java-LC8\">ผลการทำงาน</td></tr><tr><td id=\"file-2-java-L9\" data-line-number=\"9\"></td><td id=\"file-2-java-LC9\"></td></tr><tr><td id=\"file-2-java-L10\" data-line-number=\"10\"></td><td id=\"file-2-java-LC10\"><span>76</span> run on thread name <span>=</span> <span>ForkJoinPool</span><span>.</span>commonPool<span>-</span>worker<span>-</span><span>2</span></td></tr><tr><td id=\"file-2-java-L11\" data-line-number=\"11\"></td><td id=\"file-2-java-LC11\"><span>55</span> run on thread name <span>=</span> <span>ForkJoinPool</span><span>.</span>commonPool<span>-</span>worker<span>-</span><span>1</span></td></tr><tr><td id=\"file-2-java-L12\" data-line-number=\"12\"></td><td id=\"file-2-java-LC12\"><span>50</span> run on thread name <span>=</span> <span>ForkJoinPool</span><span>.</span>commonPool<span>-</span>worker<span>-</span><span>3</span></td></tr><tr><td id=\"file-2-java-L13\" data-line-number=\"13\"></td><td id=\"file-2-java-LC13\"><span>80</span> run on thread name <span>=</span> <span>ForkJoinPool</span><span>.</span>commonPool<span>-</span>worker<span>-</span><span>4</span></td></tr><tr><td id=\"file-2-java-L14\" data-line-number=\"14\"></td><td id=\"file-2-java-LC14\"><span>40</span> run on thread name <span>=</span> main</td></tr></tbody></table></div><p><strong>ลองมาทำ Benchmark ด้วย <a href=\"https://github.com/openjdk/jmh\" target=\"_blank\" rel=\"noreferrer noopener\">JMH (Java Microbenchmark Harness) </a>กัน</strong></p><p>ถึงแม้ว่าการทำงานแบบ parallel จะมีประโยชน์<br>แต่ก็มาพร้อมกับ overhead เช่นกัน<br>ทั้งการจัดการ thread (Fork and Join)<br>ทั้งการแยกและรวมข้อมูล<br>ทั้งการจัดการ memory</p><div itemprop=\"text\" id=\"gist109662517\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-3-java-L1\" data-line-number=\"1\"></td><td id=\"file-3-java-LC1\"><span>@Benchmark</span></td></tr><tr><td id=\"file-3-java-L2\" data-line-number=\"2\"></td><td id=\"file-3-java-LC2\"><span>@BenchmarkMode</span>(<span>Mode</span><span>.</span><span>AverageTime</span>)</td></tr><tr><td id=\"file-3-java-L3\" data-line-number=\"3\"></td><td id=\"file-3-java-LC3\"><span>@OutputTimeUnit</span>(<span>TimeUnit</span><span><span>.</span>NANOSECONDS</span>)</td></tr><tr><td id=\"file-3-java-L4\" data-line-number=\"4\"></td><td id=\"file-3-java-LC4\"><span>public</span> <span>static</span> <span>void</span> workingWithStreamSequential() {</td></tr><tr><td id=\"file-3-java-L5\" data-line-number=\"5\"></td><td id=\"file-3-java-LC5\"><span>IntStream</span><span>.</span>rangeClosed(<span>1</span>, <span>1000</span>)<span>.</span>reduce(<span>0</span>, <span>Integer</span><span>::</span>sum);</td></tr><tr><td id=\"file-3-java-L6\" data-line-number=\"6\"></td><td id=\"file-3-java-LC6\">}</td></tr><tr><td id=\"file-3-java-L7\" data-line-number=\"7\"></td><td id=\"file-3-java-LC7\"></td></tr><tr><td id=\"file-3-java-L8\" data-line-number=\"8\"></td><td id=\"file-3-java-LC8\"><span>@Benchmark</span></td></tr><tr><td id=\"file-3-java-L9\" data-line-number=\"9\"></td><td id=\"file-3-java-LC9\"><span>@BenchmarkMode</span>(<span>Mode</span><span>.</span><span>AverageTime</span>)</td></tr><tr><td id=\"file-3-java-L10\" data-line-number=\"10\"></td><td id=\"file-3-java-LC10\"><span>@OutputTimeUnit</span>(<span>TimeUnit</span><span><span>.</span>NANOSECONDS</span>)</td></tr><tr><td id=\"file-3-java-L11\" data-line-number=\"11\"></td><td id=\"file-3-java-LC11\"><span>public</span> <span>static</span> <span>void</span> workingWithStreamParallel() {</td></tr><tr><td id=\"file-3-java-L12\" data-line-number=\"12\"></td><td id=\"file-3-java-LC12\"><span>IntStream</span><span>.</span>rangeClosed(<span>1</span>, <span>1000</span>)<span>.</span>parallel()<span>.</span>reduce(<span>0</span>, <span>Integer</span><span>::</span>sum);</td></tr><tr><td id=\"file-3-java-L13\" data-line-number=\"13\"></td><td id=\"file-3-java-LC13\">}</td></tr><tr><td id=\"file-3-java-L14\" data-line-number=\"14\"></td><td id=\"file-3-java-LC14\"></td></tr><tr><td id=\"file-3-java-L15\" data-line-number=\"15\"></td><td id=\"file-3-java-LC15\"></td></tr><tr><td id=\"file-3-java-L16\" data-line-number=\"16\"></td><td id=\"file-3-java-LC16\">ผลการทำงาน</td></tr><tr><td id=\"file-3-java-L17\" data-line-number=\"17\"></td><td id=\"file-3-java-LC17\"></td></tr><tr><td id=\"file-3-java-L18\" data-line-number=\"18\"></td><td id=\"file-3-java-LC18\"><span>Benchmark</span> <span>Mode</span> <span>Cnt</span> <span>Score</span> <span>Error</span> <span>Units</span></td></tr><tr><td id=\"file-3-java-L19\" data-line-number=\"19\"></td><td id=\"file-3-java-LC19\"><span>Demo</span><span>.</span>workingWithStreamParallel avgt <span>25</span> <span>24289.926</span> ± <span>3385.315</span> ns<span>/</span>op</td></tr><tr><td id=\"file-3-java-L20\" data-line-number=\"20\"></td><td id=\"file-3-java-LC20\"><span>Demo</span><span>.</span>workingWithStreamSequential avgt <span>25</span> <span>2244.231</span> ± <span>330.953</span> ns<span>/</span>op</td></tr><tr><td id=\"file-3-java-L21\" data-line-number=\"21\"></td><td id=\"file-3-java-LC21\"></td></tr></tbody></table></div><p>จะเลือกสิ่งใดต้องเข้าใจ รวมทั้งต้อง benchmark เสมอ</p></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"45c8cc72a03baa119c54bf29153ff3b4f47e71be93e65529025fa30c53aceedf","category":"Thai"}
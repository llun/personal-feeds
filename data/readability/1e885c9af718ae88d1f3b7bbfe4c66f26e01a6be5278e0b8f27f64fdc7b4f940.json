{"title":"Chrome 89 increases desktop memory efficiency with PartitionAlloc","link":"https://arstechnica.com/?p=1749178","date":1615566371000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><h4>efficiency, efficiency, efficiency —</h4><h2 itemprop=\"description\">Decreasing RAM usage is more important than ever, with The Great Suspender gone.</h2></div><div itemprop=\"articleBody\"><figure><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/chrome-89-800x640.png\" alt=\"This week's new Chrome build doesn't look any different, but it introduces plenty of under-the-hood performance and efficiency improvements.\"><figcaption><p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/chrome-89.png\" data-height=\"1920\" data-width=\"2400\">Enlarge</a> <span>/</span> This week's new Chrome build doesn't look any different, but it introduces plenty of under-the-hood performance and efficiency improvements.</p></figcaption></figure><p>Google Chrome version 89 began rolling out to users in the stable channel on March 2 and should be on most people's machines by now. The new build offers significant memory savings on 64-bit Windows platforms thanks to increased use of Google's <a href=\"https://chromium.googlesource.com/chromium/src/+/master/base/allocator/partition_allocator/PartitionAlloc.md\">PartitionAlloc</a>&nbsp;memory allocator. On macOS, Chrome 89 plays catch-up and gets closer to the performance of the flagship Windows builds.</p><h2>Chrome on Windows</h2><p>Google says use of RAM in 64-bit Windows is down up to 22 percent in the browser process, 8 percent in the renderer, and 3 percent in the GPU. The company also claims a 9 percent decrease in latency, meaning a more responsive browser. The improvements are largely due to intercepting <code>malloc()</code>&nbsp;calls with <code>PartitionAlloc</code>.</p><p>Chrome 89 has also gotten significantly more aggressive about discarding unused RAM. When you scroll resources such as large images off-screen in the foreground tab, Chrome discards the memory those resources used. The change impacts background tabs as well, resulting in a savings of as much as 100MiB per tab.</p><h2>Chrome on macOS</h2><p>Chrome 89 on macOS is still playing catch-up but now includes improvements to memory management on background tabs that other platforms have had for a while—Google says this means up to 8 percent RAM savings on macOS.</p><p>Tab throttling is also improved on macOS in build 89, with up to 65 percent better&nbsp;Apple Energy Impact scores on background tabs.</p><h2>Chrome on Android</h2><p>In theory, a developer only needs one&nbsp;<a href=\"https://en.wikipedia.org/wiki/Android_application_package\">APK</a>&nbsp;for just about any Android device. In practice, resources tend to be very constrained on mobile—making the concept of packages tailored to an individual device's capabilities much more attractive than it might be on beefier desktop or laptop systems.</p><p>Google has updated the Play Store itself to allow it to generate optimized APKs for a user's specific device and has updated Chrome to take advantage of the new capabilities. Using these&nbsp;<a href=\"https://developer.android.com/guide/app-bundle\">Android App Bundles</a>&nbsp;and <a href=\"https://developer.android.com/reference/android/R.attr#isolatedSplits\">Isolated Splits</a>, Chrome can launch with a significantly reduced initial codebase and dynamically load more features later as the user needs them.</p><p>A new feature called <a href=\"https://www.youtube.com/watch?v=65Gv8phJarI\">Freeze-Dried Tabs</a> decreases startup time even further. Google describes Freeze-Dried Tabs as lightweight versions of those tabs about the size of a screenshot but supporting scrolling, zooming, and tapping on links. When opening Chrome, the initial display uses Freeze-Dried Tabs—getting you into the browser with some interactivity up to 13 percent faster.</p><p>Freeze-Dried Tabs in particular sounds like an enormous improvement over the usual mobile app practice of displaying a recent screenshot of the app while it loads, tricking users into&nbsp;<em>thinking</em> the app is loading much more quickly and smoothly than it really did—but offering no more actual function than if the app displayed a blank screen while it loaded.</p></div></div>","author":"Jim Salter","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"1e885c9af718ae88d1f3b7bbfe4c66f26e01a6be5278e0b8f27f64fdc7b4f940","category":"Tech"}
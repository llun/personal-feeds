{"title":"Listen Notes","link":"https://www.listennotes.com/blog/how-i-accidentally-built-a-podcast-api-business-46/?utm_source=df1","date":1612147628000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><p><a href=\"https://www.listennotes.com/\">Listen Notes</a> is a podcast search engine that allows people to search <a href=\"https://www.listennotes.com/podcast-stats/\">around two million podcasts and more than 90&nbsp;million episodes</a>&nbsp;by people or topics. We also provide a<a href=\"https://www.listennotes.com/api/\"> podcast API</a> for developers to use, which is called Listen API. It has become a core part of our business.</p><p>In this article, I’ll share with you the journey of building this API business, the technology behind it, and hopefully&nbsp;you can&nbsp;learn one thing or two and build&nbsp;your own API business in the future.</p><p>Please note that I use “I” and “we” interchangeably in this article :)</p><h2><strong>An accidental API&nbsp;business</strong></h2><p>I left my previous failed startup in September 2017. After a few days of tinkering, I picked up one of my fledgling side projects to polish the UI a bit. That side project was<a href=\"https://www.listennotes.com/\"> Listen Notes</a>, a podcast search engine website, which was just a single page React JS app running on three $10/month DigitalOcean droplets.</p><p>Little did I know a few years ago that my small, neglected side project would turn into a helpful business it has blossomed into.</p><p><img src=\"https://production.listennotes.com/web/image/37454d6afb7b458ca58ae4e5873ddbbd.png\"></p><p><small>Listen Notes around September 2017</small></p><p>I continued to work on Listen Notes full-time and incorporated Listen Notes as a Delaware C-Corp in October 2017. One of my goals was to experience as many facets of business as possible, rather than just writing code behind the scenes.</p><p>My initial plan was as follows: (Don’t laugh at me!)</p><ul><li>Build a podcast search engine website and make some money from advertising, just like Google. Simple!</li><li>If this Listen Notes thing doesn’t work in two or three months, then I’ll run out of cash, and I’ll go into credit card debt to keep going for one more month or so. If it still doesn’t work, then I’ll have to find a full-time job. Although Jeff Bezos’ parents invested $300,000 in early Amazon and Mark Zuckerberg’s parents loaned $100,000 to early Facebook, not every family is able to casually toss six figures of cash at web projects. In the game of life, every one starts at a different difficulty level.&nbsp;</li></ul><p>Then something happened.</p><p>On November 20, 2017, I got an email from the developer of a new podcast app, who asked if Listen Notes provided an API. He wanted to be able to search episodes in his app, but he didn’t want to build the entire backend. I asked a few questions (e.g., how would the endpoints look, what data fields did he need, how much was he willing to pay…). I got his answers. All were in an email thread within a couple days.</p><p>On November 30, 2017, I quickly implemented three endpoints (<em>GET /search, GET /podcasts/{id}, and GET /episodes/{id}</em>), which were basically three<a href=\"https://docs.djangoproject.com/en/3.1/topics/http/views/\"> Django views</a>. I Googled “API gateway” or something like that and found a service called<a href=\"https://konghq.com/blog/mashape-has-a-new-homepage/\"> Mashape</a>, which was an API marketplace that handled payment, user management, and API documentation. So I put my three endpoints on Mashape and created two plans there: FREE and PRO. I emailed the developer back to tell him the API was ready to use.</p><p>This is the entire email thread that prompted me to build Listen API:</p><p><img src=\"https://production.listennotes.com/web/image/125d913b8ad14bbd99fbc7c1cfe49e04.png\"></p><p>Then nothing happened. The podcast app developer didn’t use our API and instead phased out their project.</p><p>Eventually, I moved on to primarily focus on the development of listennotes.com. The API was basically in self-driving mode on the open web. Anyone who happened to discover our API could sign up, without talking to any human beings.</p><p>On January 14, 2018, I got my first paying user. A few more paying users arrived that same year.</p><p>Here is the email notification I received for my first paying user:</p><p><img src=\"https://production.listennotes.com/web/image/1cf8ad68f0c345318c9c64b3f370764b.png\"></p><p>Wait, what is RapidAPI? Well, Mashape was acquired by a startup named RapidAPI. They didn’t rebrand Mashape to RapidAPI completely until mid-2018. Startups typically don’t do things in a clean and methodical way, which is totally understandable.</p><p>Then something happened.</p><p>There was an outage on the RapidAPI end on November 29, 2018. This was the email I sent to people in RapidAPI when the outage happened.</p><p><img src=\"https://production.listennotes.com/web/image/4d1a713f41dd465b9e57fa4e34be4208.png\"></p><p>RapidAPI had performed a big backend upgrade around that time. As an engineer, I totally understand that outages happen, especially when making huge changes in the backend. But I felt helpless because their customer support didn’t reply to my email. Phone call didn't work, as expected.</p><p>Usually their customer support was very responsive; perhaps it was the holiday season and people were on vacation. So I used hunter.io to find work emails of individual RapidAPI employees, the CEO, as well as the CTO. The issue was finally resolved, many hours later. In other words, our API was completely unusable during those down hours. I felt very sorry for our paying users.</p><p>Then around mid-February 2019, RapidAPI had billing problems and failed to pay us a few thousand bucks. Our paying users paid RapidAPI first. RapidAPI took a 20% cut. Then they paid the remaining 80% (minus PayPal fees) to us. After several back-and-forth emails and phone calls, we finally got our payment. It’s understandable. Again, startups make mistakes.</p><p>In late February 2019, I decided to build our own RapidAPI replacement, for a few reasons:</p><ul><li>Our API revenue became nontrivial. The 20% cut from RapidAPI was a bit too much for us.</li><li>We wanted API requests to hit our own servers directly, thus lowering latency for our users.</li><li>I didn’t want to feel helpless when RapidAPI had outages. Overall they did a good job running the service. But I wanted to control my own destiny.</li><li>I wanted to contact my API users directly. Using RapidAPI, API providers like me didn’t have access to our users’ email addresses. It’s understandable. It’s like the “Uber for X” companies that don’t want workers and customers to bypass them and strike deals under the table. Marketplaces don’t want users to skip the middleman’s commission fees.</li></ul><p>In addition, I vowed to do two things really well for our new API system:</p><ul><li>We must provide great customer service to our paying users.</li><li>We will give customers a very stable &amp; reliable backend service.</li></ul><p>After 30 days of hard work,<a href=\"https://www.listennotes.com/blog/listen-api-v2-simple-pricing-same-endpoints-39/\"> we launched Listen API v2</a> on March 27, 2019. The legacy API hosted on RapidAPI became Listen API v1, a version we won’t add new features to but don’t want to shut down because some apps are still using it as of December 2020!</p><p>We continue to improve our new Listen API v2 by adding new endpoints, new data fields, improving operational efficiency, as well as spiffing up the user dashboard and our internal tools.</p><p>Things are picking up speed gradually. I’ve been happy since then.</p><p>So, that’s the journey of Listen API so far.</p><p><em>Note: Although we decided to move on from RapidAPI, I still think it’s a great service. Startups all make mistakes in the early stage. They fix things and continue to improve their service, which is great!</em></p><h2><strong>The technology behind Listen&nbsp;API</strong></h2><p>Developers can use our API to search podcasts and fetch detailed podcast-episode metadata. To make this whole thing work, we need to make sure a few core components are in place.</p><p>The following graph summarizes those components and the technologies used:</p><p><img src=\"https://production.listennotes.com/academy/image/3c36ff70b8ab4d25aa85bfa567007087.png\"></p><h3><strong>Datastore and search&nbsp;engine</strong></h3><p>This is a shared component with <a href=\"https://www.listennotes.com/\">our website</a>. Therefore, I didn’t need to change anything in the datastore and search engine when building our API infrastructure.</p><p>We use Postgres as our main data store (e.g., for podcast metadata, user accounts…), and Elasticsearch as the search engine.</p><p>I wrote an old blog post with<a href=\"https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/\"> details of the entire tech stack</a>.</p><h3><strong>Internal tools and processes</strong></h3><p>If you’ve worked in any web companies, you probably know what I’m referring to here.</p><p>It’s rare for an Internet business to be 100% automatic. A company always needs to build tons of internal tools and set up manual processes to keep the service functional. That’s why companies like<a href=\"https://www.bloomberg.com/news/articles/2020-10-20/retool-nears-1-billion-valuation-with-funding-from-sequoia\"> Retool have such a high valuation</a> nowadays.&nbsp;</p><p>Companies are investing big money in internal tools that are invisible to end users:</p><p><img src=\"https://production.listennotes.com/web/image/e448df5503934491b251a2a85b815686.png\"></p><p>Credits: <a href=\"https://retool.com/blog/state-of-internal-tools-2020/\">Retool</a></p><p>To start our API business, we needed to build (at least) two types of internal tools:</p><ul><li><strong>For data operations</strong>: We needed the ability to keep the podcast metadata up-to-date, fix corrupted metadata, plus review and approve any changes made by users. Additionally, we required a framework that handled new, rare edge cases of corrupted podcast data along the way. To some degree, building a software product means handling tons of edge cases for a very long period of time (e.g., years), rather than launching new features every day.</li><li><strong>For user operations</strong>: We required the ability to suspend a bad user’s account, as well as immediately look up all information related to a specific user who contacted us for a specific issue. Plus, we had to be able to quickly evaluate if “it’s our fault” (server-side errors) or “it’s their fault” (client-side errors) when users complained.</li></ul><p>Internal tools are used by employees inside the company. Some of those tools are fully automated, such as cron jobs that perform scheduled tasks. But many tools should be used manually by human employees, e.g., when inputting a user’s ID number and clicking a button.</p><p>Most of our internal tools have ugly web UIs, with default<a href=\"https://getbootstrap.com/\"> Bootstrap</a> styling :) The following screenshot displays a portion of our internal tool’s UI that allows us to suspend an API user’s account:</p><p><img src=\"https://production.listennotes.com/web/image/f5c69dcc39a041bdbb230bcc25b3a36c.png\"></p><p>Fortunately, our API shares many internal tools with the <a href=\"https://www.listennotes.com/\">website</a>. So we didn’t need to build too many new things here.</p><h3><strong>The analytics and billing&nbsp;system</strong></h3><p>The pricing model of an API is typically usage-based. Check out some real world examples:</p><ul><li><a href=\"https://www.twilio.com/pricing\" rel=\"nofollow noopener\" target=\"_blank\">https://www.twilio.com/pricing</a></li><li><a href=\"https://sendgrid.com/pricing/\" rel=\"nofollow noopener\" target=\"_blank\">https://sendgrid.com/pricing/</a></li><li><a href=\"https://cloud.google.com/maps-platform/pricing/\" rel=\"nofollow noopener\" target=\"_blank\">https://cloud.google.com/maps-platform/pricing/</a></li><li><a href=\"https://www.microsoft.com/en-us/bing/apis/pricing\">https://www.microsoft.com/en-us/bing/apis/pricing</a></li></ul><p>It’s a must to track how many requests a user uses in real-time. We use Redis to keep track of such stats and periodically dump into Postgres for persistent storage.&nbsp;</p><p>What happens if our Redis has an outage? We might temporarily lose some tracking stats. In this case, we have an internal tool to sync stats from raw Nginx logs.</p><p>We have to be able to change billing plans without affecting existing users. For example, if we raise prices, existing users should still enjoy the benefit of the old plans. If it’s not done right, it’s easy to have inconsistent states across the board, e.g., angry users getting charged the wrong billing plan!&nbsp;</p><p>Payment failures, a very common occurrence, must be handled gracefully. We can’t just suspend users right away. We need to be able to notify ourselves that “this user failed to pay” and notify the user that “you failed to pay.” After a few retries, we suspend users manually — well, we could’ve automated this last step. But we don’t suspend users often nowadays, so it’s okay to do so manually. There’s no need to make everything perfect (at least for now).</p><p>We have a dashboard (God’s view) to see how many requests each individual user uses in the current billing cycle. And we are able to review raw logs for each user from a web UI, without manually pulling log files from S3.</p><p>Stripe and PayPal (via Braintree) are our payment processors. Most of our international users use PayPal.</p><p>Finally, putting all of these factors together, we can calculate the actual amount of money that a user should pay us in real-time, based on their usage. We run async tasks via<a href=\"https://docs.celeryproject.org/en/stable/getting-started/introduction.html\"> Celery</a> to charge due bills.</p><p>What happens if a user unsubscribes in the middle of a billing cycle? We charge them prorated rates, based on time and usage. Users don’t need to pay a full month’s fee in those instances.</p><h3><strong>API Servers</strong></h3><p>We run Django apps to serve API requests. Each endpoint is a simple Django view. A Django middleware verifies if a request is legit, then generates a log or rejects the request right away.</p><p>We cache response data per API key + unique URL in Redis. In general,<a href=\"https://www.listennotesstatus.com/\"> our API performance is pretty good</a>.</p><p>We use Nginx as a load balancer and provision multiple API servers. It’s straightforward to do rolling deployment here, with a bunch of sanity checks to ensure the API is functioning. Generally speaking, the easy and robust deployment process increases my confidence to make incremental code changes often and to deploy frequently.</p><p>An API endpoint is RESTful and returns JSON response, pretty standard nowadays.</p><h3><strong>User Dashboard and API&nbsp;Docs</strong></h3><p>Each API user can access a<a href=\"https://www.listennotes.com/api/dashboard/\"> dashboard</a> on our website to learn the amount of requests they’ve used in the current billing cycle and view recent raw logs. They can also update payment methods, create or reset new API keys, set up webhooks, and add coworkers to the same API account.</p><p><img src=\"https://production.listennotes.com/web/image/77749e815d7741a4a66980282870e25f.png\"></p><p><a href=\"https://www.listennotes.com/api/docs/\">API Docs</a> is probably the most important UI for an API business. Therefore, many API companies employ a whole team of full-time engineers to build and maintain “merely” the API Docs page(s).</p><p>An API Docs page is not simply a full page of English words. It must show code snippets for different programming languages. Users have to be able to run your code example directly from the page. You are required to design a repeatable process (no matter if it's automatic or manual) to keep the documentation in sync with your code. There are plenty of nuances.</p><p>We spent a lot of time and energy building and iterating multiple versions of<a href=\"https://www.listennotes.com/api/docs/\"> our API Docs page</a>. Following is the end result:</p><p><img src=\"https://production.listennotes.com/web/image/0170ea52dec748038632db1bd3444812.png\"></p><p>Initially, we tried a few open source solutions for the API documentation. It’s quite time consuming to understand an open source project well enough to customize it. Ultimately, we decided that it would be faster to build the page from scratch rather than customizing an open source solution built by others.</p><p>Our API Docs page is basically a React JS single page app.</p><p>We codify all endpoints, response data schema, and example response in an<a href=\"https://listen-api.listennotes.com/api/v2/openapi.yaml\"> OpenAPI spec</a>. The React JS app of the API Docs page reads from our OpenAPI spec directly.&nbsp;</p><p>The side effect of using OpenAPI is that we can easily integrate with tools like<a href=\"https://www.postman.com/\"> Postman</a>, because<a href=\"https://en.wikipedia.org/wiki/OpenAPI_Specification\"> OpenAPI</a> is a (relatively) widely adopted standard for API documentation nowadays.</p><h2><strong>Why Listen API&nbsp;works?</strong></h2><p>Listen API is a nice business for me so far.&nbsp;</p><p>But don’t expect me to share revenue numbers publicly :)</p><p>Some companies are doing this<a href=\"https://www.google.com/search?q=open+startup\">&nbsp;open startup</a> thing, sharing every single business metric to the public, which is great.&nbsp;</p><p>But we shouldn’t blame the majority of companies (including my small company Listen Notes, Inc.) who don’t want to share business metrics publicly.&nbsp;</p><p>Not everyone is comfortable&nbsp;being naked in public,&nbsp;literally or figuratively.</p><p>Similarly, there’s lots of business advice (or cliches) that you don’t have to follow.</p><ul><li>You don’t have to find a cofounder - having a horrible cofounder is way worse than not having one.</li><li>You don't have to reveal your revenue to public or do any \"open startup\" thing. No pressure. Don't feel guilty if you are not doing what other cool kids are doing. You run your own company. You make your own decisions.</li><li>You don’t have to do XYZ that a Twitter VC philosopher urges you to do in a fortune-cookie-like tweet.</li><li>You don't have to be 100% bootstrap nor 100% VC-backed. Many things are not black or white.&nbsp;Usually, there's middle ground.</li><li>...</li></ul><p>The bottom line is, not one is absolutely wrong or absolutely correct.&nbsp;Each individual's vision/knowledge is limited. Each person's preferrence might be very different.&nbsp;</p><p>An API business may be too obscure to most people in the world, but&nbsp;I like my API business very much. People from big companies (e.g., Apple, Amazon, Microsoft) may examine my business and deem it “cute”. But I would consider it a success for me personally. Success is relative. The key is to bring happiness to customers (by saving them time and money &amp; helping them sovle problems), myself (a professional achievement), and my family (by keeping the fridge full).</p><p>So why does the Listen API work?</p><h3><strong>Demand and&nbsp;MVP</strong></h3><p>I didn’t build a solution to find problems. It was the problem (a podcast app that wanted to add search functionality) that found us—and we built a very simple solution at first.</p><p>We didn’t spend months launching the API. We spent a couple of hours. It costs at least $100 per hour to hire a not-so-bad engineer in San Francisco, so the cost of launching this API MVP was approximately $200. Even if it were $2,000, I still think it’s worthwhile.</p><p>Two reasons why we were able to launch an MVP quickly:</p><ul><li>The heavy lifting part of building a podcast database, search engine, and data operations tool was already done, because of our <a href=\"https://www.listennotes.com/\">podcast search engine website</a>.</li><li>Mashape / RapidAPI existed to provide a plug-and-play solution for us to manage users and create paid plans without writing code on our end.</li></ul><p>However, in hindsight, it’s actually very common for a commercial search engine to license their tech (via API or other ways). Some examples:</p><ul><li>Yahoo Search was powered by Google circa 2000, and is powered by Bing today.</li><li>In the early days, Baidu's only business model was to&nbsp;put a web search on some&nbsp;Chinese portal sites</li><li>Today, Bing provides <a href=\"https://www.microsoft.com/en-us/bing/apis/bing-web-search-api\" rel=\"noopener\" target=\"_blank\">a bunch of search APIs</a>.</li></ul><p>By launching an MVP fast, we were able to get&nbsp;feedback early, especially after getting the first paying user only a month or so after launch.</p><h3><strong>Good documentation</strong></h3><p>User feedback proves that our<a href=\"https://www.listennotes.com/api/docs/\"> API Docs page</a> plays an important role in customers' decisions to use our API. There must be a reason for API companies to employ a whole team of engineers “only” to maintain their documentation pages.</p><p>Great documentation builds trust.</p><h3><strong>Stable backend&nbsp;service</strong></h3><p>Stability is the essential base of an API business’<a href=\"https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs\"> Maslow’s hierarchy of needs</a>. If an API is not stable at all (e.g., it has frequent outages or runs very very slowly), it can't be used.</p><p>However, it’s boring to perform work to improve backend stability. Most tasks to stabilize backend service are preventive, including extensive monitoring and alerting, the process to deploy code with confidence, end-to-end regression tests, etc.</p><p>No news is good news.&nbsp;</p><p>No outages are great news.</p><p>We use<a href=\"http://statuspage.io/\"> <u>Statuspage.io</u></a> to hook up our Datadog metrics to build a status page:<a href=\"http://listennotesstatus.com/\"> <u>listennotesstatus.com</u></a>.</p><p><img src=\"https://production.listennotes.com/web/image/8928e10cdf454a25b7b2c13ff513fbfe.png\"></p><p>Here’s hoping that the status page will convince our prospective users to try out our API :)</p><h3><strong>Excellent customer&nbsp;service</strong></h3><p>We are all customers of someone else’s products and services. We have all been frustrated with poor customer services at some point in our lives. It’s obvious that great customer service goes a long way — <a href=\"https://en.wikipedia.org/wiki/Tony_Hsieh\">RIP, Tony</a>.</p><p>Many people are likely not aware that<a href=\"https://aws.amazon.com/premiumsupport/pricing/\"> you have to pay AWS big money to access better customer services</a>!</p><p>Our customers don’t strictly pay us for using our API, an online service. They also pay for being able to get high-quality customer assistance from real human beings. In our case, it’s me, the person who built this thing.</p><p>I use<a href=\"https://superhuman.com/\"> Superhuman</a> to process emails promptly and efficiently. And I’ve got a ton of prewritten email templates to handle the most popular customer support tickets. Oftentimes I can reply to an email within 5 seconds, using CMD + K to select an email template.</p><h3><strong>Invest in internal tools and processes</strong></h3><p>For knowledge work, it’s possible that one single person (or a tiny team) can create 10x, 100x, or even 1,000x more value than a big team.</p><p>Let’s look at an extreme example: book publishing. It’s (almost) impossible to hire 10,000 good writers to collaborate on one book together and hope it’s “better” cohesively than Harry Potter, written by a single author.&nbsp;</p><p>JK Rowling, a single person, created way more value (in terms of measurable dollar amount and unmeasurable happiness, good times) than most companies with hundreds of employees in the world.&nbsp;</p><p>Eventually, the software business would grow in a similar way.</p><p><a href=\"https://www.dailymail.co.uk/news/article-2127343/Facebook-buys-Instagram-13-employees-share-100m-CEO-Kevin-Systrom-set-make-400m.html\">We already witnessed the 13-employee Instagram get acquired for $1B in 2012</a>. When will we see a $1B+ software/internet company with 5 or fewer employees achieve the same feat?</p><p>Great internal tools and processes provide leverage to enable a tiny team to be super-efficient. This is easy to understand. We human beings already built a lot of tools to greatly extend our physical/mental limits, e.g., bikes and cars (versus walking), computers (versus manual calculation), etc.</p><p>Given that it’s (almost) impossible to 100% automate an Internet business, we have to improve the efficiency of manual operations. It’s a great investment to increase human operators’ productivity.</p><h2>Tidbits of running Listen API as a&nbsp;business</h2><p>Things I didn’t know before…</p><h3><strong>Anyone can sign up =&gt; Submit your application first</strong></h3><p>A few years ago, I noticed that certain APIs required me to submit an application first, describing my use case, before giving me an API key.</p><p>I didn’t understand the rationale back then.</p><p>After running my own API business, now I understand.&nbsp;</p><p>The Internet is huge. The world is gargantuan. There are good people and bad people. If the API you provide is useful, some folks will try to abuse your API.&nbsp;</p><p>That’s what happened when we initially allowed anyone to create an API account. We were seeing users creating dozens of accounts in order to get around the free quota limit.</p><p>Today, we require people to submit an application first. We get a notification via Slack. Then we use our internal tool to review and approve or reject the application. The applicant receives an automatic email. On our end, it’s two or three clicks to finish all these operations.&nbsp;</p><p>To assist our review process, we use a bunch of heuristics: </p><p>Did this user previously create multiple accounts?&nbsp;</p><p>Is this IP address a well-known spammer discoverable via<a href=\"https://www.stopforumspam.com/\"> <u>stopforumspam.com</u></a>?&nbsp;(hint: there's an API for that)</p><p>And so on…</p><p>Again, we are seeing new edge cases from time to time. Yet we are also learning how to handle those unique cases.</p><h3><strong>Ideal customers and interesting customers</strong></h3><p>Our best customers are mostly startup founders who have been in business for quite some time. They can make decisions on their own. They understand the value we provide. They have the power to finalize purchase decisions. And they are competent enough to read our documentation autonomously and ask very few questions — or they don’t even talk to us at all.</p><p>On the other hand, people from well-funded VC-backed startups or huge companies (some of the biggest companies in the world) oftentimes ask for a discount or free trial, which we don’t have. Why? I don’t have a good answer here.&nbsp;</p><p>Of course, there are always exceptions.</p><h3><strong>Dev shops and coding bootcamps</strong></h3><p>Many of our users hire freelancers or dev shops overseas to build apps and websites.&nbsp;</p><p>Generally speaking, developers from dev shops are not as good as in-house developers. Although not 100% true, the chance is quite high.&nbsp;</p><p>In essence, a bunch of my customer support replies are to teach Computer Science 101 . Sometimes they sent code snippets in PHP (or a language that I don’t know) to ask us to debug it via email.&nbsp;</p><p>I understand that some of those developers from dev shops are fresh out of coding bootcamps (or the dev shop itself is a coding bootcamp). Most of the time I will Google for them and send them a StackOverflow link or something like that. But occasionally, if I was in a bad mood, I would not reply to the “help me debug my PHP code” emails from FREE users who don’t pay us.</p><p>Also, quite a few coding bootcamps use our API to teach students how to write code, which is great. In real-world web projects, you can’t avoid using third-party REST APIs. Teaching new programmers how to talk to a REST API is necessary.</p><h3><strong>API is a slow&nbsp;business</strong></h3><p>Usually it’ll take a user a few months to start paying us.</p><p>They need to add a big product feature or even build an entire app first. Then they need to do some marketing and get some traction. Finally, they pay, or they give up and shut down the app.</p><p>We definitely should think about how to help our users build product features fast.&nbsp;</p><p><a href=\"https://stripe.com/\">Stripe</a> is doing a great job in this area. They built a lot of nice UI components that developers can directly use without writing tons of code, e.g.,<a href=\"https://stripe.com/payments/checkout\"> Checkout</a>.</p><h3><strong>API is a stable&nbsp;business</strong></h3><p>Our churn rate is quite low. People spend many months building an app using our API, so it’s unlikely that they’ll switch to something else overnight.&nbsp;</p><p>I’m happy with that fact.</p><p>Meanwhile, I’m also very bullish on all the other API businesses out there, e.g., Stripe, Plaid, Twilio. (This isn’t investment advice, but look at the stock<a href=\"https://finance.yahoo.com/quote/TWLO/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAAD_FoGY9a1EMiBkUZnYb_ByV8xNHfzcUKtujgYNthliWl55I0UWnIhIDivMvPxpFu5Fzuuyn1fh9lCU4p3tRZmjFFIJIxEKdx4Jlnp5U1Bb_HD4AZRMH3pri07JrBsKu6LqPk4M1ruR5QQefUPmS0Mg9-3R54fpr7AzYBnutkxbK\"> TWLO</a>)</p><h3><strong>Start with whales, then diversify</strong></h3><p>At the early stage, there might be a few user “whales” who account for a big portion or even most of the revenue.&nbsp;</p><p>Don’t panic.&nbsp;</p><p>Having revenue is still better than not having revenue at all.</p><p>We are not in a position to be picky at the early stage. We can diversify along the way.</p><p>I like reading <a href=\"http://www.investopedia.com/terms/s/sec-form-s-1.asp\">S-1</a>s.</p><p>It’s not uncommon to see some SaaS or API companies with a few whales when they went public. If they lost one or two such whales, their revenue would drop 10%, or even 20%+ immediately! Well, they are already a public company. No need to worry about them. They know what to do next.</p><h3><strong>Pricing is work-in-progress</strong></h3><p>We are always experimenting with new pricing. Similar to building software projects in general, pricing is always a work in progress.&nbsp;</p><p>We allow old users to stick to the lower pricing they obtained when they signed up. Any future price changes won’t affect existing paying users. I know that select pricing experts would warn me that I leave money on the table by this practice. But I feel thankful for customers who stand by us for so long. I want them to enjoy the low pricing as a benefit.</p><p>By the way,<a href=\"https://www.profitwell.com/\"> ProfitWell</a> has great resources regarding pricing.</p><h3><strong>Haters / irrelevant critiques</strong></h3><p>You may have seen this theory:<a href=\"https://www.google.com/search?q=When+you+have+haters%2C+you%27re+doing+something+right\"> When you have haters, you’re doing something right</a>.</p><p>There’s a similar quote from<a href=\"https://en.wikipedia.org/wiki/Zeng_Guofan\"> Zeng Guofan</a>&nbsp;(one of the most important millitary leaders &amp; politicians in the 19th century China):&nbsp;</p><p>不招人妒者皆庸才. “If no one envies you, then you are incompetent.”&nbsp;</p><p>Side note: You can find Zeng Guofan’s wisdom inside many airport bookstores in China. He would have been a great Twitter user and beat those Twitter VC philosophers if he were born in our time - it's hard to beat a historical Chinese figure in the game of fortune cookie :)</p><p>If your project is visible on the Internet and gets a bit of traction, some people&nbsp;will hate you for no particular reason.&nbsp;</p><p>Once you offer a paid service, you’ll never provide a price that is low enough to make everyone in the world happy. No, $1.00 USD is not cheap at all in many places in the world. People who are not your target users will complain about your pricing.</p><p>From my experience, it’s safe to ignore most critics, advice-givers, and suggestions from non-users. Sometimes people try to compare two things with similar names. For example, if you search “podcast API” on Google, you’ll find a few other APIs with “podcast API” in their names.&nbsp;However, if you spend a few minutes skimming the documentation, you’ll find obvious differences. It’s like comparing two people with the same first name and family name who are two completely different individuals after all.</p><p>The only critiques or suggestions I care about are mostly from our users. I can see their API usage. I know they are expressing meaningful facts. So I listen to them.</p><h2><strong>So are you interested building an API business?</strong></h2><p>Nowadays, the “passion economy” or “creator economy” is hot.&nbsp;</p><p>Who are creators? Writers, podcasters, streamers…</p><p>Don’t forget that software developers are also creators!</p><p>If you already run a website or have some interesting data, you may start an API business as well.</p><p>You can find more inspirations by listening to podcast interviews. Typically I would search a person's name on Listen Notes (so meta~) to binge listen to their past interviews. Podcasts have very high insight density and you can absorb knowledge directly from experts, while multitasking (e.g., workout, driving, doing housework...).&nbsp;In the contexts of this article (re: API business), I would search founders of API companies, for example:</p><ul><li><a href=\"https://lnns.co/lGNcuPgT1Mk\">Zach Perret</a> (co-founder and CEO of Plaid, banking API)</li><li><a href=\"https://lnns.co/Pam_1QKA4JX\">Jeff Lawson</a> (co-founder and CEO of Twilio, SMS API)</li><li><a href=\"https://lnns.co/cygdpfe3Uq6\">Patrick Collison</a> and&nbsp;<a href=\"https://lnns.co/zcpjCNM-JZ3\">John Collison</a> (cofounders of Stripe, payment API)</li><li><a href=\"https://lnns.co/UHs-cZqQE3F\">Sameer Dholakia</a> (CEO of SendGrid, email API)</li><li>...</li></ul><p>You can <a href=\"https://www.listennotes.com/listen/\">create a Listen Later playlist</a> with those episodes of API companies founders, and listen on your favorite podcast apps via the RSS.</p><h2><strong>More...</strong></h2><p>Learn more about Listen Notes, Inc.</p><ul><li><a href=\"https://www.listennotes.com/blog/the-boring-technology-behind-a-one-person-23/\">The boring technology behind a one-person Internet company</a></li><li><a href=\"https://www.listennotes.com/blog/good-enough-engineering-to-start-an-internet-27/\">Good enough engineering to start an Internet company</a></li><li><a href=\"https://www.listennotes.com/blog/why-podcasts-are-my-new-wikipedia-the-perfect-41/\">Why Podcasts Are My New Wikipedia —the Perfect Informal Learning Resource</a></li></ul><p>Or</p><ul><li>Search episodes &amp; podcasts:&nbsp;<a href=\"https://www.listennotes.com/\">listennotes.com</a></li><li>Build your own podcast playlists:&nbsp;<a href=\"https://www.listennotes.com/listen/\">listennotes.com/listen</a></li><li>Build podcast apps with our podcast API:&nbsp;<a href=\"https://www.listennotes.com/api/\">listennotes.com/api</a></li></ul><hr><p>Thanks for reading this long article&nbsp;:) Let me know what you think: wenbin@listennotes.com</p><div><p><em>I send one and only one email every month for Listen Notes product/company updates. Consider this as \"git log\" for Listen Notes, Inc. If you are interested, please subscribe here:</em></p></div></div></div>","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"e69c18835f772c52986addcca51ac8d59ac4acb6ca990f16d7d33ba767e6b8a4","category":"Tech"}
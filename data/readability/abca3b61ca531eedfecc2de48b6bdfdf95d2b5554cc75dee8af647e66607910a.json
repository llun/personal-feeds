{"title":"How to beat Paper Mario really fast by… playing Ocarina of Time?","link":"https://arstechnica.com/?p=1747424","date":1614966746000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><h4>\"Stop n Swop\" reborn —</h4><h2 itemprop=\"description\">Hackers use cartridge-swapping method to move memory from one game to another.</h2></div><div itemprop=\"articleBody\"><figure><p><iframe type=\"text/html\" width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/N-JJa9AofLI?start=0&amp;wmode=transparent\" frameborder=\"0\" allowfullscreen=\"\"></iframe></p><figcaption><p>Probably the only <em>Paper Mario</em> speedrun you've ever seen that includes extensive <em>Ocarina of Time</em> gameplay.</p></figcaption></figure><p>The idea of using video games as a way to achieve some form of Arbitrary Code Execution (ACE) on classic hardware has come a long way since seven years ago, when <a href=\"https://arstechnica.com/gaming/2014/01/how-an-emulator-fueled-robot-reprogrammed-super-mario-world-on-the-fly/\">TASbot publicly reprogrammed a Super NES on the fly via <i>Super Mario World</i></a>. There are now <a href=\"http://tasvideos.org/Movies-C3050Y.html\">dozens of examples</a> of similar glitches that use nothing but controller inputs to insert new programming instructions into classic games, including <a href=\"https://arstechnica.com/gaming/2017/05/hackers-jailbreak-permanent-mods-onto-super-mario-world-save-files/\">many that can be performed by humans</a> (and not just button-mashing robots).</p><p>Even given all that history, though, we’re still a bit wowed by the speedrunning community that found a way to insert new code into <i>Paper Mario</i> for the N64, leading to <a href=\"https://www.youtube.com/watch?v=N-JJa9AofLI\">a new record-setting speedrun of the game</a>. Their new method requires some extremely careful character positioning, the exploitation of “junk” memory in the N64’s RAM expansion pack and, amazingly, playing a couple of games of <i>The Legend of Zelda: Ocarina of Time</i>.</p><h2>Enter the effects matrix</h2><p>The story of how this incredible method was discovered goes back two months, when a Paper Mario speedrunner&nbsp;who goes by Morpheus <a href=\"https://twitter.com/Morpheus080/status/1347634657156857856\">stumbled on a mysterious game crash</a> in the middle of a livestreamed run. Players eventually discovered that Morpheus had accidentally triggered a situation where the game was storing too much data in the “effects matrix,” a data structure the game uses to store details of visual effects like smoke from Mario’s hammer blows.</p><p>By using a menu glitch to permanently store what are usually temporary effects, a player can overflow that matrix and enter a portion of unrelated memory, which the game interprets as “garbage” machine code, leading to a crash.</p><p>From there, players got to work <a href=\"https://www.youtube.com/watch?v=v-uwcMJIrsY\">figuring out</a> how to use the overloaded effects matrix to run useful code rather than game-breaking junk. Doing that meant careful manipulation of Mario’s position in the game’s three-dimensional coordinate system so those positional values could be inserted into precise positions in the effects matrix. This was made harder because Mario’s vertical position in the in-game world is heavily limited by, uh, gravity.</p><figure><p><iframe type=\"text/html\" width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/UVcBHUY90DY?start=0&amp;wmode=transparent\" frameborder=\"0\" allowfullscreen=\"\"></iframe></p><figcaption><p>Fray's proof-of-concept video goes into some detail on how the <em>Paper Mario</em> glitch actually works.</p></figcaption></figure><p>By mid-February, though, <i>Paper Mario</i> runner Fray had done the positional calculations and <a href=\"https://www.youtube.com/watch?v=UVcBHUY90DY\">shown off a code execution proof of concept</a> that could be performed with the assistance of emulation tools. A few days later, another runner, Rain, <a href=\"https://twitter.com/Rainchus/status/1363168625171984384\">showed off a complete tool-assisted speedrun</a> that warps the player to the game’s credits scene much faster than even <a href=\"https://www.youtube.com/watch?v=7094MorysWM\">the fastest glitch-exploiting speedruns</a> could do previously.</p><p>Unfortunately, the extremely precise positioning required for this method means a human would have no chance of replicating it. And that’s where <i>Ocarina of Time</i> and <a href=\"https://en.wikipedia.org/wiki/Nintendo_64_accessories#Expansion_Pak\">the N64 RAM expansion pak</a> come into play.</p><h2>Stopping and “Swopping”</h2><p>Remember that buffer overflow crash Morpheus discovered in January? It turns out that “by sheer crazy coincidence, this [buffer overflow] jumps execution to a part of memory where there are player flags and an idle timer,” explained&nbsp;<a href=\"https://pastebin.com/E8Kxm1tG\"><i>Paper Mario</i> streamer JCog</a>. “If we let that idle timer reach anywhere from 0x810 to 0x81f, which is 69 seconds (nice), before releasing the stored effects, then execution jumps to expansion pak memory, which <i>Paper Mario</i> doesn't use, and then it crashes from garbage data.”</p><p>Going from one set of garbage data to another doesn’t seem very useful, unless you also have a way to edit that expansion pak memory first. Fortunately, <i>another</i> ACE method in <i>Ocarina of Time</i> gives us a way in there. We won’t discuss the intricate steps necessary for that glitch here, but the process is broadly similar to the one used to insert <i>Star Fox</i>&nbsp;Arwings into the game, <a href=\"https://arstechnica.com/gaming/2020/01/how-to-get-star-fox-64-ships-into-ocarina-of-time-no-hacking-required/\">as we described in detail last year</a>. By repeating this method twice (using a couple of carefully constructed file names), an <i>Ocarina of Time</i> runner can load a specific assembly instruction into that area of expansion pak memory.</p><figure><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/n64xp.jpg\" data-height=\"740\" data-width=\"1200\" alt=\"Neither <em>Ocarina of Time</em> nor <em>Paper Mario</em> officially uses the N64 memory expansion pak, but it's key to making this in-game hack work.\"><img alt=\"Neither <em>Ocarina of Time</em> nor <em>Paper Mario</em> officially uses the N64 memory expansion pak, but it's key to making this in-game hack work.\" src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/n64xp-640x395.jpg\" width=\"640\" height=\"395\" srcset=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/n64xp.jpg 2x\"></a><figcaption><p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/n64xp.jpg\" data-height=\"740\" data-width=\"1200\">Enlarge</a> <span>/</span> Neither <em>Ocarina of Time</em> nor <em>Paper Mario</em> officially uses the N64 memory expansion pak, but it's key to making this in-game hack work.</p></figcaption></figure><p>You might think that expansion RAM memory would become unusable after you turn the system off. But early editions of the N64 hardware actually have a quirk where that memory persists for a few seconds after the system powers down. That idiosyncrasy was actually <a href=\"http://www.raregamer.co.uk/games/paul-machacek-stop-n-swop-interview/\">key to Rare’s plans for a “Stop n Swop” system</a>, which would have let players unlock items and content in one Rare game by playing a different game and then quickly swapping the cartridges. Unfortunately, later revisions to the hardware changed that unintended memory persistence and <a href=\"http://www.raregamer.co.uk/games/stop-n-swop-retrospective/#Nintech\">forced Rare to abandon those plans</a>.</p><p>Today, though, players can still exploit the vagaries of early N64 hardware to move memory from one game to another. As JCog explained, “If we quickly turn off the console, swap cartridges to <i>Paper Mario</i>, and turn the console back on, that instruction will still be there in memory (luckily when [<i>Ocarina of Time</i>] boots, it clears the expansion pak memory, but <i>Paper Mario</i> just ignores it).”</p><p>With the <i>Ocarina</i>-inserted instruction still stored in expansion pak memory, Morpheus’ glitch doesn’t crash the system but instead jumps the game to the credits cut scene, making for a human-repeatable speedrun solution. You can see the cartridge swap involved <a href=\"https://www.youtube.com/watch?v=N-JJa9AofLI&amp;t=45m00s\">at 45:00 in this video</a>, followed by the <i>Paper Mario</i> glitch that takes advantage of that leftover <i>Ocarina of Time</i> memory.</p><p>JCog noted that this extreme method probably shouldn’t count for <a href=\"https://www.speedrun.com/pm64\">the <i>Paper Mario</i> speedrun leaderboards</a>, since it requires setup from outside the game. Still, the fact that it's possible at all is a testament to the research, ingenuity, and hacking chops of a dedicated group of players determined to unlock the inner workings of classic gaming hardware.</p></div></div>","author":"Kyle Orland","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"abca3b61ca531eedfecc2de48b6bdfdf95d2b5554cc75dee8af647e66607910a","category":"Tech"}
{"title":"CSS Individual Transform Properties","link":"https://webkit.org/blog/11420/css-individual-transform-properties/","date":1607968821000,"content":"<div id=\"readability-page-1\" class=\"page\"><article id=\"post-11420\"><div><p>CSS Transforms appeared on the Web along with CSS Animations and CSS Transitions to add visual effects and motion on the Web. Those technologies have been a staple of the Web platform and Web developers’ toolkit for well over a decade. In fact, the CSS <code>transform</code> property first shipped in Safari all the way back in July 2008 when iPhone OS 2.0 shipped. You can find some historical posts about <a href=\"https://webkit.org/blog/130/css-transforms/\">initial support in WebKit</a> from October 2007, and another post from July 2009 focusing on <a href=\"https://webkit.org/blog/386/3d-transforms/\">3D transforms</a> when CSS Transforms shipped in Mac OS X Leopard.</p><p>And now, there is some news in the world of CSS Transforms: <a href=\"https://drafts.csswg.org/css-transforms-2/#individual-transforms\">individual transform properties</a> are enabled by default in <a href=\"https://webkit.org/blog/11364/release-notes-for-safari-technology-preview-117/\">Safari Technology Preview 117</a>. This means that, as in Firefox and Chrome Canary, you can now use the new <a href=\"https://drafts.csswg.org/css-transforms-2/#propdef-translate\"><code>translate</code></a>, <a href=\"https://drafts.csswg.org/css-transforms-2/#propdef-rotate\"><code>rotate</code></a> and <a href=\"https://drafts.csswg.org/css-transforms-2/#propdef-scale\"><code>scale</code></a> CSS properties to specify what have so far been functions of the <code>transform</code> property, including 3D operations.</p><p>Using these properties is simple and should make Web developers feel right at home. Consider these two equivalent examples:</p><pre><code><span>div</span><span>.transform-property</span> {\n    <span>transform</span>: <span>translate</span>(<span>100px</span>, <span>100px</span>) <span>rotate</span>(<span>180deg</span>) <span>scale</span>(<span>2</span>);\n}\n\n<span>div</span><span>.individual-properties</span> {\n    <span>translate</span>: <span>100px</span> <span>100px</span>;\n    <span>rotate</span>: <span>180deg</span>;\n    <span>scale</span>: <span>2</span>;\n}\n</code></pre><p>But why would you use these new properties over the <code>transform</code> property? One reason is convenience, as you might deem it simpler to write <code>scale: 2</code> rather than <code>transform: scale(2)</code> when all you intend to do is scale an element.</p><p>But I think the main draw here is that you are now free to compose those various transform properties any way you see fit. For instance, you can easily write a CSS class to flip an element using the <code>scale</code> property without worrying that you might override other transform-related properties:</p><pre><code><span>.flipped</span> {\n    <span>scale</span>: <span>-1</span>;\n}\n</code></pre><p>Your <code>flipped</code> class will work just fine even if a <code>rotate</code> or <code>transform</code> property applies a rotation to the element.</p><p>This feature also comes in handy when animating transforms. Let’s say you’re writing an animation that scales an element up over its entire duration but also applies a rotation for the second half of that animation. With the <code>transform</code>, property you would have had to pre-compute what the intermediate values for the scale should have been when the rotation would start and end:</p><pre><code><span>@keyframes</span> <span>scale-and-rotate</span> {\n    0%   { <span>transform</span>: <span>scale</span>(<span>1</span>) }\n    50%  { <span>transform</span>: <span>scale</span>(<span>1.5</span>) <span>rotate</span>(<span>0deg</span>) }\n    100% { <span>transform</span>: <span>scale</span>(<span>2</span>) <span>rotate</span>(<span>180deg</span>) }\n}\n</code></pre><p>While this may not look like such a big deal when you look at it, making any further changes to those keyframes would require recomputing those values. Now, consider this same animation written with the individual transform properties:</p><pre><code><span>@keyframes</span> <span>scale-and-rotate</span> {\n    0%   { <span>scale</span>: <span>0</span> }\n    50%  { <span>rotate</span>: <span>0deg</span> } \n    100% { <span>scale</span>: <span>1</span>; <span>rotate</span>: <span>180deg</span>; }\n} \n</code></pre><p>You can easily change the keyframes and add other properties as you like, leaving the browser to work out how to correctly apply those individual transform properties.</p><p>But that’s not all; there is also the case where you want separate animations to apply to an element at the same time. You could split out this single set of keyframes into two different sets and tweak the timing instead:</p><pre><code><span>.animated</span> {\n    <span>/* Apply the scale keyframes for 1s and the rotate\n       keyframes for 500ms with a 500ms delay. */</span>\n    <span>animation</span>: <span>scale</span> <span>1s</span>, <span>rotate</span> <span>500ms</span> <span>500ms</span>;\n}\n\n<span>@keyframes</span> <span>scale</span> {\n    <span>from</span> { <span>scale</span>: <span>0</span> }\n    <span>to</span>   { <span>scale</span>: <span>1</span> }\n}\n\n<span>@keyframes</span> <span>rotate</span> {\n    <span>from</span> { <span>rotate</span>: <span>0deg</span> }\n    <span>to</span>   { <span>rotate</span>: <span>180deg</span> }\n}\n</code></pre><p>Now keyframes applying to transforms are not only easier to author, but you can better separate the timing and the keyframes by composing multiple transform animations. And if you are a seasoned CSS Animations developer, you’ll know how important this can be when you factor in timing functions.</p><p>Additionally, animating the new individual transform properties retains the same great performance as animating the <code>transform</code> property since these properties support hardware acceleration.</p><p>But what about the <code>transform</code> property? How does it relate to those new individual transform properties?</p><p>First, remember that the <code>transform</code> property supports transform functions that are not represented as individual transform properties. There are no equivalent CSS properties for the <code>skew()</code>, <code>skewX()</code> and <code>skewY()</code> functions and no property equivalent to the <code>matrix()</code> function.</p><p>But what happens when you specify some of the individual transform properties as well as the <code>transform</code> property? The <a href=\"https://drafts.csswg.org/css-transforms-2\">CSS Transform Level 2 specification</a> explains how individual transform properties and the <code>transform-origin</code> and <code>transform</code> properties are composed to form the <a href=\"https://drafts.csswg.org/css-transforms-2/#ctm\">current transformation matrix</a>. To summarize, first the <em>individual</em> transform properties are applied – <code>translate</code>, <code>rotate</code>, and then <code>scale</code> – and then the functions in the <code>transform</code> property are applied.</p><p>This means that there’s a clear model to use those individual transform properties and the <code>transform</code> property together to enhance your ability to transform content on the Web platform.</p><p>And before you start using these new properties, it is important that you know how to detect their availability and use <code>transform</code> as a fallback. Here, the <code>@supports</code> rule will allow you to do what you need:</p><pre><code><span>@supports</span> (<span>translate</span>: 0) {\n    <span>/* Individual transform properties are supported */</span>\n    <span>div</span> {\n        <span>translate</span>: <span>100px</span> <span>100px</span>;\n    }\n}\n\n<span>@supports</span> <span>not</span> (<span>translate</span>: 0) {\n    <span>/* Individual transform properties are NOT supported */</span>\n    <span>div</span> {\n        <span>transform</span>: <span>translate</span>(<span>100px</span>, <span>100px</span>);\n    }\n}\n</code></pre><p>We encourage you to start exploring how to use those three new properties in Safari Technology Preview in your projects and file bug reports on <a href=\"https://bugs.webkit.org/\">bugs.webkit.org</a> should you encounter unexpected issues. You can also send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a> or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on individual transform properties.</p></div></article></div>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"c74d20dccca316e8b552f454669240a461e4b90824521d56d042937365b09ad7","category":"Tech"}
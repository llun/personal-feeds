{"title":"สรุปการพูดคุยเรื่อง Swagger/Protobuf usecase and trend","link":"https://www.somkiat.cc/summary-from-swager-protobuf-usecase-and-trend/","date":1613228113000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header><div><p><time>February 13, 2021</time> <span><a href=\"https://www.somkiat.cc/category/general/\" rel=\"category tag\">เรื่องทั่วไป</a></span></p></div></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/02/Screen-Shot-2564-02-13-at-21.34.45.png\" alt=\"\" width=\"544\" height=\"306\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/02/Screen-Shot-2564-02-13-at-21.34.45.png 984w, https://www.somkiat.cc/wp-content/uploads/2021/02/Screen-Shot-2564-02-13-at-21.34.45-300x169.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/02/Screen-Shot-2564-02-13-at-21.34.45-768x432.png 768w\" sizes=\"(max-width: 544px) 100vw, 544px\"></figure><p>วันนี้ได้พูดคุยใน ClubHouse กันนิดหน่อย<br>เรื่อง Swagger/Protobuf usecase and trend<br>เป็นการแลกเปลี่ยนแนวทางในการพัฒนา API<br>ไม่ว่าจะเป็น RESTFul API, Protobuf หรือพวก gRPC</p><p>แนวทางในการพูดคุยประกอบไปด้วย</p><p><strong>Design First</strong></p><p>เริ่มจากการออกแบบ API specification ก่อน<br>ไม่ว่าจะเป็น Swagger, API BluePrint และ RAML ก็ตาม<br>จากนั้นทำการ generate code ส่วนของ API ออกมาให้<br>ด้วยเครื่องมือที่จัดเตรียมไว้ เช่น <strong><a href=\"https://swagger.io/tools/swagger-codegen/\" target=\"_blank\" rel=\"noreferrer noopener\">Swagger CodeGen</a></strong> เป็นต้น<br>ซึ่งสนับสนุนภาษาโปรแกรมมากมาย</p><p>หรืออาจจะสร้าง DSL (Domain Specific Language) ขึ้นมา<br>เพื่อสร้างตามความต้องการของบริษัท<br>ยกตัวอย่างเช่น <strong><a rel=\"noreferrer noopener\" href=\"https://github.com/omise/bluepine\" target=\"_blank\">Omise Bluepine</a></strong></p><p><strong>Code First</strong></p><p>เริ่มจากการเขียน code ก่อน<br>จากนั้นใช้เครื่องมือ generate Specification/Documentation&nbsp;<br>ยกตัวอย่างเช่น <strong><a rel=\"noreferrer noopener\" href=\"https://github.com/swaggo/swag\" target=\"_blank\">Swag</a></strong> เป็นต้น</p><p><strong>และเพิ่มเติมเข้ามาเรื่องของ Contract testing</strong></p><p>เพื่อช่วยให้ทั้ง provider และ consumer มั่นใจว่า<br>เมื่อมีการเปลี่ยนแปลงหรือปรับปรุงแล้ว<br>ยังคงไม่ทำให้เกิดปัญหาหาหรือทำให้รู้ปัญหาได้อย่างรวดเร็วยก<br>ตัวอย่างเช่น</p><ul><li><a href=\"https://docs.pact.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Pact</a></li><li><a href=\"https://spring.io/projects/spring-cloud-contract\" target=\"_blank\" rel=\"noreferrer noopener\">Spring Cloud Contract Testing</a></li></ul><p><strong>อีกทั้ง API Specification ที่เขียนตาม format ของ Swagger และ API Blueprint</strong></p><p>สามารถทำการสร้าง Mock server ในมุมของ provider และ consumer<br>ได้ด้วยเครื่องมือต่าง ๆ ดังนี้</p><ul><li><a rel=\"noreferrer noopener\" href=\"https://github.com/apiaryio/dredd\" target=\"_blank\">Dredd</a></li><li><a rel=\"noreferrer noopener\" href=\"https://stoplight.io/api-mocking/\" target=\"_blank\">Prism</a></li></ul><p>ไม่ว่าจะเป็นรูปแบบไหน ก็ต้องดูในบริบทต่าง ๆ ด้วย<br>รวมทั้งว่า เข้ามาช่วยเพิ่ม productivity ด้วยหรือไม่<br>หรือเข้ามาช่วยแก้ไขปัญหา หรือเพิ่มปัญหา</p></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"e3871649acadbd852985633e9b44bbdd8acd577bd946c248e10a5312ec309e07","category":"Thai"}
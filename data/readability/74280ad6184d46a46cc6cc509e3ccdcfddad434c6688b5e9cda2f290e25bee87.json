{"title":"Using Rich Return Types and Map Expressions in Sentinel 0.17","link":"https://www.hashicorp.com/blog/using-rich-return-types-and-map-expressions-in-sentinel-0-17","date":1611766800000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><section><p><a href=\"https://www.hashicorp.com/sentinel\">Sentinel</a> is a policy as code language and framework that enables fine-grained, logic-based policy decisions. Sentinel is an enterprise-only feature and is embedded in HashiCorp Consul, Nomad, Terraform, and Vault.</p><p>Recently we announced <a href=\"https://discuss.hashicorp.com/t/sentinel-v0-17-0-announcing-rich-return-types/19385\">the release of Sentinel 0.17</a>, which is a fundamental change to the Sentinel runtime. It includes several new features:</p><ul><li><strong>Map Expressions:</strong> Provides the ability to create rich reporting data sets.</li><li><strong>Rich Return Types:</strong> Adds supports for non-boolean values in rules.</li><li><strong>Emptiness Comparison:</strong> Comparison expressions that provide a natural method of checking for empty collections.</li><li><strong>Comparison Enhancements:</strong> Maps are now comparable for equality.</li><li><strong>Machine Readable Tracing:</strong> Adding JSON output as a CLI option for both <code>sentinel apply</code> and <code>sentinel test</code>.</li><li><strong>Base64 Import:</strong> Enabling Sentinel policies to work with base64-encoded data.</li></ul><p>In this post, I will demonstrate how, by using a mixture of Map Expressions and Rich Return Types, you can greatly improve the process of returning policy compliance reporting data.</p><p>From Sentinel 0.17 onward, you can use a higher-order <a href=\"https://docs.hashicorp.com/sentinel/language/spec#quantifier-expressions-any-all-filter-map\">map expression</a> to return a list based on an input collection.</p><p>In map expressions, a list is always returned regardless of the input collection type. Upon evaluation, each element within an input collection is identified according to the map expression body, and the resulting data is added to the map.</p></section><div><pre><code>// Input Collection\ninput = [\n  { \n    \"name\":\"sentinel\",\n    \"version\":\"0.17.1\",\n    \"shasums\":\"sentinel_0.17.1_SHA256SUMS\",\n    \"shasums_signature\":\"sentinel_0.17.1_SHA256SUMS.sig\",\n  },\n]\n\n// Map Expression\nresult = map input as _, i {\n  {\n    \"name\": i.name,\n    \"version\": i.version,\n  }\n}\n\nmain = rule {\n result // [{\"name\": \"sentinel\", \"version\": \"0.17.1\"}]\n}</code></pre></div><section><p>If you would like to view this policy in its entirety, visit the <a href=\"https://play.sentinelproject.io/p/_rq-dtuisL3\">Sentinel Playground</a>.</p><h2><a href=\"#rich-return-types\" aria-label=\"rich return types permalink\">»</a><a id=\"rich-return-types\" aria-hidden=\"\"></a>Rich Return Types</h2><p>Rules are a core feature in the Sentinel runtime and form the basis of a policy. Up until now, a rule has been a single boolean expression that returns either <code>true</code> or <code>false</code> to indicate a passing or failing rule.</p><p>Boolean expression will short-circuit when evaluated, which is critical in time-sensitive applications like HashiCorp Vault. For integrations like Terraform Cloud, which tend to have larger data sets, short-circuit behavior is less of a concern.</p><p>When working with large data sets, understanding why a rule evaluation failed, and identifying the offending resources is far more important and can require multiple evaluations before all policy violations are understood and remediated. Achieving the desired result can lead to the adoption of creative workarounds that tend to circumvent the standard behavior and favor round-about tricks to report meaningful data.</p><p>With the release of Sentinel 0.17, rules have been updated so that they can evaluate any expression and hold <a href=\"https://docs.hashicorp.com/sentinel/language/rules#non-boolean-values\">non-boolean values</a>. By supporting all basic types, Sentinel rules can accept collections (<a href=\"https://docs.hashicorp.com/sentinel/language/lists\">lists</a> and <a href=\"https://docs.hashicorp.com/sentinel/language/maps\">maps</a>), <a href=\"https://docs.hashicorp.com/sentinel/language/values#string\">strings</a>, and numeric (<a href=\"https://docs.hashicorp.com/sentinel/language/values#float\">floating-point</a> and <a href=\"https://docs.hashicorp.com/sentinel/language/values#integer\">integer</a>) values. Combined with the new higher order <a href=\"https://docs.hashicorp.com/sentinel/language/spec#quantifier-expressions-any-all-filter-map\">map expression</a>, this allows practitioners to create rich sets of report data without having to resort to workarounds such as <code>print</code> messages and rules that would otherwise serve no real purpose.</p><h2><a href=\"#bringing-it-all-together\" aria-label=\"bringing it all together permalink\">»</a><a id=\"bringing-it-all-together\" aria-hidden=\"\"></a>Bringing it All Together</h2><p>So far we have covered what Map Expressions and Rich Return Types are and why we have introduced them to the Sentinel runtime. Let’s take a look at how we can apply our knowledge to a real-world policy based on the following requirements:</p><p>All provisioned server instances should have a type of:</p><ul><li>t2.small</li><li>t2.medium</li><li>t2.large</li></ul><p>All server instance configuration that violates the policy requirements should be reported and should include:</p><ul><li>Clear messaging that explains why the violation has occurred</li><li>The address of the offending resource</li><li>The value of the configuration attribute</li><li>The list of allowed configuration values</li></ul><h3><a href=\"#filtering-violations\" aria-label=\"filtering violations permalink\">»</a><a id=\"filtering-violations\" aria-hidden=\"\"></a>Filtering Violations</h3><p>In order to fulfill the first requirement, we need to declare a list of <code>allowedServerTypes</code> that we can cross-reference to ensure that all provisioned server instances are compliant.</p></section><div><pre><code>import \"tfplan/v2\" as tfplan\n\n// Allowed Server Instance Types\nallowedServerTypes = [\"t2.small\", \"t2.medium\", \"t2.large\"]</code></pre></div><section><p>We then use a <a href=\"https://docs.hashicorp.com/sentinel/language/collection-operations#filter-expression\">filter expression</a> to return a subset of all server instances that have a <code>type</code> value that violates the values in the <code>allowedServerTypes</code> list.</p></section><div><pre><code>// Filter all instances that will be created that has a type value that is not listed in allowedServerTypes\nallServerInstanceTypeViolations = filter tfplan.resource_changes as _, rc {\n  rc.change.actions is [\"create\"] and\n    rc.type is \"fakewebservices_server\" and\n    rc.change.after.type not in allowedServerTypes\n}</code></pre></div><section><p>We can now take the contents of the <code>allServerInstanceTypeViolations</code> data set and use it to report all compliance violations.</p><h3><a href=\"#violation-reporting\" aria-label=\"violation reporting permalink\">»</a><a id=\"violation-reporting\" aria-hidden=\"\"></a>Violation Reporting</h3><p>We can use the new <a href=\"https://docs.hashicorp.com/sentinel/language/spec#quantifier-expressions-any-all-filter-map\">map expression</a> to build a dynamic map that contains a <code>message</code> that describes why a violation has occurred, the <code>address</code> of the violating resource as well as the <code>type</code> value and list of <code>allowed_types</code>.</p></section><div><pre><code>// This Sentinel policy ensures that server instance type configuration does not violate a list of allowed types.\nmain = rule {\n  // Sentinel map expression providing contextual violation data\n  map allServerInstanceTypeViolations as _, violation {\n    {\n      \"message\":          violation.change.after.name + \" has an unsupported instance type\",\n      \"address\": violation.address,\n      \"type\":             violation.change.after.type,\n      \"allowed_types\":    allowedServerTypes,\n    }\n  }\n}</code></pre></div><section><p>By encapsulating the expression in <code>main</code>, we can take advantage of Rich Return Types as well as the enhancements that we have made to Sentinel <a href=\"https://docs.hashicorp.com/sentinel/writing/tracing\">tracing</a>. With the redesign we have moved from a fully verbose stack-like trace, to a human-readable output that is easier to understand.</p></section><div><pre><code>1 policies evaluated.\n\n## Policy 1: policy.sentinel (hard-mandatory)\n\nResult: false\n\npolicy.sentinel:14:1 - Rule \"main\"\n  Description:\n    This Sentinel policy ensures that server instance type\n    configuration does not violate a list of allowed types.\n\n  Value:\n    [\n      {\n        \"message\": \"BESRV0 has an unsupported instance type\"\n        \"address\": \"fakewebservices_server.backend[0]\"\n        \"type\": \"t2.macro\"\n        \"allowed_types\": [\n          \"t2.small\"\n          \"t2.medium\"\n          \"t2.large\"\n        ]\n      }\n      {...}\n    ]</code></pre></div><section><p>If you would like to view this policy in its entirety, visit the <a href=\"https://play.sentinelproject.io/p/eUTw2SNwK55\">Sentinel Playground</a>.</p><h2><a href=\"#get-started\" aria-label=\"get started permalink\">»</a><a id=\"get-started\" aria-hidden=\"\"></a>Get Started</h2><p>The <a href=\"https://docs.hashicorp.com/sentinel/changelog\">latest release of Sentinel</a> includes several new features that build on previous investments in the policy authoring workflow. You can start exploring these new capabilities now by downloading the latest version of the Sentinel CLI from the Sentinel <a href=\"https://docs.hashicorp.com/sentinel/downloads/\">download</a> page.</p><p>For more information on Sentinel language and specification, visit the <a href=\"https://docs.hashicorp.com/sentinel/\">Sentinel documentation page</a>. If you would like to engage with the community to discuss information related to Sentinel use cases and best practices, visit <a href=\"https://discuss.hashicorp.com/c/sentinel\">the HashiCorp Community Forum</a>.</p><p>If you would like to play with Sentinel in a safe development environment, you can do so by visiting the <a href=\"https://play.sentinelproject.io/\">Sentinel Playground</a>, which provides the ability to evaluate and share example Sentinel policies and mock data.</p></section></div></div>","author":"Ryan Hall","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"74280ad6184d46a46cc6cc509e3ccdcfddad434c6688b5e9cda2f290e25bee87","category":"Tech"}
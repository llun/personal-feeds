{"title":"ว่าด้วยเรื่องของ Widget testing ใน Flutter","link":"https://www.somkiat.cc/widget-testing-in-flutter/","date":1620722342000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing.jpg\" alt=\"\" width=\"527\" height=\"304\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing.jpg 960w, https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing-300x174.jpg 300w, https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing-768x445.jpg 768w\" sizes=\"(max-width: 527px) 100vw, 527px\"></figure><div><p>สำหรับระบบงานที่พัฒนาด้วย Flutter นั้น<br>เมื่อทำการสร้าง project ใหม่ขึ้นมา<br>จะพบว่าจะมี <strong>folder test</strong> มาให้ด้วยเสมอ<br>พร้อม test case เริ่มต้นมาให้</p><p>แต่จากที่เห็นหลาย ๆ project ก็จะไม่มี test case อะไรเพิ่มขึ้นเลย<br>หนักกว่านั้นทำการลบทิ้งไปอีก !!<br>ทำไมนะ ?<br>ทดสอบระบบงานกันแบบไหนนะ ?</p></div><p><strong>ใน Flutter นั้นจะเตรียมเอกสารในการทดสอบไว้ให้แล้ว</strong></p><p>อยู่ที่ <strong><a href=\"https://flutter.dev/docs/testing\" target=\"_blank\" rel=\"noreferrer noopener\">Flutter Testing</a></strong> มีใครอ่านและทำบ้างยกมือขึ้น !!!<br>ประกอบไปด้วย</p><ul><li>Unit testing</li><li>Widget testing</li><li>Integration testing</li></ul><p>รวมไปถึง Continuous Integration กันเลยทีเดียว ครบถ้วนมาก ๆ</p><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-11-at-14.37.14.png\" alt=\"\" width=\"519\" height=\"164\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-11-at-14.37.14.png 922w, https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-11-at-14.37.14-300x95.png 300w, https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-11-at-14.37.14-768x242.png 768w\" sizes=\"(max-width: 519px) 100vw, 519px\"></figure><p><strong>แต่จากที่พัฒนาระบบงานมาพบว่า Widget testing นั้นมีประโยชน์มากพอสมควร</strong></p><p>ไม่ช้าจนเกินไป<br>สร้างความเชื่อมั่นในระดับที่ดี<br>เขียนไม่ยากเท่าไร<br>อีกอย่างในการออกแบบจะแยกเป็น component หรือ widget เล็ก ๆ อยู่แล้ว<br>เลยพยายามจะทดสอบในส่วนของ Widget ไปเลยว่า<br>ในแต่ละ widget ทำงานถูกต้องตามที่เราต้องการหรือไม่<br>เพราะเชื่อว่า ถ้าแต่ละ widget ทำงานได้อย่างถูกต้อง<br>เมื่อมารวมกันน่าจะทำงานได้ถูกเช่นกัน<br>หรือถ้าไม่ถูกต้อง น่าจะมีปัญหาเรื่องการรวมกันแล้ว<br>ช่วยให้เราหาและแก้ไขปัญหาได้ง่ายขึ้น</p><p><strong>สิ่งที่ทำได้ใน Widget testing ประกอบไปด้วย</strong></p><ul><li>การทดสอบในแต่ละ widget แยกกันไปเลย</li><li>ตรวจสอบการแสดงผล</li><li>สามารถ interact กับ widget ได้ เช่น tab, drag และ กรอกข้อมูล</li></ul><p>โดยการทำงานต่าง ๆ ด้วย class <strong><a rel=\"noreferrer noopener\" href=\"https://api.flutter.dev/flutter/flutter_test/WidgetTester-class.html\" target=\"_blank\">WidgetTester</a></strong> ที่ทาง Flutter เตรียมไว้ให้แล้ว</p><p><strong>ตัวอย่างของ Test ที่เตรียมไว้ให้เมื่อสร้าง project ใหม่</strong></p><p><strong>คำอธิบาย</strong></p><ul><li>จะสร้าง test case ผ่าน method testWidgets()</li><li>ในแต่ละ test case จะม่การ inject WidgetTester มาให้เสมอ</li><li>การทำงานจะเป็นแบบ asynchronous ดังนั้นรูปแบบการเขียนจึงเป็น async-await</li><li>WidgetTester จะทำการจำลอง environment ของ flutter ขึ้นมา โดยไม่ใช้งาน device จริง ๆ</li><li>ปัญหาของการจำลองคือ เรื่องของ state จะพบว่าไปเปลี่ยน ดังนั้นในการทดสอบต้องใช้ method pump() เข้ามา เพื่อให้ widget ทำการ render ตามค่าที่เปลี่ยนแปลงไปนั่นเอง</li><li>การทดสอบจะมี 3 ขั้นตอนคือ หา และสร้าง widget ที่ต้องการทดสอบ ต่อมาทำการ interact กับ UI นั้น ๆ สุดท้ายก็ตรวจสอบผลการทำงาน ว่าเป็นไปตามที่คาดหวังหรือไม่</li></ul><p><strong>ทำการ run test ง่าย ๆ ด้วยคำสั่ง testและมี coverage ให้ด้วย</strong></p><div itemprop=\"text\" id=\"gist109441536\"><table data-tab-size=\"8\" data-paste-markdown-skip=\"\"><tbody><tr><td id=\"file-1-txt-L1\" data-line-number=\"1\"></td><td id=\"file-1-txt-LC1\">$flutter test</td></tr><tr><td id=\"file-1-txt-L2\" data-line-number=\"2\"></td><td id=\"file-1-txt-LC2\"></td></tr><tr><td id=\"file-1-txt-L3\" data-line-number=\"3\"></td><td id=\"file-1-txt-LC3\">// Coverage</td></tr><tr><td id=\"file-1-txt-L4\" data-line-number=\"4\"></td><td id=\"file-1-txt-LC4\"></td></tr><tr><td id=\"file-1-txt-L5\" data-line-number=\"5\"></td><td id=\"file-1-txt-LC5\">$flutter test --coverage</td></tr><tr><td id=\"file-1-txt-L6\" data-line-number=\"6\"></td><td id=\"file-1-txt-LC6\"></td></tr><tr><td id=\"file-1-txt-L7\" data-line-number=\"7\"></td><td id=\"file-1-txt-LC7\">00:02 +1: All tests passed!</td></tr><tr><td id=\"file-1-txt-L8\" data-line-number=\"8\"></td><td id=\"file-1-txt-LC8\"></td></tr><tr><td id=\"file-1-txt-L9\" data-line-number=\"9\"></td><td id=\"file-1-txt-LC9\">$flutter test -r expanded</td></tr><tr><td id=\"file-1-txt-L10\" data-line-number=\"10\"></td><td id=\"file-1-txt-LC10\"></td></tr><tr><td id=\"file-1-txt-L11\" data-line-number=\"11\"></td><td id=\"file-1-txt-LC11\">00:00 +0: Counter increments smoke test</td></tr><tr><td id=\"file-1-txt-L12\" data-line-number=\"12\"></td><td id=\"file-1-txt-LC12\">00:00 +1: Using skip</td></tr><tr><td id=\"file-1-txt-L13\" data-line-number=\"13\"></td><td id=\"file-1-txt-LC13\">00:00 +1 ~1: Using timeout</td></tr><tr><td id=\"file-1-txt-L14\" data-line-number=\"14\"></td><td id=\"file-1-txt-LC14\">00:00 +2 ~1: All tests passed!</td></tr><tr><td id=\"file-1-txt-L15\" data-line-number=\"15\"></td><td id=\"file-1-txt-LC15\"></td></tr><tr><td id=\"file-1-txt-L16\" data-line-number=\"16\"></td><td id=\"file-1-txt-LC16\">// Run with tag group01</td></tr><tr><td id=\"file-1-txt-L17\" data-line-number=\"17\"></td><td id=\"file-1-txt-LC17\">$flutter test -r expanded -t group01</td></tr></tbody></table></div><p><strong>โดยในแต่ละ test case นั้น เราสามารถควบคุมได้เหมือนปกติ</strong></p><p>ยกตัวอย่างเช่น</p><ul><li>Skip test</li><li>Timeout ของการ test</li><li>ใส่ tag เพื่อแยกกลุ่มของ test ได้ ทั้งระดับไฟล์และ test case</li></ul><p><strong>ส่วน Life cycle ของ test นั้นก็เหมือนกับ test framework ทั่วไปคือ</strong></p><ul><li>setupAll() ทำเพียงครั้งเดียว ก่อนที่จะเริ่มทดสอบ</li><li>tearDownAll() ทำเพียงครั้งเดียวเมื่อทดสอบทุก ๆ test case แล้ว</li><li>setup() ทำก่อนที่จะทดสอบแต่ละ test case</li><li>tearDown() ทำหลังจากที่แต่ละ test case ถูกทดสอบแล้ว</li></ul><p><strong>สิ่งที่ต้องเจอแน่ ๆ คือ การจัดการ dependency</strong></p><p>ที่แต่ละ widget ใช้งาน<br>นั่นสามารถจัดการด้วย <strong><a rel=\"noreferrer noopener\" href=\"https://pub.dev/packages/mockito\" target=\"_blank\">Mockito</a></strong><br>หรืออาจจะสร้างจำลองขึ้นมาก็ได้ เช่นพวก Mock server หรือใช้ <strong><a href=\"https://pub.dev/packages/nock\" target=\"_blank\" rel=\"noreferrer noopener\">Nock</a></strong> เป็นต้น<br></p><p><strong><em>ในการพัฒนาระบบงาน จะขาดการทดสอบไปได้อย่างไร ?<br>ขอให้สนุกกับการ coding ครับ</em></strong></p></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4d3177e35fd1c055e801ac91e298444698bd0339566d5648d8d640fe5786517e","category":"Thai"}
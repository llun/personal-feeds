{"title":"A new type of supply-chain attack with serious consequences is flourishing","link":"https://arstechnica.com/?p=1747637","date":1615043719000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><header><h4>POISONING THE WELL —</h4><h2 itemprop=\"description\">New dependency confusion attacks take aim at Microsoft, Amazon, Slack, Lyft, and Zillow.</h2></header><div itemprop=\"articleBody\"><figure><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/software-code-800x534.jpg\" alt=\"A new type of supply-chain attack with serious consequences is flourishing\"><figcaption><p>Getty Images</p></figcaption></figure><p>A new type of supply chain attack unveiled last month is targeting more and more companies, with new rounds this week taking aim at Microsoft, Amazon, Slack, Lyft, Zillow, and an unknown number of others. In weeks past, Apple, Microsoft, Tesla, and 32 other companies were targeted by a similar attack that allowed a security researcher to execute unauthorized code inside their networks.</p><p>The latest attack against Microsoft was also carried out as a proof-of-concept by a researcher. Attacks targeting Amazon, Slack, Lyft, and Zillow, by contrast, were malicious, but it’s not clear if they succeeded in executing the malware inside their networks. The npm and PyPi open source code repositories, meanwhile, have been flooded with more than 5,000 proof-of-concept packages, according to Sonatype, a firm that helps customers secure the applications they develop.</p><p>“Given the daily volume of suspicious npm packages being picked up by Sonatype’s automated malware detection systems, we only expect this trend to increase, with adversaries abusing dependency confusion to conduct even more sinister activities,” Sonatype researcher Ax Sharma <a href=\"https://blog.sonatype.com/pypi-and-npm-flooded-with-over-5000-dependency-confusion-copycats\">wrote</a> earlier this week.</p><h2>A slick attack</h2><p>The goal of these attacks is to execute unauthorized code inside a target’s internal software build system. The technique works by uploading malicious packages to public code repositories and giving them a name that’s identical to a package stored in the target developer’s internal repository.</p><p>Developers’ software management apps often favor external code libraries over internal ones, so they download and use the malicious package rather than the trusted one. Alex Birsan—the researcher who <a href=\"https://arstechnica.com/information-technology/2021/02/supply-chain-attack-that-fooled-apple-and-microsoft-is-attracting-copycats/\">tricked Apple and the other 34 companies</a> into running the proof-of-concept packages he uploaded to npm and PyPi—dubbed the new type of supply chain attack dependency confusion or namespace confusion because it relies of software dependencies with misleading names.</p><p>Software dependencies are code libraries that an application must incorporate for it to work. Normally, developers closely guard the names of dependencies inside their software build systems. But Birsan found that the names often leak when package.json files—which hold various metadata relevant to a development project—are embedded into public script files. Internal paths and public scripts that contain the require() programming call can also leak dependency names.</p><p>In the event the file with the same name isn’t available in a public repository, hackers can upload a malicious package and give it the same file name and a version number that’s higher than the authentic file stored internally. In many cases, developers either accidentally use the malicious library, or their build application automatically does so.</p><p>“It’s a slick attack,” HD Moore, co-founder and CEO of network discovery platform <a href=\"https://www.rumble.run/\">Rumble</a>, said. “My guess is it affects a ton of folks.” He added that most at risk are organizations that use large numbers of internal packages and don’t take special steps to prevent public packages from replacing internal ones.</p><h2>Raining confusion</h2><p>In the weeks since Birsan published his findings, dependency confusion attacks have flourished. Already hit by a proof-of-concept attack that executed Birsan’s unauthorized package in its network, Microsoft recently <a href=\"https://www.contrastsecurity.com/security-influencers/contrast-labs-reveals-dependency-confusion-vulnerability-in-microsoft-teams\">fell to a second attack</a>, which was done by researchers from firm Contrast Security.</p><p>Matt Austin, director of security research at Contrast, said he started by looking for dependencies used in Microsoft’s Teams desktop application. After finding a JavaScript package called “Optional Dependencies,” he seized on a way to get a Teams development machine to download and run a package he put on npm. The package used the same name as a module listed as an optional dependency.</p><p>Shortly after doing so, a script Austin put into the module started contacting him from several internal Microsoft IP addresses. Austin wrote:</p><blockquote><p>Whether the responses I saw were automated or manual, the fact that I was able to generate this reaction poses significant risk. By taking advantage of the post-install script, I was able to execute code in whatever environment this was being installed on. If attackers were to execute code the way I did on a build server for a desktop application update that was about to be distributed, they could insert anything they wanted into that update, and that code would go out to every desktop using Teams—more than 115 million machines. Such an attack could have monumental repercussions, potentially affecting as many organizations as the massive <a href=\"https://www.contrastsecurity.com/security-influencers/solarwinds-hack-exposes-long-overdue-prioritization-of-software-security\">attack on the SolarWinds software factory</a> that was revealed in December.</p></blockquote><p>He provided the following figure illustrating how a malicious attack might work under this theoretical scenario:</p><figure><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/microsoft-teams-dependency-confusion.png\" data-height=\"544\" data-width=\"1079\"><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/microsoft-teams-dependency-confusion-640x323.png\" width=\"640\" height=\"323\" srcset=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/microsoft-teams-dependency-confusion.png 2x\"></a><figcaption><p>Contrast Security</p></figcaption></figure><p>A Microsoft spokeswoman wrote: “As part of our larger efforts to mitigate package substitution attacks, we quickly identified the issue mentioned and addressed it, and at no point did it pose a serious security risk to our customers.” The spokeswoman added that system that executed Ausin’s code was part of our security testing infrastructure. Microsoft has more about the risks and ways to mitigate them <a href=\"https://azure.microsoft.com/en-us/resources/3-ways-to-mitigate-risk-using-private-package-feeds/\" rel=\"nofollow\">here</a>.</p><h2>Attacks turn malicious</h2><p>Like the packages uploaded by Birsan and Austin, the thousands of files that flooded npm and PyPi have mostly contained benign scripts that send the researchers the IP address and other generic details of the computer that runs them.</p><p>But not all of the uploads have observed such restraint. On Monday, Sonatype researchers reported files uploaded to npm that attempted to steal password hashes and bash script histories from companies including Amazon, Slack, Lyft, Zillow.</p><figure><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/bash-stealing-script.jpg\" data-height=\"576\" data-width=\"925\" alt=\"A .bash_history file being accessed by the package uploaded to npm.<br />\n\"><img alt=\"A .bash_history file being accessed by the package uploaded to npm.<br />\n\" src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/bash-stealing-script-640x399.jpg\" width=\"640\" height=\"399\" srcset=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/bash-stealing-script.jpg 2x\"></a><figcaption><p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/03/bash-stealing-script.jpg\" data-height=\"576\" data-width=\"925\">Enlarge</a> <span>/</span> A .bash_history file being accessed by the package uploaded to npm.<br></p><p>Sonatype</p></figcaption></figure><p>“These activities would take place as soon as a dependency confusion attack succeeds and would need no action from the victim, given the nature of the dependency/namespace hijacking issue,” Sharma, the researcher at Sonatype, <a href=\"https://blog.sonatype.com/malicious-dependency-confusion-copycats-exfiltrate-bash-history-and-etc-shadow-files\">wrote</a>.</p><p>Bash histories, which store commands and other input that administrators type into their computers, often contain plaintext passwords and other sensitive data. Files stored in the <a href=\"https://en.wikipedia.org/wiki/Passwd#Shadow_file\">/etc/shadow</a> path of Linux machines store the cryptographic hashes of passwords needed to access user accounts on the computer. (For hashes to be compromised, the npm app would have to be running in super user mode, an extremely elevated set of privileges that are almost never given to software management apps.)</p><p>Sonatype said it had no way of knowing whether the files were executed by any of the companies targeted by the scripts.</p><h2>The targets respond</h2><p>In a statement, Slack officials wrote:</p><blockquote><p>The mimicked library in question is not part of Slack’s product, nor is it maintained or supported by Slack. We have no reason to believe the malicious software was executed in production. Our security team regularly scans the dependencies used in our product with internal and external tools to prevent attacks of this nature. Additionally, Slack’s secure development practices, such as using a private scope when using private dependencies, make it unlikely that a dependency-related attack would be successful against our product.</p></blockquote><p>A Lyft statement read: “Lyft was not harmed in this attempt.There is no indication that this malicious software was executed on Lyft’s network. Lyft has a dedicated information security program to defend against such supply chain attacks and runs an active bug bounty program to continuously test its security controls.”</p><p>Zillow officials wrote:</p><blockquote><p>We are aware of the recent security report involving a possible attack involving spoofed software packages. After an investigation by our security team, we found no evidence that our systems were compromised or exploited by the disclosed technique. Our team is also taking a number of actions to monitor and defend against any future possible attempts to gain unauthorized access to our systems.</p></blockquote><p>npm representatives, meanwhile, wrote: “We’ve provided guidance on how to best protect against these types of substitution attacks in <a href=\"https://github.blog/2021-02-12-avoiding-npm-substitution-attacks/\">this blog post</a>. We’re committed to keeping npm secure and continuing to improve the security of the ecosystem.”</p><p>Amazon representatives didn’t respond to an email seeking comment. A representative for PyPi didn’t immediately have a comment.</p><p>The recent hack against network tools provider Solar Winds—which <a href=\"https://arstechnica.com/information-technology/2020/12/russian-hackers-hit-us-government-using-widespread-supply-chain-attack/\">compromised the Texas company’s software build system</a> and used it to distribute malicious updates to 18,000 customers—was a stark reminder of the damage that can result from supply-side attacks. Dependency confusion attacks have the potential to inflict even more damage unless developers take precautionary measures.</p></div></div></div>","author":"Dan Goodin","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"b229642266ffc69f527cae18b113f755d65459df424265aa495aa5e82684a9a2","category":"Tech"}
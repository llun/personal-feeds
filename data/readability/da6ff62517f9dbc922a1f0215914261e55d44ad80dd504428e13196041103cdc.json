{"title":"Announcing the HashiCorp Packer Plugin SDK","link":"https://www.hashicorp.com/blog/announcing-the-packer-plugin-sdk","date":1614283200000,"content":"<div id=\"readability-page-1\" class=\"page\"><section><p>In Packer, a component is a builder, provisioner, or post-processor. Packer has many built-in components, and historically many users of Packer have depended purely on the built-ins to run their builds. Plugins are standalone binaries that can supply extra, specialized components. Packer’s main codebase loads and runs these plugins, which can then work together with the Packer built-ins to create highly customizable Packer builds. Packer plugins are a key feature that allows Packer to build images on almost any infrastructure type using a wide range of provisioning tools.</p><p>As Packer has grown in adoption, it has become apparent that the reliance upon built-in components limits community developers who want to create their own builders, provisioners, and post-processors. Contributors who have gotten their community components merged with the Packer must wait for a maintainer to review, merge, and release changes before their users can benefit from updates to their components.</p><p>To support Packer’s continued evolution and growing ecosystem, we are excited to announce the Packer plugin SDK as part of its <a href=\"https://github.com/hashicorp/packer/blob/v1.7.0/CHANGELOG.md#170-february-17-2021\">v1.7.0 release</a>. The SDK makes it easier for third-party developers to create, maintain, release, and share their components as plugins.</p><p>Previously, when developing a plugin, you had to use a number of convenience tools embedded within the codebase with little documentation. As a result, plugin development could be difficult to follow and many unused dependencies were imported.</p><p>This complex set of embedded tools made the barrier to entry for creating and maintaining Packer plugins higher than it needed to be.</p><p>The Packer Plugin SDK extracts the required plugin interfaces from the Packer repository into a standalone Go module. Packer plugins can now import the Packer Plugin SDK and use its API, which is explicitly available for Packer plugin functionality. We hope this change lowers the barrier to entry for creating Packer plugins.</p><p>Packer Plugin SDK v0.1.0 is designed for compatibility with Packer v1.7.0. In future versions, the SDK will be versioned separately from the main Packer codebase. Improvements to the SDK will start from the 0.1.0 baseline and follow a semantic versioning scheme compatible with Go modules. The informal SDK within the Core repository has been removed.</p><p>The new SDK offers some new features, including support for plugins that contain multiple components. A single plugin can bundle together builders, post-processors, and provisioners that are all specific to a certain technology. This feature will hopefully reduce the maintenance burden for a plugin.</p><p>Finally, the new SDK supports the new <code>packer init</code> command. Users can declare their desired plugins and plugin versions and Packer will automatically download them.</p><h2><a href=\"#upgrading-packer-for-sdk-support\" aria-label=\"upgrading packer for sdk support permalink\">»</a><a id=\"upgrading-packer-for-sdk-support\" aria-hidden=\"\"></a>Upgrading Packer for SDK Support</h2><p>If you only use components currently built into the Packer, nothing changes for you.</p><p>If you use community-built plugins, you will need to obtain a new version of the plugin when you upgrade to Packer v1.7.0. Previous versions of the plugin will not be compatible.</p><p>If you maintain a community-plugin, you will need to upgrade your plugin to use the SDK. We have an <a href=\"https://www.packer.io/guides/1.7-plugin-upgrade\">upgrade guide</a> and a CLI tool to help you.</p><p>If you’re interested in getting started creating a plugin of your own, check out our updated <a href=\"https://www.packer.io/docs/extending\">documentation for writing plugins</a>. To see a presentation and demo of the Packer Plugin Repository and the <code>packer init</code> command, watch our recent HashiTalk: <a href=\"https://www.hashicorp.com/resources/the-packer-plugin-repository-what-init\">The Packer Plugin Repository, What’s init?</a></p></section></div>","author":"Tracy Holmes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"da6ff62517f9dbc922a1f0215914261e55d44ad80dd504428e13196041103cdc","category":"Tech"}
{"title":"Adventures in Vim: Lee and Jim figure out how to change comment colors","link":"https://arstechnica.com/?p=1741229","date":1613043953000,"content":"<div id=\"readability-page-1\" class=\"page\"><div><header><h4>vim koan number three —</h4><h2 itemprop=\"description\">Stop me if you've heard this one: Two senior sysadmins walk into a ~/.vimrc ...</h2></header><div itemprop=\"articleBody\"><figure><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/02/syncolor.vim_-800x527.png\" alt=\"Who doesn't like cyan comments in their text editor? Lee Hutchinson, that's who.\"><figcaption><p><a href=\"https://cdn.arstechnica.net/wp-content/uploads/2021/02/syncolor.vim_.png\" data-height=\"551\" data-width=\"836\">Enlarge</a> <span>/</span> Who doesn't like cyan comments in their text editor? Lee Hutchinson, that's who.</p><p>Jim Salter</p></figcaption></figure><p>One fine Monday morning, Ars Technica Senior Technology Editor <a href=\"https://arstechnica.com/author/lee-hutchinson/\">Lee Hutchinson</a> came to me with a problem: the colors in his text editor, in his humble opinion, had Begun To Suck.</p><p>In Lee's 20 years or so of Vim usage, he'd gotten accustomed to comment lines in his code and configuration files being rendered in dark blue. But after upgrading a machine to Ubuntu 20.04, Vim started rendering comments in cyan—and since the \"Identifier\" syntax category also rendered in cyan, he was unhappy enough about it to decide to change the defaults.</p><p>At first blush, Vim seems to adhere to roughly the same configuration standard that many if not most Unix-like systems and applications do—there's a set of systemwide configurations in <code>/etc</code>, which can be overridden individually per user by changes made in an optional configuration file in that user's home directory. In Vim's case, that's <code>~/.vimrc</code>—just like Bash configurations can be overridden in <code>~/.bashrc</code>.</p><p>But when Lee tried to make his One Simple Change to Vim's syntax highlighting—turn comments from the new cyan back into the dark blue, which he preferred—things got interesting.</p><h2>The Hutchinson way to configure comment highlighting</h2><p>After a little googling, the command Lee found to change comment color seemed to be pretty simple: <code>highlight comment ctermcfg=19</code>, where 19 is the color code Vim uses for dark blue. The problem is, making the change in <code>~/.vimrc</code> didn't actually work.</p><p>To be more specific, it <em>did</em> work—briefly—but almost immediately after opening the file, the comments changed from dark blue back to cyan again. On a local, fast machine, the change happened too quickly to notice; but Lee was ssh'ing into a remote machine, and that gave just enough delay to see his color preference applied initially but quickly reverted.</p><p>After significant googling, Lee discovered an ugly workaround. There's a very old joke that Vim isn't actually a text editor at all—it's an operating system in its own right, which simply masquerades as a text editor. Like most good jokes, this one's a bit over the top but has a kernel of truth to it—Vim config files don't simply assign values to configuration variables; they can actually run code in their own right.<br></p><p>In Lee's case, he decided that, since there was a roughly 100ms delay between his dark blue comments being applied and Vim changing them back, he could just outwait the program by waiting 100ms to apply the change in the first place:</p><p>Sure enough, the ugly hack worked: now, instead of seeing dark blue comments initially that then flashed back to the hated cyan, Hutchinson saw cyan comments that then flashed to his preferred dark blue.</p><p>This worked well enough for his purposes... but what's the point of being a senior technology editor if you can't run a problem past a technology reporter who reports to you?</p><h2>The wrong way... actually, several wrong ways</h2><p>When Lee brought his kinda-solved problem to me, it certainly sounded like a bug—I might not be a Vim user myself, but with more than 20 years of Unix-like OS experience under my own belt, I also expected a user-profile configuration file to cleanly overwrite a system-wide configuration. The <del>unhinged ranting</del> coherent, focused problem report Lee offered me included a warning: there were, in his words, \"about 20 different places where Vim configuration changes get applied,\" so tracking down the problem was unusually sticky.</p><p>I'm not a Vim user myself—I'm one of those heathens who never saw any particular reason to learn more about Vim than the <code>:q!</code> needed to get the hell out of it—but my immediate suspicion was that a bug was causing Vim configuration files to be applied out of order. So I googled how to check what configurations had been applied to a running Vim instance: turns out there's a special command <code>:scriptnames</code> that will provide you with exactly that.</p><p>Lee hadn't been kidding about the vast array of configuration files to look through: my system loaded 22 separate configuration files, 15 of which took effect after the <code>.vimrc</code> in my home directory! Thus began the start of a long, winding, and ultimately fruitless primrose path: I wanted to find instances of the comment color being changed somewhere <em>after</em> my <code>~/.vimrc</code>, and it turned out that just wasn't happening.</p><p>The only place I could find where comment color was set to <code>Cyan</code> was in <code>/usr/share/vim/vim81/syncolor.vim</code>, a couple of spaces <em>ahead</em> of my personal <code>.vimrc</code>. In theory, the change in <code>~/.vimrc</code> should have overridden the one in <code>syncolor.vim</code>—but in practice, without Lee's ugly timer hack, the only way I could find to change the comment color was within <code>syncolor.vim</code> itself.</p><p>Changing <code>ctermfg=Cyan</code> inside <code>syncolor.vim</code> to <code>ctermfg=19</code>—or, better yet, <code>ctermfg=DarkBlue</code>, which produced an easier-to-read shade of blue—worked as expected, and it produced the output Lee wanted without the god-awful timer hack. But it applied the change systemwide, not just to Lee's own user account—and more importantly, it didn't explain how or why the original change in <code>~/.vimrc</code> refused to work as expected.</p><p>I still smelled an out-of-order bug, so I dug further.</p><p>According to the comments at the top of <code>syncolor.vim</code>, the changes within that file were applied in three cases—when <code>synload.vim</code> is parsed during Vim initialization, when the user issues the command <code>:syntax reset</code>, and within the Vim function <code>init_highlight()</code>. I knew neither Lee nor I was calling for <code>:syntax reset</code>, so I proceeded to find the invocation of <code>syncolor.vim</code> from within <code>synload.vim</code>.</p><p>If I put the simple <code>highlight comment ctermfg=19</code> back into my <code>~/.vimrc</code>, and commented out the <code>runtime! syntax/syncolor.vim</code> in <code>synload.vim</code>, I believed everything should work properly: this would still qualify as an ugly hack, of course, but it would narrow down where the problem behavior was coming from and allow me to write a more exact bug report to file with the Vim project.</p><p>Unfortunately, it didn't work that way: even with <code>runtime! syntax/syncolor.vim</code> commented out, the Cyan comments that file specified overrode the simple setting in my <code>~/.vimrc</code>. This meant the configurations there were being called by Vim's <code>init_highlight()</code> function <em>after</em> it parsed <code>~/.vimrc</code>.</p><p>On the one hand, this certainly still smelled like a bug to me: I couldn't override a simple configuration setting from my user-level rc file. On the other hand, did I mention the 20+ years of open source experience? I needed to make certain I wasn't missing something obvious that would cause a bug report to just get rejected with a <code>#WONTFIX</code> because I'd missed some deliberate Vim idiosyncrasy.</p><h2>Finding the right way</h2><p>Since Vim's configuration files had self-documenting comments, the time had come to read them more thoroughly. I'd already learned that the contents of <code>syncolor.vim</code> were applied by <code>init_highlight()</code> and <code>synload.vim</code>—but I needed to dig further.</p><p>I couldn't get any further with the documentation comments at the top of <code>synload.vim</code> or <code>syncolor.vim</code>, but the next clue came from the code in <code>syncolor.vim</code> itself:</p><p>Clearly, there was <em>some</em> proper way to set user-defined colors, since this <code>if</code> block specifically avoided setting them up if a \"user defined syncolor file\" already had. So the next step was to Google \"vim user defined syncolor file.\" The top search result was the source for <code>syncolor.vim</code> itself on Github, but the second result brought me to Vim <a href=\"http://vimdoc.sourceforge.net/htmldoc/syntax.html\">documentation</a> at SourceForge.</p><p>Performing a ctrl-F <code>syncolor</code> in-browser search on this 5,128-line document eventually got me to the information I needed, about 90 percent of the way down the page:</p><p>Finally, I'd found the <em>right</em> answer to the deceptively simple question \"How do I change comment color within Vim?\": after creating <code>~/.vim</code>, <code>~/.vim/after</code>, and <code>~.vim/after/syntax</code>, you can finally create the file <code>~/.vim/after/syntax/syncolor.vim</code>—and changes made to syntax highlight colors <em>there</em> applied the way that Lee and I expected them to.</p><h2>Petting the shaggy dog</h2><p>Hopefully, you've learned something along the way as you read this god-awful <a href=\"https://en.wikipedia.org/wiki/Shaggy_dog_story\">shaggy dog story</a> of configuring a Linux application. Maybe you, too, just wanted to change some colors in a text editor—in which case I've led you down an absurdly long path just to get to a relatively short answer.</p><p>But more importantly, I hope the exercise in full can serve as a broader exercise in troubleshooting. Happy Linux-ing!</p></div></div></div>","author":"Jim Salter","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"19607041ac6a2d86eee6a5c27363bcdbb8040016967b43be7fe1e431113db558","category":"Tech"}
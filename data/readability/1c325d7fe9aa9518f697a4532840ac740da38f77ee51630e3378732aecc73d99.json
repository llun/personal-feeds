{"title":"ปัญหาที่เกิดจากการนำแนวคิด Microservices มาใช้ในทางที่ผิด","link":"https://www.somkiat.cc/mistakes-from-microservices/","date":1623569810000,"content":"<div id=\"readability-page-1\" class=\"page\"><div id=\"page\"><article><div id=\"content_box\"><header><div><p><time>June 13, 2021</time> <span><a href=\"https://www.somkiat.cc/category/architecture-2/\" rel=\"category tag\">Architecture</a></span></p></div></header><div><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/06/eery-1648250_960_720.jpeg\" alt=\"\" width=\"541\" height=\"360\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/06/eery-1648250_960_720.jpeg 960w, https://www.somkiat.cc/wp-content/uploads/2021/06/eery-1648250_960_720-300x200.jpeg 300w, https://www.somkiat.cc/wp-content/uploads/2021/06/eery-1648250_960_720-768x512.jpeg 768w\" sizes=\"(max-width: 541px) 100vw, 541px\"></figure><p>จากการสอนและแบ่งปันเรื่องการออกแบบระบบ<br>ตามแนวคิด <strong>Microservices</strong> ที่ <strong>Skooldio</strong> มา<br>มีหนึ่งสิ่งที่อยากแนะนำคือ<br>เมื่อเราเข้าใจและปัญหาที่ Microservices เข้ามาช่วยแก้ไขปัญหา<br>แต่ถ้าเรานำมาใช้แล้วดันเกิดปัญหามากกว่าเดิม<br>มันบ่งบอกว่า คุณไม่เข้าใจ หรือ เข้าใจผิด หรือ แก้ปัญหาด้วยวิธีการที่ผิดหรือไม่ ?<br>มาดูกันว่ามีอะไรบ้าง</p><p><strong>ปัญหาใหญ่ แยกกันแล้วแต่ยังผูกมัดกันไปมา</strong></p><p>เมื่อมีการแก้ไข ต้องแก้ไขหลาย service<br>เมื่อต้องการ deploy หรือ scale ก็กระทบไปกันหมด<br>ยังไม่พอ เมื่อเกิดปัญหา หาและแก้ไขยากกว่าเดิมอีก</p><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/06/microservice01.png\" alt=\"\" width=\"438\" height=\"379\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/06/microservice01.png 543w, https://www.somkiat.cc/wp-content/uploads/2021/06/microservice01-300x260.png 300w\" sizes=\"(max-width: 438px) 100vw, 438px\"></figure><p><strong>หรืออาจจะมาในรูปแบบ layer หรือ service มาตรฐานของแต่ละงาน</strong></p><p>จะมี service layer ที่เกี่ยวข้องกัน เช่น</p><ul><li>Data service</li><li>Orchestration service</li><li>Backend-for-Frontend</li><li>Messaging</li></ul><figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/06/microservice02.png\" alt=\"\" width=\"240\" height=\"480\" srcset=\"https://www.somkiat.cc/wp-content/uploads/2021/06/microservice02.png 283w, https://www.somkiat.cc/wp-content/uploads/2021/06/microservice02-150x300.png 150w\" sizes=\"(max-width: 240px) 100vw, 240px\"></figure><p><strong>แต่ข้อดีของวิธีการนี้คือ</strong></p><ul><li>ทุกคนในทีมและบริษัทจะพูดในทางเดียวกัน</li><li>ทำให้ไม่ต้องสร้างขึ้นมาใหม่ทุกครั้ง</li><li>ง่ายต่อการจัดการ</li><li>ง่ายต่อการบอกว่า จะต้องสร้าง service อะไรบ้าง และแต่ละ service ทำอะไร</li></ul><p>แน่นอนว่า มีทั้งข้อดีและข้อเสีย</p><p><strong>ปัญหาต่อมาคือ มักจะแยก service level มากกว่า database layer</strong></p><p>ซึ่งทำให้ระบบ scale ได้ยากมาก ๆ<br>เรามักจะทำอะไรที่มันง่ายกว่าเสมอหรือไม่ ?</p><p><strong>เรานำแนวคิด Microservices มาใช้เพราะว่าอะไร</strong></p><div><p>มีปัญหาหรือไม่<br>หรือต้องทำเพราะว่า โดนสั่ง<br>หรือต้องทำเพราะว่า มันคือ trend</p><p>แนะนำคือ ต้องเริ่มที่ปัญหาและยอมรับปัญหาก่อน<br>จากนั้นจึงหาวิธีการแก้ไขปัญหานั้น ๆ<br>ซึ่งอาจจะแก้ไขได้หรือไม่ ด้วยแนวคิด Microservices ก็ได้</p></div><p><strong>เราทำ Microservices แต่เรามีทีมดูแล Core service นะ</strong></p><div><p>Core service คือ service หลักที่ service อื่น ๆ เรียกใช้งาน<br>เรามักจะบอกว่า มันคือ reuse service นั่นเอง<br>แน่นอนว่า จำเป็นต้องมีทีมดูแลมากเป็นพิเศษ<br>เพราะว่ามีคนใช้งานเยอะ</p><p><strong><em>ถ้าคนใช้งานหนึ่ง ขอเปลี่ยนแปลงบางอย่าง จะทำได้ไหมนะ ?<br>ถ้าทำได้หนึ่งคน แสดงว่าจะมี logic ของคนนั้นมาอยู่ใน core service<br>คำถามคือ core service มันคือ core service จริงไหม ?</em></strong></p><p>ความรู้เกี่ยวกับ Core domain จะกระจุกอยู่กับ core team เท่านั้นใช่ไหม<br>ซึ่งมันขัดแย้งกับแนวคิดของ cross-functional team หรือไม่<br>เพราะว่าเป็นการทำงานแบบ component teamปัญหายังคงอยู่ไหมนะ ?</p></div><p><strong>ยังไม่พอ ทีมสร้างพัฒนา กับทีมดูแล เป็นคนละทีมกัน ?</strong></p><p>คาดว่ามีความสนุกแน่นอน<br></p><p><strong>การติดต่อสื่อสารระหว่าง service ก็ไม่ใช่เลือกตามอารมณ์​</strong></p><p>ต้องรู้และเข้าใจก่อนว่าในแต่ละ use case การติดต่อสื่อสาร<br>ควรเป็นอะไรsync หรือ async หรือ event-based เป็นต้น<br></p><p><strong>แบ่งเป็น service เล็ก ๆ ให้ทำงานเป็นอิสระต่อกันแล้ว แต่เมื่อมีปัญหากลับรู้จากผู้ใช้งาน</strong></p><p>แต่ทีมหรือบริษัทกลับไม่รู้ หรือ รู้ช้า<br>นั่นคือปัญหาเรื่องของ observability เช่น logging, tracing และ metric<br>ที่ยังไม่เพียงพอ หรือ พร้อม หรือไม่<br></p><p><strong><em>ง่าย ๆ คือ ถ้าทำลงไปแล้ว กลับแย่มากกว่าส่งผลดี<br>แสดงว่า เรากำลังเดินไปในเส้นทางที่ผิด<br>ให้ลองหยุดและกลับมามองว่า<br>ข้อผิดพลาดคืออะไรกันแน่เพื่อปรับปรุง ปรับเปลี่ยนให้มันถูกต้อง</em></strong></p></div><div><p><img alt=\"\" src=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=90&amp;d=mm&amp;r=g\" srcset=\"https://secure.gravatar.com/avatar/e5cb9aad7bf4f0e43462bd51d6ff7021?s=180&amp;d=mm&amp;r=g 2x\" height=\"90\" width=\"90\"></p><h4>Article by <a href=\"https://www.facebook.com/somkiatspns\">Somkiat Puisungnoen</a></h4><p>To be Craftmanship</p></div></div></article></div></div>","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"1c325d7fe9aa9518f697a4532840ac740da38f77ee51630e3378732aecc73d99","category":"Thai"}
{"title":"ว่าด้วยเรื่องของ Delta Lake ?","link":"https://www.somkiat.cc/delta-lake/","date":1625813369000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/Delta-Lake-Multi-Hop-Architecture-Overview-150x150.png\" /></p>\n<p>ตอนเช้าเจอบทความว่าด้วยเรื่องของ <strong><a href=\"https://databricks.com/blog/2020/06/24/introducing-delta-engine.html\" target=\"_blank\">Delta Lake</a></strong><br />สะกดถูกแล้ว เพราะว่า ไม่ใช่ Data Lake นะ<br />อ่านเจอแล้วก็งง ๆ ว่า มันคืออะไร<br />เลยลองหาข้อมูล เพื่อทำให้เข้าใจมากขึ้น<br />สรุปสั้น ๆ ไว้ดังนี้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>Delta Lake คืออะไร ?</strong></p>\n\n\n\n<p>เป็น open-source storage layer ที่จะทำงานอยู่บน existing database/data store<br />ไม่ว่าจะเป็น data lake, RDBMD และ NoSQL ใด ๆ ก็ตาม<br />เพื่อเพิ่มความสามารถอื่น ๆ ที่จำเป็นต่อการใช้งาน<br />ยกตัวอย่างเช่น <br />กลุ่มงานสาย AI และ Machine Learning เป็นต้น<br /><br />รวมทั้งรองรับข้อมูลทั้งแบบ realtime, stream และ batch processing <br />พยายามสนับนุน ACID อีกด้วย<br />แต่ยังคงประสิทธิภาพของการดึงข้อมูล<br /></p>\n\n\n\n<p><strong>โดย Delta Lake จะมี schema 2 รูปแบบคือ</strong></p>\n\n\n\n<ul><li>Schema-on-read</li><li>Schema-on-write</li></ul>\n\n\n\n<p>แสดงดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/Delta-Lake-Multi-Hop-Architecture-Overview-1024x457.png\" /></figure>\n\n\n\n<p><strong>เป้าหมายของ Delta Lake มีอะไรบ้าง</strong></p>\n\n\n\n<p>ทำการตรวจสอบข้อมูลขาเข้าได้ว่า เกิดข้อผิดพลาดหรือไม่ <br />ดังนั้นข้อมูลแต่ละตัวจะมีคุณสมบัติ <strong>Atomicity</strong> <br />โดยใช้หลักการของ transaction log มาช่วย<br />ทำให้ข้อมูลถูกต้องอยู่อย่างเสมอ<br /><br />รวมทั้งเรื่องความถูกต้องของข้อมูลขาเข้า<br />ทั้งจาก batching และ stream ซึ่งเป็นแนวทางของ <strong><a href=\"https://www.somkiat.cc/introduction-to-lambda-architecture/\" target=\"_blank\">Lambda architecture</a></strong> เลย<br />เมื่อมีการเขียนทับข้อมูลเดิม (ลบและเขียน) แล้ว<br />แต่เกิดข้อผิดพลาดขึ้นมาข้อมูลเหล่านั้นจะไม่เห็นในการดึงหรือ query ข้อมูล<br /><br />รองรับการทำงานพร้อม ๆ กันได้ดีกว่าแนวทางของการ lock หรือ optimistic lock<br />อีกอย่างมีการตรวจสอบ schema ของข้อมูลอีกด้วยหรือ schema validation นั่นเอง<br />จะทำงานก่อนจะ commit ข้อมูลนั้น ๆ<br />ทำให้ไม่ทำการเขียนทับข้อมูลที่มี schema ต่างกันกัน<br /><br />แต่ก็สนับสนุนเรื่องของ <strong>schema evolution</strong><br />นั่นคือ การเปลี่ยนแปลง schema-on-write<br />จะทำการ configuration เพื่อให้สามารถทำการ merge schema ได้</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/schema-on-write-1024x576.png\" /></figure>\n\n\n\n<p><strong>ในส่วนการจัดการ version ของ data ได้นำ Time travel เข้ามาช่วย</strong></p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/07/time-travel-1024x335.png\" /></figure>\n\n\n\n<p>เป็นอีกแนวทางที่น่าสนใจ<br />ศึกษากันไว้ดูครับ</p>\n\n\n\n<p><strong>Reference Websites</strong></p>\n\n\n\n<p><a href=\"https://towardsdatascience.com/why-is-delta-lake-becoming-increasingly-popular-1e45c29cc7d2\">https://towardsdatascience.com/why-is-delta-lake-becoming-increasingly-popular-1e45c29cc7d2</a></p>\n\n\n\n<p></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"7b8bdb251f3ddd68b29a4c8a4d69816344c40e3b7cf2b0a7b069b20e644e39e6","category":"Thai"}
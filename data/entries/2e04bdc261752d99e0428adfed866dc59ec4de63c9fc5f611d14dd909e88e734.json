{"title":"New WebKit Features in Safari 14","link":"https://webkit.org/blog/11340/new-webkit-features-in-safari-14/","date":1605546053000,"content":"<p>With the release of Safari 14 for macOS Big Sur, iPadOS 14, iOS 14, and watchOS 7, WebKit brings significant improvements to performance and privacy along with a host of new features for web developers.</p>\n<p>Take a look at all of the improvements WebKit is adding with the release of Safari 14.</p>\n<h2>Safari Web Extensions</h2>\n<p>This release brings support for Safari Web Extensions. They are a type of extension primarily built with JavaScript, HTML, and CSS packaged with native apps. This allows extension developers to maintain a single codebase that can be packaged for other browsers.</p>\n<p>It also means developers with extensions for other browsers can easily bring their projects to Safari with a <a href=\"https://developer.apple.com/documentation/safariservices/safari_web_extensions/converting_a_web_extension_for_safari\">command-line tool</a>. It jump-starts your development by converting your web extension into an Xcode project, ready to build and test. After testing, you can submit it to the App Store.</p>\n<p>You can learn more about Safari&#8217;s web extension support by watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10665/\">Meet Safari Web Extensions</a>” session from WWDC 2020.</p>\n<h2>Webpage Translation</h2>\n<p>WebKit with Safari 14 on macOS Big Sur, iOS 14, and iPad OS 14 allows users to translate webpages between English, Spanish, Simplified Chinese, French, German, Russian, and Brazilian Portuguese. Safari automatically detects the language of webpages and offers translation based on the user’s Preferred Languages list.</p>\n<p>Content authors can instruct Safari on the specific elements that should or should not be translated. Enable translation of element contents with an empty <code>translate</code> attribute or <code>translate=\"yes\"</code>, or disable with <code>translate=\"no\"</code>. It’s best to mark specific elements and avoid using the attribute on a single container for the entire document.</p>\n<h2>Performance Improvements</h2>\n<p>One area of focus in WebKit was on performance. Significant performance gains improve page load performance and page performance for developers. Loading a previously unvisited page is 13% faster, and loading recently visited pages is 42-52% faster. Tab closing performance improved from 3.5 seconds to 50 milliseconds. WebKit also added support for incrementally loading PDF files and now renders the first page up to 60× faster.</p>\n<p>For web developers, WebKit improved asynchronous scrolling for iframes and overflow: scroll containers on macOS. Faster IndexedDB operations, for-of loops, JavaScript Promises, JavaScript cookie access, and JavaScript delete operations improve page performance for web developers and users.</p>\n<p>WebKit and Safari can now use platform support for HTTP/3 for improved network efficiency and faster load times. HTTP/3 makes use of multiplexed connections over UDP to reduce congestion and transport latency. It all adds up to better perceived performance for your web apps.</p>\n<p>For more details, see the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=114\">What’s new for web developers</a>” session from WWDC 2020.</p>\n<h2>Improved Compatibility</h2>\n<p>Another area of focus was improving WebKit’s interoperability. One measure of that is passing Web Platform Tests. It&#8217;s a set of tests used by browser developers to ensure implementations are cross-browser compatible helping developers have more interoperable code. In these releases, WebKit improved the pass rates for over 140,000 tests across Service Workers, SVG, CSS, XHR+Fetch, and more.</p>\n<p>Learn more by watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=51\">What’s new for web developers</a>” session from WWDC 2020.</p>\n<h2>Privacy Updates</h2>\n<p>With each release, WebKit refines its privacy protections for users. This year WebKit enabled full third-party cookie blocking and added support for the Storage Access API in Private Browsing mode in Safari. In addition, Safari added a Privacy Report that shows users the trackers that Intelligent Tracking Prevention prevented from accessing identifying information.</p>\n<p>Learn more about WebKit’s privacy enhancements in the “<a href=\"https://webkit.org/blog/11338/cname-cloaking-and-bounce-tracking-defense/\">CNAME Cloaking and Bounce Tracking Defense</a>” and “<a href=\"https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/\">Full Third-Party Cookie Blocking and More</a>” blog posts.</p>\n<h2>Touch ID and Face ID for the Web</h2>\n<p>Web developers can now support logging into websites with Face ID and Touch ID. New platform authenticator support in WebKit’s Web Authentication implementation provides a highly secure alternative to usernames and passwords. Support for WebAuthn was introduced in Safari 13 on macOS and iOS 13.3 with support for hardware security keys. New in this release is added support for PIN entry and account selection on external Web Authentication security keys.</p>\n<p>For more, read the “<a href=\"https://webkit.org/blog/11312/meet-face-id-and-touch-id-for-the-web/\">Meet Face ID and Touch ID for the Web</a>” blog post.</p>\n<h2>WebP Support</h2>\n<p>Improvements for media in WebKit include support for a new image format and new video playback capabilities. This release of WebKit in Safari 14 adds support for the WebP open-source image format. It offers content authors smaller file sizes for lossy and lossless formats with advanced features like alpha-channel transparency and animations.</p>\n<p>Learn more about WebP support from the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=1174\">What’s new for web developers</a>” talk from WWDC 2020.</p>\n<h2>Reserving Layout Space for Images</h2>\n<p>Another image-related improvement eliminates layout shifting. It comes from a change to how WebKit derives the aspect ratio of an image. Web authors can simply add width and height attributes to an <code>&lt;img&gt;</code> element with a numeric value to tell WebKit the proportions of an image to reserve when calculating image size from CSS. It’s a simple change that significantly improves the user experience.</p>\n<p>To see this in action watch the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=1252\">What’s new for web developers</a>” session from WWDC 2020.</p>\n<h2>New CSS Features</h2>\n<p>Safari 14 supports the <code>image-orientation</code> property in CSS to override WebKit’s default behavior of rotating based on image EXIF data. The default <code>image-orientation: from-image</code> can be set to <code>image-orientation: none</code> to override the behavior and ignore the EXIF orientation flag.</p>\n<p>New support for the <code>:is()</code> pseudo-selector works as a synonym for the previously supported <code>:matches()</code>. It can be used to match a list of selectors with the specificity of the most specific selector.</p>\n<p>It can be used to avoid repetitive selectors. Compare the following:</p>\n<pre><code class=\"css\"><span class=\"comment\">/* Removing margins from any subsequent headings */</span>\n<span class=\"keyword\">h1</span>, <span class=\"keyword\">h2</span>, <span class=\"keyword\">h3</span>, <span class=\"keyword\">h4</span>, <span class=\"keyword\">h5</span>, <span class=\"keyword\">h6</span> {\n    <span class=\"attribute\">margin-top</span>: <span class=\"number\">3em</span>;\n}\n\n<span class=\"keyword\">h1</span> + <span class=\"keyword\">h2</span>, <span class=\"keyword\">h1</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h1</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h1</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h1</span> + <span class=\"keyword\">h6</span>,\n<span class=\"keyword\">h2</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h2</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h2</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h2</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h2</span> + <span class=\"keyword\">h6</span>,\n<span class=\"keyword\">h3</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h3</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h3</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h3</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h3</span> + <span class=\"keyword\">h6</span>,\n<span class=\"keyword\">h4</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h4</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h4</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h4</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h4</span> + <span class=\"keyword\">h6</span>,\n<span class=\"keyword\">h5</span> + <span class=\"keyword\">h6</span>, <span class=\"keyword\">h5</span> + <span class=\"keyword\">h3</span>, <span class=\"keyword\">h5</span> + <span class=\"keyword\">h4</span>, <span class=\"keyword\">h5</span> + <span class=\"keyword\">h5</span>, <span class=\"keyword\">h5</span> + <span class=\"keyword\">h6</span> {\n    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;\n}\n</code></pre>\n<p>The override could be written with the <code>:is()</code> pseudo-selector like this instead:</p>\n<pre><code class=\"css\"><span class=\"preprocessor\">:is</span>(<span class=\"keyword\">h1</span>, <span class=\"keyword\">h2</span>, <span class=\"keyword\">h3</span>, <span class=\"keyword\">h4</span>, <span class=\"keyword\">h5</span>, <span class=\"keyword\">h6</span>) + <span class=\"preprocessor\">:is</span>(<span class=\"keyword\">h1</span>, <span class=\"keyword\">h2</span>, <span class=\"keyword\">h3</span>, <span class=\"keyword\">h4</span>, <span class=\"keyword\">h5</span>, <span class=\"keyword\">h6</span>) {\n    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;\n}\n</code></pre>\n<p>The <code>:where()</code> pseudo-selector is also supported and works like <code>:is()</code> except it resets the specificity back to 0 making it easy to override complex matches.</p>\n<p>Other notable CSS additions include support for <code>line-break: anywhere</code> to break long content before it overflows the container, and <code>image-set()</code> support for all other image functions including <code>image()</code>, <code>-webkit-canvas()</code>, <code>-webkit-cross-fade()</code>, and <code>-webkit-*-gradient()</code>.</p>\n<p>Learn more about these CSS features by watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=865\">What’s new for web developers</a>” from WWDC 2020.</p>\n<h2>Media Enhancements</h2>\n<p>For video, Safari on iOS 14 adds support for the Picture-in-Picture API for iPhone. On macOS, new support for high-dynamic range (HDR) video playback is added. Content authors can use media-queries or the <code>matchMedia</code> method in JavaScript to detect high-dynamic range display capability and deliver a progressively enhanced experience for users with HDR displays.</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"keyword\">style</span>&gt;</span>\n    @media only screen (dynamic-range: high) {\n        /* HDR-only CSS rules */\n    }\n<span class=\"tag\">&lt;/<span class=\"keyword\">style</span>&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"keyword\">script</span>&gt;</span>\n    if (window.matchMedia(\"dynamic-range: high\")) {\n        // HDR-specific JavaScript\n    }\n<span class=\"tag\">&lt;/<span class=\"keyword\">script</span>&gt;</span>\n</code></pre>\n<p>You can learn more about these media enhancements by watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=1159\">What’s new for web developers</a>” from WWDC 2020.</p>\n<h2>JavaScript Improvements</h2>\n<p>Beyond performance improvements, WebKit added several new capabilities to its JavaScript engine. This release includes support for <code>BigInt</code>, a new datatype for integers that are larger than the <code>MAX_SAFE_INTEGER</code>.</p>\n<pre><code>let bigInt = BigInt(Number.MAX_SAFE_INTEGER) + 2n;\n</code></pre>\n<p>Three new types of logical assignment operators are available: AND, OR, and nullish. Using these operators only evaluates the left-hand side of an expression once and can be used non-destructively when assigning values.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">let</span> <span class=\"identifier\">foo</span> <span class=\"operator\">=</span> <span class=\"keyword literal\">null</span>;\n\n<span class=\"identifier\">foo</span> <span class=\"operator\">?</span><span class=\"operator\">?</span><span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">// nullish assignment operator\n</span><span class=\"operator\">&gt;</span> <span class=\"number\">1</span>\n\n<span class=\"identifier\">foo</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span><span class=\"operator\">=</span> <span class=\"number\">2</span>; <span class=\"comment\">// AND assignment operator\n</span><span class=\"operator\">&gt;</span> <span class=\"number\">2</span>\n\n<span class=\"identifier\">foo</span> <span class=\"operator\">|</span><span class=\"operator\">|</span><span class=\"operator\">=</span> <span class=\"number\">3</span>; <span class=\"comment\">// OR assignment operator\n</span><span class=\"operator\">&gt;</span> <span class=\"number\">2</span>\n\n<span class=\"identifier\">foo</span> <span class=\"operator\">?</span><span class=\"operator\">?</span><span class=\"operator\">=</span> <span class=\"number\">4</span>; <span class=\"comment\">// nullish assignment operator\n</span><span class=\"operator\">&gt;</span> <span class=\"number\">2</span>\n</code></pre>\n<p>WebKit also introduces support for the optional chaining operator that gives you a shortcut for safely accessing object properties.</p>\n<pre><code class=\"js\"><span class=\"keyword type\">function</span> <span class=\"identifier\">optionalChaining</span>(<span class=\"identifier\">object</span>) {\n    <span class=\"keyword control\">return</span> <span class=\"identifier\">object</span><span class=\"operator\">?</span>.<span class=\"identifier\">foo</span>;\n}\n\n<span class=\"keyword type\">function</span> <span class=\"identifier\">optionalChainingTranspiled</span>(<span class=\"identifier\">object</span>) {\n    <span class=\"keyword control\">if</span> (<span class=\"identifier\">object</span> <span class=\"operator\">!</span><span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"keyword literal\">null</span> <span class=\"operator\">&amp;</span><span class=\"operator\">&amp;</span> <span class=\"identifier\">object</span> <span class=\"operator\">!</span><span class=\"operator\">=</span><span class=\"operator\">=</span> <span class=\"keyword literal\">undefined</span>)\n        <span class=\"keyword control\">return</span> <span class=\"identifier\">object</span>.<span class=\"identifier\">foo</span>;\n    <span class=\"keyword control\">return</span> <span class=\"keyword literal\">undefined</span>;\n}\n</code></pre>\n<p>There’s also added support of the <code>EventTarget</code> constructor which means developers can create custom instances of <code>EventTarget</code> of their own design without the overhead of repurposing a DOM element, giving non-DOM objects an interface for dispatching custom events.</p>\n<p>You can learn more about JavaScript improvements by watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10663/?time=1613\">What’s new for web developers</a>” from WWDC 2020.</p>\n<h2>Web Inspector Updates</h2>\n<p>Web Inspector in Safari 14 on macOS added the Source Tab combing the Resources Tab and Debugger Tab together. It lists all resources loaded by the inspected page since Web Inspector opened, along with XHR+Fetch resources and long-lived WebSockets. Web Inspector’s JavaScript debugging tools are here too, with all of the stepping and the breakpoint controls, organized in a more compact and unified way alongside the resources of the inspected page. The Sources Tab also offers new capabilities such as organizing by file path instead of file type, Local Overrides for completely replacing the content and headers of responses loaded over the network, and the Inspector Bootstrap Script to evaluate JavaScript before anything else in the page.</p>\n<p>In the Timelines Tab is the new Media &amp; Animations timeline to capture events related to media elements, CSS animations and CSS transitions. It makes it easy to correlate activity captured in other timelines to state changes in media elements, such as pausing or resuming playback, or CSS animations or transitions, such as when they’re created and each time they iterate.</p>\n<p>Among the enhancements Web Inspector offers improved VoiceOver support and a new HSL color picker with Display-P3 color support.</p>\n<p>You can learn more watching the “<a href=\"https://developer.apple.com/videos/play/wwdc2020/10646/\">What&#8217;s new in Web Inspector</a>” video session from WWDC 2020 or referring to the <a href=\"https://webkit.org/web-inspector/\">Web Inspector Reference</a> documentation.</p>\n<h2>Feedback</h2>\n<p>These improvements are available to users running watchOS 7, iOS 14 and iPadOS 14, macOS Big Sur, macOS Catalina and macOS Mojave. These features were also available to web developers with Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: <a href=\"https://webkit.org/blog/9992/release-notes-for-safari-technology-preview-99/\">99</a>, <a href=\"https://webkit.org/blog/10024/release-notes-for-safari-technology-preview-100/\">100</a>, <a href=\"https://webkit.org/blog/10031/release-notes-for-safari-technology-preview-101/\">101</a>, <a href=\"https://webkit.org/blog/10067/release-notes-for-safari-technology-preview-102/\">102</a>, <a href=\"https://webkit.org/blog/10243/release-notes-for-safari-technology-preview-103/\">103</a>, <a href=\"https://webkit.org/blog/10264/release-notes-for-safari-technology-preview-104/\">104</a>, <a href=\"https://webkit.org/blog/10428/release-notes-for-safari-technology-preview-105/\">105</a>, <a href=\"https://webkit.org/blog/10580/release-notes-for-safari-technology-preview-106/\">106</a>, <a href=\"https://webkit.org/blog/10585/release-notes-for-safari-technology-preview-107/\">107</a>, <a href=\"https://webkit.org/blog/10840/release-notes-for-safari-technology-preview-108/\">108</a>, <a href=\"https://webkit.org/blog/10875/release-notes-for-safari-technology-preview-109-with-safari-14-features/\">109</a>. <a href=\"https://developer.apple.com/safari/download/\">Download the latest Safari Technology Preview release</a> to stay on the forefront of future web platform and Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for changes to your favorite web platform features.</p>\n<p>Send a tweet to <a href=\"https://twitter.com/webkit\">@webkit</a> or <a href=\"https://twitter.com/jonathandavis\">@jonathandavis</a> to share your thoughts on this release. If you run into any issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari, or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"2e04bdc261752d99e0428adfed866dc59ec4de63c9fc5f611d14dd909e88e734","category":"Tech"}
{"title":"Responsible JavaScript: Part III","link":"https://alistapart.com/article/responsible-javascript-part-3/","date":1573741842000,"content":"<!-- wp:paragraph -->\n<p>You’ve done everything you thought was possible to address your website’s JavaScript problem. You <a href=\"https://alistapart.com/article/responsible-javascript-part-1/\">relied on the web platform where you could</a>. You <a href=\"https://alistapart.com/article/responsible-javascript-part-2/#section9\">sidestepped Babel</a> and <a href=\"https://alistapart.com/article/responsible-javascript-part-2/#section7\">found smaller framework alternatives</a>. You whittled your application code down to its most streamlined form possible. Yet, things are just not fast enough. When websites fail to perform the way we as designers and developers expect them to, we inevitably turn on ourselves:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph {\"align\":\"center\"} -->\n<p style=\"text-align:center\"><em>“What are we failing to do?” “What can we do with the code we have written?” “Which parts of our architecture are failing us?”</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These are valid inquiries, as a fair share of performance woes <em>do</em> originate from our own code. Yet, assigning blame solely to ourselves blinds us to the unvarnished truth that a sizable onslaught of our performance problems comes from the outside.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>When the third wheel crashes the party</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Convenience always has a price, and <a href=\"https://httparchive.org/reports/state-of-javascript#bytesJs\">the web is wracked by our collective preference for it</a>.&nbsp; JavaScript, in particular, is employed in a way that suggests a rapidly increasing tendency to outsource whatever it is that We (the first party) don’t want to do. At times, this is a necessary decision; it makes perfect financial and operational sense in many situations.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But make no mistake, <a href=\"https://www.thirdpartyweb.today/\">third-party JavaScript is <em>never</em> cheap</a>. It’s a devil’s bargain where vendors seduce you with solutions to your problem, yet conveniently fail to remind you that you have little to no control over the side effects that solution introduces. If a third-party provider adds features to their product, <em>you</em> bear the brunt. If they change their infrastructure, <em>you</em> will feel the effects of it. Those who use your site <em>will</em> become frustrated, and they aren’t going to bother grappling with an intolerable user experience. You can mitigate some of the symptoms of third parties, but you can’t cure the ailment unless you remove the solutions altogether—and that’s not always practical or possible.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this installment of <em>Responsible JavaScript</em>, we’ll take a <em>slightly</em> less technical approach than in the <a href=\"https://alistapart.com/article/responsible-javascript-part-2/\">previous installment</a>. We are going to talk more about the human side of third parties. Then, we’ll go down some of the technical avenues for how you might go about tackling the problem.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Hindered by convenience</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When we talk about the sorry state of the web today, <a href=\"https://infrequently.org/2018/09/the-developer-experience-bait-and-switch/\">some of us are quick to point out the role of <em>developer convenience</em></a> in contributing to the problem. While I share the view that developer convenience has a tendency to harm the user experience, they’re not the only kind of convenience that can turn a website into a sluggish, janky mess.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Operational conveniences</em> can become precursors to a very thorny sort of technical debt. These conveniences are what we reach for when we can’t solve a pervasive problem on our own. They represent third-party solutions that address problems in the absence of architectural flexibility and/or adequate development resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whenever an inconvenience arises, <em>that</em> is the time to have the discussion around how to tackle it in a way that’s comprehensive. So let’s talk about what it looks like to tackle that sort of scenario from a more human angle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>The problem is pain</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The reason third parties come into play in the first place is pain. When a decision maker in an organization has felt enough pain around a certain problem, they’re going to do a <em>very human thing</em>, which is to find the fastest way to make that pain <em>go away</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Markets will always find ways to address these pain points, even if the way they do so isn’t sustainable or even remotely helpful. Web accessibility overlays—third-party scripts that purport to automatically fix accessibility issues—are among the worst offenders. First, you fork over your money for <a href=\"https://blog.tenon.io/web-accessibility-overlays-dont-work/\">a fix that doesn’t <em>fix</em> anything</a>. Then you pay a wholly different sort of price when that “fix” harms the usability of your website. This is not a screed to discredit the usefulness of the tools some third-party vendors provide, but to illustrate how the adoption of third-party solutions happens, even those that are objectively awful</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7172133} -->\n<figure class=\"wp-block-image\"><img src=\"https://alistapart.com/wp-content/uploads/2019/11/fig-1.png?fit=960%2C561\" alt=\"A depiction of a long task in a flame chart from the performance panel in Chrome DevTools.\" class=\"wp-image-7172133\" /><figcaption>A Chrome performance trace of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API#Long_task\">long task</a> kicked off by a third party’s web accessibility overlay script. The task occupies the main thread for roughly 600 ms on a 2017 <a href=\"https://en.wikipedia.org/wiki/MacBook_(2015%E2%80%932019)\">Retina MacBook</a>.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>So when a vendor rolls up and promises to solve the very painful problem we’re having, there’s a good chance someone is going to nibble. If that someone is high enough in the hierarchy, they’ll exert downward pressure on others to buy in—if not circumvent them entirely in the decision-making process. Conversely, adoption of a third-party solution can also occur when those in the trenches are under pressure and lack sufficient resources to create the necessary features themselves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Whatever the catalyst, it pays to gather your colleagues and collectively form a plan for navigating and mitigating the problems you’re facing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Create a mitigation plan</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once people in an organization have latched onto a third-party solution, however ill-advised, the difficulty you’ll encounter in forcing a course change will depend on how urgent a need that solution serves. In fact, you shouldn’t try to convince proponents of the solution that their decision was wrong. Such efforts almost always backfire and can make people feel attacked and more resistant to what you’re telling them. Even worse, those efforts could create acrimony where people stop listening to each other completely, and <em>that</em> is a breeding ground for far worse problems to develop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Grouse and commiserate amongst your peers if you must—as I myself have often done—but put your grievances aside and <a href=\"https://csswizardry.com/2018/05/identifying-auditing-discussing-third-parties/#discussing\">come up with a mitigation plan</a> to guide your colleagues toward better outcomes. The nooks and crannies of your specific approach will depend on the third parties themselves and the structure of the organization, but the bones of it could look like the following series of questions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>What problem does this solution address?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There’s a reason why a third-party solution was selected, and this question will help you suss out whether the rationale for its adoption is sound. Remember, there are times decisions are made when all the necessary people are not in the room. You might be in a position where you have to react to the aftermath of that decision, but the answer to this question will lead you to a natural follow-up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>How long do we intend to use the solution?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This question will help you identify the solution’s shelf life. Was it introduced as a bandage, with the intent to remove it once the underlying problem has been addressed, such as in the case of an accessibility overlay? Or is the need more long-term, such as the data provided by an A/B testing suite? The other possibility is that the solution can never be effectively removed because it serves a crucial purpose, as in the case of analytics scripts. <a href=\"https://alistapart.com/article/the-foundation-of-technical-leadership/#section3\">It’s like throwing a mattress in a swimming pool</a>: it’s easy to throw in, but nigh impossible to drag back out.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In any case, you can’t know if a third-party script is here to stay if you don’t ask. Indeed, if you find out the solution is temporary, you can form a plan to eventually remove it from your site once the underlying problem it addresses has been resolved.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Who’s the point of contact if issues arise?</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When a third-party solution is put into place, someone <em>must</em> be the point of contact for when—not <em>if</em>—issues arise.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve seen what happens (far too often) when a third-party script gets out of control. For example, when a tag manager or an A/B testing framework’s JavaScript grows slowly and insidiously because marketers aren’t cleaning out old tags or completed A/B tests. It’s for precisely these reasons that responsibility needs to be attached to a specific person in your organization for third-party solutions currently in use on your site. What that responsibility entails will differ in every situation, but could include:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>periodic monitoring of the third-party script’s footprint;</li><li>maintenance to ensure the third-party script doesn’t grow out of control;</li><li>occasional meetings to discuss the future of that vendor’s relationship with your organization;</li><li>identification of overlaps of functionality between multiple third parties, and if potential redundancies can be removed;</li><li>and ongoing research, especially to identify speedier alternatives that may act as better replacements for slow third-party scripts.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The idea of responsibility in this context should never be an onerous, draconian obligation you yoke your teammates with, but rather an exercise in encouraging mindfulness in your colleagues. Because without mindfulness, a third-party script’s ill effects on your website <em>will</em> be overlooked until it becomes a grumbling ogre in the room that can no longer be ignored. Assigning responsibility for third parties can help to prevent that from happening.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Ensuring responsible usage of third-party solutions</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you can put together a mitigation plan and get everyone on board, the work of ensuring the responsible use of third-party solutions can begin. Luckily for you, the actual technical work will be easier than trying to wrangle people. So if you’ve made it this far, all it will take to get results is time and persistence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Load only what’s necessary</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>It may seem obvious, but load only what’s necessary. Judging by the amount of unused first-party JavaScript I see loaded—let alone <em>third-party</em> JavaScript—it’s clearly a problem. It’s like trying to clean your house by stuffing clutter into the closets. Regardless of whether they’re actually needed, it’s not uncommon for third-party scripts to be loaded on every single page, so refer to your point of contact to figure out which pages need which third-party scripts.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As an example, one of my past clients used a popular third-party tool across multiple brand sites to get a list of retailers for a given product. It demonstrated clear value, but that script only needed to be on a site’s product detail page. In reality, it was frequently loaded on <em>every</em> page. Culling this script from pages where it didn’t belong significantly boosted performance for non-product pages, which ostensibly reduced the friction on the conversion path.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Figuring out which pages need which third-party scripts requires you to do some decidedly untechnical work. You’ll actually have to get up from your desk and talk to the person who has been assigned responsibility for the third-party solution you’re grappling with. This is very difficult work for me, but it’s rewarding when good-faith collaboration happens, <em>and</em> good outcomes are realized as a result.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Self-host your third-party scripts</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This advice isn’t a secret by any stretch. <a href=\"https://alistapart.com/article/responsible-javascript-part-2/#section6\">I even touched on it</a> in the previous installment of this series, but it needs to be shouted from the rooftops at every opportunity: you should <a href=\"https://csswizardry.com/2019/05/self-host-your-static-assets/\">self-host as many third-party resources</a> as possible. Whether this is feasible depends on the third-party script in question.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Is it some framework you’re grabbing from <a href=\"https://developers.google.com/speed/libraries\">Google’s hosted libraries</a>, <a href=\"https://cdnjs.com/\">cdnjs</a>, or other similar provider? Self-host that sucker <em>right now</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://medium.com/caspertechteam/we-shaved-1-7-seconds-off-casper-com-by-self-hosting-optimizely-2704bcbff8ec\">Casper found a way to self-host their Optimizely script</a> and significantly reduced their start render time for their trouble. It really drives home the point that a major detriment of third-party resources is the fact that their mere existence on other servers is one of the worst performance bottlenecks we encounter.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you’re looking to self-host an analytics solution or a similar sort of script, there’s a higher level of difficulty to contend with to self-host it. You may find that some third-party scripts simply can’t be self-hosted, but that doesn’t mean it isn’t worth the trouble to find out. If you find that self-hosting isn’t an option for a third-party script, don’t fret. There are other mitigations you can try.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Mask latency of cross-origin connections</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you can’t self-host your third-party scripts, the next best thing is to preconnect to servers that host them. WebPageTest’s Connection View does a fantastic job of showing you which servers your site gathers resources from, as well as the latency involved in establishing connections to them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7172134} -->\n<figure class=\"wp-block-image\"><img src=\"https://alistapart.com/wp-content/uploads/2019/11/fig2.png\" alt=\"A screenshot of WebPageTest's connection view, which visualizes the latency involved with all the servers that serve content for a given page in a waterfall chart.\" class=\"wp-image-7172134\" /><figcaption>WebPageTest’s Connection View shows all the different servers a page requests resources from during load.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://web.dev/uses-rel-preconnect\">Preconnections</a> are effective because they establish connections to third-party servers before the browser would otherwise discover them in due course. Parsing HTML takes time, and parsers are often blocked by stylesheets and other scripts. Wherever you can’t self-host third-party scripts, preconnections make perfect sense.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Maybe don’t preload third-party scripts</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\">Preloading resources</a> is one of those things that sounds fantastic at first—until you consider <a href=\"https://andydavies.me/blog/2019/02/12/preloading-fonts-and-the-puzzle-of-priorities/\">its potential to backfire</a>, as <a href=\"https://andydavies.me/\">Andy Davies</a> points out. If you’re unfamiliar with preloading, it’s similar to preconnecting but goes a step further by instructing the browser to fetch a particular resource far sooner than it ordinarily would.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The drawback of preloading is that while it’s great for ensuring a resource gets loaded as soon as possible, it changes the discovery order of that resource. Whenever we do this, we’re implicitly saying that other resources are less important—including resources crucial to rendering or even core functionality.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s probably a safe bet that most of your third-party code is not as crucial to the functionality of your site as your own code. That said, if you <em>must</em> preload a third-party resource, ensure you’re only doing so for third-party scripts that are critical to page rendering.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you do find yourself in a position where your site’s initial rendering depends on a third-party script, refer to your mitigation plan to see what you can do to eliminate or ameliorate your dependence on it. Depending on a third party for core functionality is never a good position to be in, as you’re relinquishing a lot of control to others who might not have your best interests in mind.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Lazy load non-essential third-party scripts</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://alistapart.com/article/the-best-request-is-no-request-revisited/\">The best request is no request</a>. If you have a third-party script that doesn’t need to be loaded right away, consider lazy loading it with an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer</a>. Here’s what it might look like to <a href=\"https://codepen.io/malchata/pen/JjjGOGZ\">lazy load a Facebook Like button</a> when it’s scrolled into the viewport:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<pre id=\"snippet1\" class=\"wp-block-code language-javascript\"><code class=\"language-javascript\">\nlet loadedFbScript = false;\n\nconst intersectionListener = new IntersectionObserver(entries =&gt; {\n  entries.forEach(entry =&gt; {\n    if ((entry.isIntersecting || entry.intersectionRatio) &amp;&amp; !loadedFbScript) {\n      const scriptEl = document.createElement(\"script\");\n\n      scriptEl.defer = true;\n      scriptEl.crossOrigin = \"anonymous\";\n      scriptEl.src = \"https://connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v3.0\";\n      scriptEl.onload = () =&gt; {\n        loadedFbScript = true;\n      };\n      \n      document.body.append(scriptEl);\n    }\n  });\n});\n\nintersectionListener.observe(document.querySelector(\".fb-like\"));\n</code>\n</pre>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>In the above snippet, we first set a variable to track whether we’ve loaded the Facebook SDK JavaScript. After that, an <code>IntersectionListener</code> is created that checks whether the observed element is in the viewport, and whether the Facebook SDK has been loaded. If the SDK JavaScript hasn’t been loaded, a reference to it is injected into the DOM, which will kick off a request for it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You’re not going to be able to lazy load every third-party script. Some of them simply need to do their work at page load time, or otherwise can’t be deferred. Regardless, do the detective work to see if it’s possible to lazy load at least some of your third-party JavaScript.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One of the common concerns I hear from coworkers when I suggest lazy loading third-party scripts is how it can delay whatever interactions the third party provides. That’s a reasonable concern, because when you lazy load anything, a noticeable delay may occur as the resource loads. You can get around this to some extent with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\">resource prefetching</a>. This is different than preloading, which we discussed earlier. Prefetching consumes a comparable amount of data, yes, but prefetched resources are given lower priority and are less likely to contend for bandwidth with critical resources.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Staying on top of the problem</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Keeping an eye on your third-party JavaScript requires mindfulness bordering on hypervigilance. When you recognize poor performance for the technical debt that it truly is, you’ll naturally slip into a frame of mind where you’ll recognize and address it as you would any other kind of technical debt.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Staying on top of third parties <em>is</em> refactoring—a sort that requires you to periodically perform tasks such as cleaning up tag managers and A/B tests, consolidating third-party solutions, eliminating any that are no longer needed, and applying the coding techniques discussed above. Moreover, you’ll need to work with your team to address this technical debt on a cyclical basis. This kind of work can’t be automated, so yes, you’ll need to knuckle down and have face-to-face, synchronous conversations with actual people.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you’re already in the habit of scheduling “cleanup sprints” on some interval, then <em>that</em> is the time and space for you to address performance-related technical debt, regardless of whether it involves third- or first-party code. There’s a time for feature development, but that time should not comprise the whole of your working hours. Development shops that focus only on feature development are destined to be wholly consumed by the technical debt that will inevitably result.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So it will come to pass that in the fourth and final installment of this series we’ll discuss what it means to do the hard work of using JavaScript responsibly in the context of process. Therein, we’ll explore what it takes to unite your organization under the banner of making your website faster and more accessible, and therefore more usable for everyone, everywhere.</p>\n<!-- /wp:paragraph -->","author":"","siteTitle":"A List Apart: The Full Feed","siteHash":"09b09f389b84b264a6ebab120b6208479961d3fe7df4850a75b103b2b9c8a950","entryHash":"81814ffc202b2bd195f41dc0c259552e720bf899da0ee5c30f900750c3202d5b","category":"Tech"}
{"title":"Amazon Location – Add Maps and Location Awareness to Your Applications","link":"https://aws.amazon.com/blogs/aws/amazon-location-add-maps-and-location-awareness-to-your-applications/","date":1608135061000,"content":"<p><img style=\"border: 1px solid black;float: right;margin-left: 8px;margin-bottom: 8px\" src=\"https://media.amazonwebservices.com/blog/2020/way_seattle_2.png\" width=\"350\" height=\"208\" />We want to make it easier and more cost-effective for you to add maps, location awareness, and other location-based features to your web and mobile applications. Until now, doing this has been somewhat complex and expensive, and also tied you to the business and programming models of a single provider.</p> \n<p><span style=\"text-decoration: underline\"><strong>Introducing <span title=\"\">Amazon Location Service</span></strong></span><br /> Today we are making <a href=\"http://aws.amazon.com/location\" title=\"\">Amazon Location</a> available in preview form and you can start using it today. Priced at a fraction of common alternatives, <span title=\"\">Amazon Location Service</span> gives you access to maps and location-based services from multiple providers on an economical, pay-as-you-go basis.</p> \n<p>You can use <span title=\"\">Amazon Location Service</span> to build applications that know where they are and respond accordingly. You can display maps, validate addresses, perform geocoding (turn an address into a location), track the movement of packages and devices, and much more. You can easily set up <a href=\"https://en.wikipedia.org/wiki/Geo-fence\">geofences</a> and receive notifications when tracked items enter or leave a geofenced area. You can even overlay your own data on the map while retaining full control.</p> \n<p>You can access <span title=\"\">Amazon Location Service</span> from the <a href=\"https://console.aws.amazon.com\" title=\"\">AWS Management Console</a>, <a href=\"https://aws.amazon.com/cli/\" title=\"\">AWS Command Line Interface (CLI)</a>, or via a set of APIs. You can also use existing map libraries such as <a href=\"https://docs.mapbox.com/mapbox-gl-js/api/\">Mapbox GL</a> and <a href=\"https://www.mapzen.com/products/tangram/\">Tangram</a>.</p> \n<p><span style=\"text-decoration: underline\"><strong>All About <span title=\"\">Amazon Location</span></strong></span><br /> Let’s take a look at the types of resources that <span title=\"\">Amazon Location Service</span> makes available to you, and then talk about how you can use them in your applications.</p> \n<p><strong>Maps</strong> – <span title=\"\">Amazon Location Service</span> lets you create maps that make use of data from our partners. You can choose between maps and map styles provided by <a href=\"https://www.esri.com/\">Esri</a> and by <a href=\"https://www.here.com/\">HERE Technologies</a>, with the potential for more maps &amp; more styles from these and other partners in the future. After you create a map, you can retrieve a tile (at one of up to 16 zoom levels) using the <code>GetMapTile</code> function. You won’t do this directly, but will use Mapbox GL, Tangram, or another library instead.</p> \n<p><strong>Place Indexes</strong> – You can choose between indexes provided by Esri and HERE. The indexes support the <code>SearchPlaceIndexForPosition</code> function which returns places, such as residential addresses or points of interest (often known as POI) that are closest to the position that you supply, while also performing reverse geocoding to turn the position (a pair of coordinates) into a legible address. Indexes also support the <code>SearchPlaceIndexForText</code> function, which searches for addresses, businesses, and points of interest using free-form text such as an address, a name, a city, or a region.</p> \n<p><strong>Trackers –</strong>Trackers receive location updates from one or more devices via the <code>BatchUpdateDevicePosition</code> function, and can be queried for the current position (<code>GetDevicePosition</code>) or location history (<code>GetDevicePositionHistory</code>) of a device. Trackers can also be linked to Geofence Collections to implement monitoring of devices as they move in and out of geofences.<strong><br /> </strong></p> \n<p><strong>Geofence Collections</strong> – Each collection contains a list of geofences that define geographic boundaries. Here’s a geofence (created with <a href=\"https://geojson.io\">geojson.io</a>) that outlines a park near me:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_slu_park_fence_1.png\" width=\"560\" height=\"465\" /></p> \n<p><span style=\"text-decoration: underline\"><strong><span title=\"\">Amazon Location</span> in Action</strong></span><br /> I can use the <a href=\"https://console.aws.amazon.com\" title=\"\">AWS Management Console</a> to get started with <span title=\"\">Amazon Location</span> and then move on to the <a href=\"https://aws.amazon.com/cli/\" title=\"\">AWS Command Line Interface (CLI)</a> or the APIs if necessary. I open the Amazon Location Service Console, and I can either click <strong>Try it!</strong> to create a set of starter resources, or I can open up the navigation on the left and create them one-by-one. I’ll go for one-by-one, and click <strong>Maps</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_console_splash_4.png\" width=\"899\" height=\"617\" /></p> \n<p>Then I click <strong>Create map</strong> to proceed:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_maps_1.png\" width=\"900\" height=\"707\" /></p> \n<p>I enter a Name and a Description:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_con_addmap_top_2.png\" width=\"1216\" height=\"550\" /></p> \n<p>Then I choose the desired map and click <strong>Create map</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_con_map_choices_2.png\" width=\"812\" height=\"853\" /></p> \n<p>The map is created and ready to be added to my application right away:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_mymap1_2.png\" width=\"894\" height=\"872\" /></p> \n<p>Now I am ready to embed the map in my application, and I have several options including the Amplify JavaScript SDK, the Amplify Android SDK, the Amplify iOS SDK, Tangram, and Mapbox GL (read the Developer Guide to learn more about each option).</p> \n<p>Next, I want to track the position of devices so that I can be notified when they enter or exit a given region. I use a <a href=\"https://geojson.org/\">GeoJSON</a> editing tool such as <a href=\"https://geojson.io/\">geojson.io</a> to create a geofence that is built from polygons, and save (download) the resulting file:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_geojson_2.png\" width=\"711\" height=\"582\" /></p> \n<p>I click <strong>Create geofence collection</strong> in the left-side navigation, and in Step 1, I add my GeoJSON file, enter a Name and Description, and click <strong>Next</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_add_gfs_1.png\" width=\"900\" height=\"877\" /></p> \n<p>Now I enter a Name and a Description for my tracker, and click <strong>Next</strong>. It will be linked to the geofence collection that I just created:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_add_tracker_1.png\" width=\"900\" height=\"626\" /></p> \n<p>The next step is to arrange for the tracker to send events to <a href=\"https://aws.amazon.com/eventbridge\" title=\"\">Amazon EventBridge</a> so that I can monitor them in CloudWatch Logs. I leave the settings as-is, and click <strong>Next</strong> to proceed:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_set_event_target_1.png\" width=\"901\" height=\"561\" /></p> \n<p>I review all of my choices, and click <strong>Finalize</strong> to move ahead:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_review_1.png\" width=\"900\" height=\"864\" /></p> \n<p>The resources are created, set up, and ready to go:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/way_created_success_1.png\" width=\"900\" height=\"837\" /></p> \n<p>I can then write code or use the CLI to update the positions of my devices:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">$ aws location batch-update-device-position \\\n   --tracker-name MyTracker1 \\\n   --updates &quot;DeviceId=Jeff1,Position=-122.33805,47.62748,SampleTime=2020-11-05T02:59:07+0000&quot;\n</code></pre> \n</div> \n<p>After I do this a time or two, I can retrieve the position history for the device:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">$ aws location get-device-position-history \\\n  --tracker-name MyTracker1 --device-id Jeff1 \\\n  --start-time-inclusive &quot;2020-11-05T00:00:00+0000&quot;\n------------------------------------------------\n|           GetDevicePositionHistory           |\n+----------------------------------------------+\n||               DevicePositions              ||\n|+---------------+----------------------------+|\n||  DeviceId     |  Jeff1                     ||\n||  ReceivedTime |  2020-11-05T02:59:17.246Z  ||\n||  SampleTime   |  2020-11-05T02:59:07Z      ||\n|+---------------+----------------------------+|\n|||                 Position                 |||\n||+------------------------------------------+||\n|||  -122.33805                              |||\n|||  47.62748                                |||\n||+------------------------------------------+||\n||               DevicePositions              ||\n|+---------------+----------------------------+|\n||  DeviceId     |  Jeff1                     ||\n||  ReceivedTime |  2020-11-05T03:02:08.002Z  ||\n||  SampleTime   |  2020-11-05T03:01:29Z      ||\n|+---------------+----------------------------+|\n|||                 Position                 |||\n||+------------------------------------------+||\n|||  -122.43805                              |||\n|||  47.52748                                |||\n||+------------------------------------------+||\n</code></pre> \n</div> \n<p>I can write <a href=\"https://aws.amazon.com/eventbridge\" title=\"\">Amazon EventBridge</a> rules that watch for the events, and use them to perform any desired processing. Events are published when a device enters or leaves a geofenced area, and look like this:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-json\">{\n  &quot;version&quot;: &quot;0&quot;,\n  &quot;id&quot;: &quot;7cb6afa8-cbf0-e1d9-e585-fd5169025ee0&quot;,\n  &quot;detail-type&quot;: &quot;Location Geofence Event&quot;,\n  &quot;source&quot;: &quot;aws.geo&quot;,\n  &quot;account&quot;: &quot;123456789012&quot;,\n  &quot;time&quot;: &quot;2020-11-05T02:59:17.246Z&quot;,\n  &quot;region&quot;: &quot;us-east-1&quot;,\n  &quot;resources&quot;: [\n    &quot;arn:aws:geo:us-east-1:123456789012:geofence-collection/MyGeoFences1&quot;,\n    &quot;arn:aws:geo:us-east-1:123456789012:tracker/MyTracker1&quot;\n  ],\n  &quot;detail&quot;: {\n        &quot;EventType&quot;: &quot;ENTER&quot;,\n        &quot;GeofenceId&quot;: &quot;LakeUnionPark&quot;,\n        &quot;DeviceId&quot;: &quot;Jeff1&quot;,\n        &quot;SampleTime&quot;: &quot;2020-11-05T02:59:07Z&quot;,\n        &quot;Position&quot;: [-122.33805, 47.52748]\n  }\n}</code></pre> \n</div> \n<p>Finally, I can create and use place indexes so that I can work with geographical objects. I’ll use the CLI for a change of pace. I create the index:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">$ aws location create-place-index \\\n  --index-name MyIndex1 --data-source Here</code></pre> \n</div> \n<p>Then I query it to find the addresses and points of interest near the location:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">$ aws location search-place-index-for-position --index-name MyIndex1 \\\n  --position &quot;[-122.33805,47.62748]&quot; --output json \\\n  |  jq .Results[].Place.Label\n&quot;Terry Ave N, Seattle, WA 98109, United States&quot;\n&quot;900 Westlake Ave N, Seattle, WA 98109-3523, United States&quot;\n&quot;851 Terry Ave N, Seattle, WA 98109-4348, United States&quot;\n&quot;860 Terry Ave N, Seattle, WA 98109-4330, United States&quot;\n&quot;Seattle Fireboat Duwamish, 860 Terry Ave N, Seattle, WA 98109-4330, United States&quot;\n&quot;824 Terry Ave N, Seattle, WA 98109-4330, United States&quot;\n&quot;9th Ave N, Seattle, WA 98109, United States&quot;\n...</code></pre> \n</div> \n<p>I can also do a text-based search:</p> \n<div class=\"hide-language\"> \n <pre class=\"unlimited-height-code\"><code class=\"lang-bash\">$ aws location search-place-index-for-text --index-name MyIndex1 \\\n  --text Coffee --bias-position &quot;[-122.33805,47.62748]&quot; \\\n  --output json | jq .Results[].Place.Label\n&quot;Mohai Cafe, 860 Terry Ave N, Seattle, WA 98109, United States&quot;\n&quot;Starbucks, 1200 Westlake Ave N, Seattle, WA 98109, United States&quot;\n&quot;Metropolitan Deli and Cafe, 903 Dexter Ave N, Seattle, WA 98109, United States&quot;\n&quot;Top Pot Doughnuts, 590 Terry Ave N, Seattle, WA 98109, United States&quot;\n&quot;Caffe Umbria, 1201 Westlake Ave N, Seattle, WA 98109, United States&quot;\n&quot;Starbucks, 515 Westlake Ave N, Seattle, WA 98109, United States&quot;\n&quot;Cafe 815 Mercer, 815 9th Ave N, Seattle, WA 98109, United States&quot;\n&quot;Victrola Coffee Roasters, 500 Boren Ave N, Seattle, WA 98109, United States&quot;\n&quot;Specialty's, 520 Terry Ave N, Seattle, WA 98109, United States&quot;\n...</code></pre> \n</div> \n<p>Both of the searches have other options; read the Geocoding, Reverse Geocoding, and Search to learn more.</p> \n<p><span style=\"text-decoration: underline\"><strong>Things to Know</strong></span><br /> <a href=\"http://aws.amazon.com/location\" title=\"\">Amazon Location</a> is launching today as a preview, and you can get started with it right away. During the preview we plan to add an API for routing, and will also do our best to respond to customer feedback and feature requests as they arrive.</p> \n<p>Pricing is based on usage, with an initial evaluation period that lasts for three months and lets you make numerous calls to the <span title=\"\">Amazon Location</span> APIs at no charge. After the evaluation period you pay the prices listed on the <a href=\"https://aws.amazon.com/location/pricing\">Amazon Location Pricing</a> page.</p> \n<p><span title=\"\">Amazon Location</span> is available in the <span title=\"\">US East (N. Virginia)</span>, <span title=\"\">US East (Ohio)</span>, <span title=\"\">US West (Oregon)</span>, <span title=\"\">Europe (Ireland)</span>, and <span title=\"\">Asia Pacific (Tokyo)</span> Regions. For more information please check out our <a href=\"https://docs.aws.amazon.com/location/\">documentation here</a>.</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p> \n<p>&nbsp;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"3e84cec54aec050f9ced32a7ab9f983fbf68dbd9f5ef3a6f40e02e734afe6e6c","category":"Tech"}
{"title":"★ Gus Mueller and Ken Kocienda on Brad Cox and Objective‑C","link":"https://daringfireball.net/2021/01/mueller_cox_objc","date":1611610991000,"content":"\n<p><a href=\"https://shapeof.com/archives/2021/1/brad_cox_objective-c_creator_passes.html\">Gus Mueller</a>:</p>\n\n<blockquote>\n  <p>I took a couple of runs at it. The brackets and pointers threw me\noff, but I kept on trying because I knew I needed to learn this\nlanguage to build the apps I wanted to see in this world.</p>\n\n<p>And then one day, I believe when plugging away on my little\ninternet search utility <a href=\"https://web.archive.org/web/20030204023115/http://www.flyingmeat.com/vnk/\">VoodooNetKey</a>, everything clicked.</p>\n\n<p>Pointers, the brackets, selectors, messages. Oh my god, I get it\nnow — the brackets! It’s not a function call, it’s something\nway better!</p>\n\n<p>Everything just sort of aligned in my brain. Previously I found\nmyself struggling to express the ideas I had in my head, and it\nwas a frustrating experience. Now I was struggling to type fast\nenough and come up with new ideas that I could express in\nObjective-C. I felt like I could do anything I wanted with it.</p>\n</blockquote>\n\n<p>Objective-C is polarizing on a specific axis. It is, objectively (no pun intended<sup id=\"fnr1-2021-01-25\"><a href=\"#fn1-2021-01-25\">1</a></sup>), an unusual language syntactically. Most modern programming languages look roughly the same, but you can spot Objective-C code at a glance. It’s distinctive. It’s different. It’s also difficult and dangerous in the ways that C itself is difficult and dangerous. That’s the nature of Cox’s original gimmick, that Objective-C was a layer of new syntax on top of C, for performance. Objective-C needed to do things C couldn’t do, but syntactically needed to dance around C’s own syntax. Hence all the square brackets.</p>\n\n<p>There are some good programmers who view their source code as their product. The source code they write is, in their minds, the <em>thing</em> they are crafting. And if the source code, by nature of the language itself, is ugly, that’s a non-starter.</p>\n\n<p>There are other good programmers who view the app they are creating as their product. The app is the <em>thing</em> they are creating and the source code is just a part of the process. It’s the difference between crafting <em>code</em> and crafting <em>apps</em>. It’s this latter group — Gus Mueller among them — who sings the praises of Objective-C.</p>\n\n<p>In very rough terms, it’s like the difference between a novel and a screenplay. A novel is the product — the prose is meant to be enjoyed and should, in and of itself, be beautiful. A screenplay is just a means toward an end: making a <em>movie</em>. There’s a reason screenplays aren’t written like novels, and follow strict <a href=\"https://screencraft.org/2015/05/07/elements-of-screenplay-formatting/\">formatting rules</a> that are, objectively, ugly. Or perhaps — like Objective-C syntax — not <em>ugly</em> per se but <em>brutal</em>.</p>\n\n<p>But, still, you can write a fun-to-read screenplay, and you can write elegant Objective-C source code. I’d rather read a Quentin Tarantino screenplay than most novels. Yet I’d also always rather watch a Quentin Tarantino movie than read his screenplay for it — because that’s the <em>thing</em> he’s working toward. The product. The art.</p>\n\n<p>Here’s Ken Kocienda — a key engineer on the original iPhone team, and author of the remarkable book <em><a href=\"http://creativeselection.io/\">Creative Selection</a></em> — <a href=\"https://twitter.com/kocienda/status/1353009172334350336\">in a short thread on Twitter</a>:</p>\n\n<blockquote>\n  <p>Objective-C is more than a language and a runtime for computers.\nLike chisels and marble for a sculptor, Objective-C is a medium\nfor thinking, expression, and creation.</p>\n\n<p>Objective-C offered a small collection of rules on the surface and\na deep well of flexibility underneath. This combination\nfacilitated and encouraged quick and playful experimentation.</p>\n\n<p>Objective-C allowed the programmer to wink and say, “I know what\nI’m doing.” Objective-C winked back and became a willing\nparticipant in making the computer do cool stuff.</p>\n</blockquote>\n\n<p>When I listen to my favorite app developers speak of Objective-C and its runtime, they almost never talk of the source code they wrote. They speak about it like Kocienda does, like it gave them the ability to put their fingers on the <em>apps</em> themselves. Like they weren’t writing instructions to make the app, but that they were writing the app itself. Not writing a recipe for baking a cake, but somehow baking a cake directly, and tweaking it to taste better and look prettier <em>as it’s cooking</em>. And if you needed to write ungainlier-looking recipes to get that on-the-fly dynamic feel for the cake as it’s being made, so be it, because the cake is the <em>thing</em>, not the recipe.</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn1-2021-01-25\">\n<p>OK, OK, you got me: the pun was fully intended.&nbsp;<a href=\"#fnr1-2021-01-25\"  class=\"footnoteBackLink\"  title=\"Jump back to footnote 1 in the text.\">&#x21A9;&#xFE0E;</a></p>\n</li>\n</ol>\n</div>\n\n\n\n    ","author":"John Gruber","siteTitle":"Daring Fireball","siteHash":"fc569638025dadf22a867470f8215f38855cf50e975782a6c989909474292a36","entryHash":"bdd6d893e58e59d69c851756e8e3eeb82f69337db83d86de55da4f0c173f10bb","category":"Tech"}
{"title":"คำถามเรื่อง Java Stream vs For loop","link":"https://www.somkiat.cc/java-stream-vs-for-loop/","date":1620740188000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/java8streams-1024x339-1.png\" /></figure>\n\n\n\n<p>เจอคำถามเกี่ยวกับ <strong><a href=\"https://www.facebook.com/groups/265480147632946/permalink/898792590968362\" target=\"_blank\">Java Stream vs For loop ใน facebook group</a></strong><br />ถ้าเป็น Java developer/programmer ที่เรียนรู้ความสามารถภาษา Java ใหม่ ๆ<br />น่าจะใช้ Java stream และ Lambda กันหมดแล้ว<br />หรือหลาย ๆ คนก็ไปสาย Reactive กันหมดเล้ว<br />แต่แน่นอนว่า คำถามนี้ก็ยังน่าสนใจ <br />เพราะว่า ผมก็เจอคำถามแบบนี้บ่อยมาก ๆ<br />สิ่งที่ต้องพิจารณานั้น ควรดูให้ครบทุกมุมยกตัวอย่างเช่น</p>\n\n\n\n<ul><li>Readability</li><li>Performance</li></ul>\n\n\n\n<p><strong>เรื่องแรก Performance ของการทำงาน</strong></p>\n\n\n\n<p>performance มักจะตรงข้ามกับ readability อย่างมากนั่นคือ</p>\n\n\n\n<ul><li>กรณีที่ข้อมูลแบบ List ที่มีขนาดไม่ใหญ่มาก For loop จะเร็วกว่า</li><li>กรณีที่ข้อมูลแบบ List ที่มีขนาดใหญ่ Stream จะเร็วกว่า แถมทำงานแบบ parallel ได้ด้วย ดังนั้นยิ่ง CPU มีหลาย core ยิ่งเร็วขึ้นไปอีก</li></ul>\n\n\n\n<p>แต่ที่น่าสนใจคือ JVM สมัยใหม่ตั้งแต่ JDK 1.8 หรือ 8 ขึ้นไป<br />พยายามทำการ optimize ให้ Stream มีการทำงานที่ดีขึ้นอย่างมาก</p>\n\n\n\n<p>อาจจะต้องเลือกว่าcost ของ performance vs cost ของ readability และ maintain อะไรดีกว่ากันในแต่ละบริบทจะต่างกันไป</p>\n\n\n\n<p>ลองทำการ benchmark ด้วย <strong><a href=\"https://github.com/openjdk/jmh\" target=\"_blank\">JMH (Java Microbenchmark Harness)</a></strong></p>\n\n\n\n<p><strong>เรื่องที่สองคือ readability</strong></p>\n\n\n\n<p>ระหว่าง loop ซ้อน loopหรือใน loop <br />มี if ซ้อน if ไปเรื่อย ๆ<br />กับใช้งาน Stream ร่วมกับ operation ต่าง ๆ และ Lambda <br />อะไรน่าจะอ่านและเข้าใจง่ายกว่ากัน<br />แต่ถ้าปกติก็เริ่มที่ for loop นี่แหละ ง่ายที่สุดแล้ว</p>\n\n\n\n<p>จากที่ผมทำงานมาหลัง ๆ ก็ไป Stream กันเลย ตามความเคยชิน !!</p>\n\n\n\n<p><strong>ตัวอย่าง code แบบง่าย ๆ </strong><br />แน่นอนว่า ใช้ for loop เลยง่าย ๆ</p>\n\n\n\n[gist id=\"572a0870847c8a8cb5c6a0ec176f1079\" file=\"1.java\"]\n\n\n\n<p>แต่ถ้าซับซ้อนกว่าละ !!<br />ต้องลองกันดูครับแบบนี้อ่านง่ายขึ้นไหม ?</p>\n\n\n\n[gist id=\"572a0870847c8a8cb5c6a0ec176f1079\" file=\"2.java\"]\n\n\n\n<p><strong>จะแบบไหนลองเลือกดูครับ</strong><br />แต่ควรต้องรู้และเข้าใจทั้ง for i, for each และ stream<br />เพื่อให้เราเลือกใช้ได้เหมาะสมครับ</p>\n\n\n\n<p><em>ปล. 1<br />ตอนนี้ Java 16 แล้วนะครับเรื่อง Java Stream และ Lambda <br />น่าจะเป็นพื้นฐานของภาษา Java ไปแล้ว<br />จะใช้งาน for loop หรือ stream ก็ต้องเลือกให้เหมาะสม<br /></em></p>\n\n\n\n<p><em>ปล. 2<br />อย่าหนีปัญหาด้วยการเปลี่ยนภาษา เช่นเรายังเขียน Java ต่ำกว่า 1.8 หรือ 8<br />ดังนั้นเพื่อความ modern เราจะไปภาษา Kotlin เลย !!</em></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"2494d9216a48d3e46c72f8f5e562d07ccaf1cab0f17282eea7b358c3d8485379","category":"Thai"}
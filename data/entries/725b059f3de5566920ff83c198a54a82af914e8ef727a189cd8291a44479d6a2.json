{"title":"Managing Resources for Workloads with Nomad 1.1","link":"https://www.hashicorp.com/blog/managing-resources-for-workloads-with-nomad-1-1","date":1620151200000,"content":"<p>HashiCorp Nomad 1.1 introduces several new resource control mechanisms to unlock higher efficiency and better performance, including memory oversubscription, reserved CPU cores, and improved UI visibility into resource utilization. This blog post takes a closer look at each of those new features.</p>\n<p><strong>Learn more:</strong> <a href=\"https://hashicorp.com/blog/announcing-hashicorp-nomad-1-1-beta\">Announcing HashiCorp Nomad 1.1. Beta</a></p>\n<h2><a href=\"#memory-oversubscription\">»</a><a></a>Memory Oversubscription</h2>\n<p>Setting task memory limits is a challenging act of balance. Job authors must set a memory limit for each task — if it’s too low, the task may be interrupted if it exceeds the limit unexpectedly; if it’s too high, the cluster is left underutilized and resources are wasted. Job authors usually set limits based on their task's typical memory usage and then add a safety margin to handle unexpected load spikes or uncommon scenarios. That means that in <a href=\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/43438.pdf\">some clusters</a>, 20-40% of the cluster memory may be reserved but unused.</p><img src=\"https://www.datocms-assets.com/2885/1620146573-oversubscription.png\" /><p>To help minimize reserved but not used cluster memory, Nomad 1.1 now lets job authors set two separate memory limits:</p>\n<ol>\n<li>A reserve limit to represent the task’s typical memory usage — this number is used by the Nomad scheduler to reserve and place the task</li>\n<li>A max limit, which is the maximum memory the task may use</li>\n</ol>\n<p>If a client’s memory becomes contended or low, Nomad uses the operating system primitives to recover. In Linux via Cgroups, Nomad reclaims memory by pushing the tasks back to their reserved memory limits and may reschedule tasks to other clients.</p>\n<p>The new max limit attribute is currently supported by Docker and all default Nomad drivers except <a href=\"https://www.nomadproject.io/docs/drivers/raw_exec\"><code>raw_exec</code></a> and <a href=\"https://www.nomadproject.io/docs/drivers/qemu\">QEMU</a>. HashiCorp will help third-party drivers support memory oversubscription.</p>\n<p>Enterprise operators can set <a href=\"https://learn.hashicorp.com/tutorials/nomad/quotas\">resource quotas</a> to limit the aggregate max memory limit of applications, similar to reserved memory limits.</p>\n<h3><a href=\"#reserved-memory-example\">»</a><a></a>Reserved Memory Example</h3>\n<p>To understand the benefit, consider a web service that typically uses 150MB of memory, but historically has seen short load spikes up to 300MB. Previously, job authors may have conservatively set memory limits to an even higher value than the spikes, e.g. 350MB, just to be safe. In Nomad 1.1, the task resource block can set 150MB as the reserved memory but have 350MB as the maximum memory for the task. The task resource block would look like this:</p><pre><code>resources {\n  cpu        = 1000\n  memory     = 150\n  memory_max = 350\n}</code></pre><h2><a href=\"#reserved-cpu-cores\">»</a><a></a>Reserved CPU Cores</h2>\n<p>Nomad is great at packing different kinds of jobs with different resource requirements onto each machine. While CPU and memory isolation mechanisms help ensure jobs don’t use more than what has been allocated for them, latency-sensitive workloads can still experience problems reserving the CPU cores they need.</p>\n<p>On Linux machines, Nomad’s CPU isolation mechanism uses a feature called “cpu shares” to make sure jobs each get their fair share of time utilizing the CPU. For latency-sensitive tasks, users often want one or more entire CPU cores to be reserved rather than shared among multiple tasks.</p><img src=\"https://www.datocms-assets.com/2885/1620147371-reserved-cores-nomad.png\" /><p><em>Applications with both shared and reserved CPU cores</em></p>\n<p>In Nomad 1.1, job authors can now fulfill this need through a new core resource that can be used in place of <code>cpu</code> to describe the number of reserved cores the task requires. This works in conjunction with the existing CPU shares system so a Nomad client could have tasks with shared CPUs, reserved cores, or a mix of both.</p>\n<h3><a href=\"#reserved-cpu-cores-example\">»</a><a></a>Reserved CPU Cores Example</h3>\n<p>Consider a game server that is latency-sensitive and requires four CPU cores. Previously, job authors would have to know what machine type to schedule on — perhaps through a constraint — to set the appropriate amount of CPU resource (measured in MHz). Now, with Nomad 1.1, they can specify the number of cores and Nomad will take care of finding clients that have enough room to reserve the required number of cores:</p><pre><code>resources {\n  cores  = 4\n  memory = 4069\n}</code></pre><h2><a href=\"#ui-improvements\">»</a><a></a>UI Improvements</h2>\n<p>The Nomad 1.1 UI features several updates, including exposure of CPU and memory reservations and per-task breakdowns on allocation utilization charts.</p>\n<h3><a href=\"#reserved-resources\">»</a><a></a>Reserved Resources</h3>\n<p>Client resource utilization charts now reflect when CPU and memory resources are reserved for non-Nomad processes. This helps highlight when resource reservations have been configured on a client node.</p><img src=\"https://www.datocms-assets.com/2885/1620051517-reserve.png\" /><h2><a href=\"#allocation-per-task-metrics\">»</a><a></a>Allocation Per-Task Metrics</h2>\n<p>Allocation resource utilization charts now break down usage for each task. This helps operators understand how the tasks that make up an allocation are consuming resources without having to visit individual task detail pages. Reserved CPU cores are not yet exposed in the UI but work on that is forthcoming.</p><img src=\"https://www.datocms-assets.com/2885/1620051521-allocs.png\" /><h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>We are excited to deliver these long-awaited features to the Nomad community. We encourage you to download the <a href=\"https://www.nomadproject.io/downloads\">Nomad 1.1. beta release</a> and let us know about your experience in <a href=\"https://github.com/hashicorp/nomad/issues/new?assignees=&amp;labels=type%2Fbug&amp;template=bug_report.md\">GitHub</a> or our <a href=\"https://discuss.hashicorp.com/c/nomad/28/l/latest\">discussion forum</a>.</p>\n<p>To see these new features in action, register for the <a href=\"https://www.hashicorp.com/events/webinars/nomad-1-1-oversubscription-reserved-cpu-cores-autoscaler-and-more\">Nomad 1.1 introduction webinar</a>, on May 19, 2021 at 9 a.m. PT.</p>","author":"Mahmood Ali","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"725b059f3de5566920ff83c198a54a82af914e8ef727a189cd8291a44479d6a2","category":"Tech"}
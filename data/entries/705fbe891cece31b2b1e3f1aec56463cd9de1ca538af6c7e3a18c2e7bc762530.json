{"title":"CSS Auditing Tools","link":"https://smashingmagazine.com/2021/03/css-auditing-tools/","date":1615470000000,"content":"<p>How large is your CSS? How repetitive is it? What about your CSS specificity score? Can you safely remove some declarations and vendor prefixes, and if so, how do you spot them quickly? Over the last few weeks, we’ve been working on refactoring and cleaning up our CSS, and as a result, we stumbled upon a couple of useful tools that helped us identify duplicates. So let’s review some of them.</p>\n<div>\n    <h4>More On CSS:</h4>\n    <ul>\n    <li><a href=\"https://www.smashingmagazine.com/guides/css-layout/\">Comprehensive Guide To CSS Layout</a>\n    </li><li><a href=\"https://www.smashingmagazine.com/2021/02/css-z-index-large-projects/\">Managing CSS Z-Index</a></li>\n    <li><a href=\"https://www.smashingmagazine.com/2019/03/css-alignment/\">How To Align Things In CSS</a></li>\n    <li><a href=\"https://www.smashingmagazine.com/2021/02/things-you-can-do-with-css-today/\">Things You Can Do With CSS Today</a></li>\n    <li><a href=\"https://www.smashingmagazine.com/2021/02/useful-chrome-firefox-devtools-tips-shortcuts/\">Useful DevTools Tips and Shortcuts</a></li>\n    <li>Also, <a href=\"/the-smashing-newsletter/\">subscribe to our newsletter</a> to not miss the next ones.</li>\n</ul>\n</div>\n\n\n<h3>CSS Stats</h3>\n<p><a href=\"https://cssstats.com/\">CSS Stats</a> runs a  thorough audit of the CSS files requested on a page. Like many similar tools, it provides a dashboard-alike view of rules, selectors, declarations and properties, along with pseudo-classes and pseudo-elements. It also <strong>breaks down all styles into groups</strong>, from layout and structure to spacing, typography, font stacks and colors.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1a08575e-e863-4963-bffa-3df841ee074c/specificity-graph.png\" /></p>\n<p>One of the useful features that CSS Stats provides is the <strong>CSS specificity score</strong>, showing how unnecessarily specific some of the selectors are. Lower scores and flatter curves are better for maintainability.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6e455a16-1c4f-4585-93a3-632793436122/colors-used.png\" /></p>\n<p>It also includes an overview of colors used, printed by declaration order, and a score for <strong>Total vs. Unique declarations</strong>, along with the comparison charts that can help you identify which properties might be the best candidates for creating abstractions. That’s a great start to understand where the main problems in your CSS lie, and what to focus on.</p>\n<h3>Yellow Lab Tools</h3>\n<p><a href=\"https://yellowlab.tools/\">Yellow Lab Tools</a>, is a free tool for auditing web performance, but it also includes some very helpful helpers for <strong>measure the complexity of your CSS</strong> — and also provides actionable insights into how to resolve these issues.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b61a4ee5-44c8-44fb-8c15-f7ae6ed88f08/2-css-complexity-bad-css.png\" /></p>\n<p>The tool highlights <strong>duplicated selectors and properties</strong>, old IE fixes, old vendor prefixes and redundant selectors, along with complex selectors and syntax errors. Obviously, you can dive deep into each of the sections and study which selectors or rules specifically are overwritten or repeated. That’s a great option to discover some of the low-hanging fruits and resolve them quickly.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e893b895-2cf2-4f18-a083-6dc1b787dbeb/3-duplicated-selectors.png\" /></p>\n<p>We can go a bit deeper though. Once you tap into the overview of old vendor prefixes, you can not only check the offenders but also <strong>which browsers</strong> these prefixes are accommodating for. Then you can head to your <a href=\"https://github.com/browserslist/browserslist\">Browserslist configuration</a> to double-check if you aren’t serving too many vendor prefixes, and test your configuration on <a href=\"https://browserl.ist/\">Browsersl.ist</a> or via Terminal.</p>\n<h3>Project Wallace</h3>\n<p>Unlike other tools, <a href=\"https://www.projectwallace.com/\">Project Wallace</a>, created by Bart Veneman, additionally keeps the history of your CSS over time. You can use webhooks to <a href=\"https://www.projectwallace.com/blog/automatically-analyze-css-on-every-push/\">automatically analyze CSS on every push</a> in your CI. The tool tracks the state of your CSS over time by looking into specific CSS-related metrics such as <strong>average selector per rule</strong>, maximum selectors per rule and declarations per rule, along with a general overview of CSS complexity.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/128fa8b4-643a-45f2-a37b-aabd7fececf1/4-complexity.png\" /></p>\n<h3>Parker</h3>\n<p>Katie Fenn’s <a href=\"https://github.com/katiefenn/parker\">Parker</a> is a command-line stylesheet analysis tool that runs metrics on your stylesheets and reports on their complexity. It runs on Node.js, and, unlike CSS Stats, you can run it to measure your local files, e.g. as a part of your build process.</p>\n<h3>DevTools CSS Auditing</h3>\n<p>Of course, we can also use DevTools’ <a href=\"https://umaar.com/dev-tips/209-css-overview/\">CSS overview</a> panel. (You can enable it in the “Experimental Settings”). Once you capture a page, it provides an overview of media queries, colors and font declarations, but also highlights <strong>unused declarations</strong> which you can safely remove.</p>\n<p>Also, <a href=\"https://developers.google.com/web/tools/chrome-devtools/coverage\">CSS coverage</a> returns an overview of unused CSS on a page. You could even go a bit further and <a href=\"https://willmanntobias.medium.com/how-to-bulk-find-unused-css-and-javascript-with-puppeteer-and-chrome-coverage-f79f7d885d59\">bulk find unused CSS/JS with Puppeteer</a>.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e75a1874-f431-44e9-87a3-993593580ded/06-useful-devtools-tips-shortcuts.png\" /></p>\n<p>With “Code coverage” in place, going through a couple of scenarios that include a lot of tapping, tabbing and window resizing, we also <a href=\"https://twitter.com/chromedevtools/status/1286663677240737793\">export coverage data</a> that DevTools collects as JSON (via the export/download icon). On top of that, you could use Puppeteer that also provides an <a href=\"https://pptr.dev/#?product=Puppeteer&amp;show=api-class-coverage\">API to collect coverage</a>.</p>\n<p>We’ve highlighted some of the details, and a few further <strong>DevTools tips in Chrome</strong>, Firefox, and Edge in <a href=\"https://www.smashingmagazine.com/2021/02/useful-chrome-firefox-devtools-tips-shortcuts/\">Useful DevTools Tips And Shortcuts</a> here on Smashing Magazine.</p>\n<h3>What Tools Are You Using?</h3>\n<p>Ideally, a CSS auditing tool would provide some insights about how heavily CSS implact rendering performance, and which operations lead to <strong>expensive layout recalculations</strong>. It could also highlight what properties don’t affect the rendering at all (like Firefox DevTools does it), and perhaps even suggest how to write <a href=\"https://csswizardry.com/2011/09/writing-efficient-css-selectors/\">slightly more efficient CSS selectors</a>.</p>\n<p>These are just a few tools that we’ve discovered — we’d love to hear your stories and your tools that work well to identify the bottlenecks and fix CSS issues faster. Please <strong>leave a comment</strong> and share your story in the comments!</p>\n<p>You can also <a href=\"/the-smashing-newsletter/\">subscribe to our friendly email newsletter</a> to not miss next posts like this one. And, of course, happy CSS auditing and debugging!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"705fbe891cece31b2b1e3f1aec56463cd9de1ca538af6c7e3a18c2e7bc762530","category":"Tech"}
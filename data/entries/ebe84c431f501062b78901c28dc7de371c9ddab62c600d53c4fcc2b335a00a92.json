{"title":"Making GraphQL Work In WordPress","link":"https://smashingmagazine.com/2021/04/making-graphql-work-in-wordpress/","date":1618909200000,"content":"<p>Headless WordPress seems to be in vogue lately, with many new developments taking place in just the last few weeks. One of the reasons for the explosion in activity is the release of version 1.0 of <a href=\"https://www.wpgraphql.com\">WPGraphQL</a>, a GraphQL server for WordPress.</p>\n<p>WPGraphQL provides a GraphQL API: a way to fetch data from, and post data to, a WordPress website. It enables us to decouple the experience of managing our content, which is done via WordPress, from rendering the website, for which we can use the library of the framework of our choice (<a href=\"https://www.smashingmagazine.com/category/react/\">React</a>, <a href=\"https://www.smashingmagazine.com/category/vue/\">Vue.js</a>, <a href=\"https://www.smashingmagazine.com/2020/09/advanced-graphql-usage-gatsby-websites/\">Gatsby</a>, <a href=\"https://www.smashingmagazine.com/category/next.js\">Next.js</a>, or any other).</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d792f19b-c6b4-4dd5-aa8f-78142cc2248b/1-graphql-wordpress-wpgraphal-graphql-api-wp.jpg\" /></p>\n<p>Until recently, WPGraphQL was the only GraphQL server for WordPress. But now another such plugin is available: <a href=\"https://graphql-api.com\">GraphQL API for WordPress</a>, authored by me.</p>\n<p>These two plugins serve the same purpose: to provide a GraphQL API to a WordPress website. You may be wondering: Why another plugin when there’s already WPGraphQL? Do these two plugins do the same thing? Or are they for different situations?</p>\n<p>Let me say this first: WPGraphQL works great. I didn’t build my plugin because of any problem with it.</p>\n<p>I built GraphQL API for WordPress because I had been working on an engine to <strong>retrieve data efficiently</strong>, which happened to be very suitable for GraphQL. So, then I said to myself, “Why not?”, and I built it. (And also a <a href=\"https://leoloso.com/posts/why-i-built-graphql-api-when-there-was-wpgraphql/\">couple of other reasons</a>.)</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/09c35cd8-2f34-4dfa-bc2b-729721f1fef1/2-graphql-wordpress-wpgraphal-graphql-api-wp.jpg\" /></p>\n<p>The two plugins have different architectures, giving them different characteristics, which make particular tasks easier to achieve with one plugin or the other.</p>\n<p>In this article, I’ll describe, from my own point of view but as objectively as possible, when WPGraphQL is the way to go and when GraphQL API for WordPress is a better choice.</p>\n<h3>Use WPGraphQL If: Using Gatsby</h3>\n<p>If you’re building a website using <a href=\"https://www.gatsbyjs.com/\">Gatsby</a>, then there is only one choice: WPGraphQL.</p>\n<p>The reason is that only WPGraphQL has the <a href=\"https://www.gatsbyjs.com/plugins/gatsby-source-wordpress/\">Gatsby source plugin for WordPress</a>. In addition, WPGraphQL’s creator, Jason Bahl, was employed until recently by Gatsby, so we can fully trust that this plugin will suit Gatsby’s needs.</p>\n<p>Gatsby receives all data from the WordPress website, and from then on, the logic of the application will be fully on Gatsby’s side, not on WordPress’. Hence, no additions to WPGraphQL (such as the potential additions of <code>@stream</code> or <code>@defer</code> directives) would make much of a difference.</p>\n<p>WPGraphQL is already as good as Gatsby needs it to be.</p>\n<h3>Use WPGraphQL If: Using One of the New Headless Frameworks</h3>\n<p>As I mentioned, lately there has been a flurry of activity in the WordPress headless space concerning several new frameworks and starter projects, all of them based on <a href=\"https://nextjs.org/\">Next.js</a>:</p>\n<ul>\n<li>Colby Fayock created <a href=\"https://github.com/colbyfayock/next-wordpress-starter\">Next.js WordPress Starter</a>.</li>\n<li>WebDevStudios launched its own <a href=\"https://github.com/WebDevStudios/nextjs-wordpress-starter/\">Next.js WordPress Starter</a>.</li>\n<li>WP Engine created the <a href=\"https://github.com/wpengine/headless-framework\">Headless WordPress Framework</a>, which <a href=\"https://wpengine.com/blog/wp-engine-launches-atlas-the-future-of-headless-wordpress/\">powers its service</a> to host and deploy headless WordPress websites.</li>\n</ul>\n<p>If you need to use any of these new headless frameworks, then you will need to use WPGraphQL, because they have all been built on top of this plugin.</p>\n<p>That’s a bit unfortunate: I’d really love for GraphQL API for WordPress to be able to power them too. But for that to happen, these frameworks would need to <strong>operate with GraphQL via an interface</strong>, so that we could swap GraphQL servers.</p>\n<p>I’m somewhat hopeful that any of these frameworks will put such an interface into place. I <a href=\"https://github.com/wpengine/headless-framework/discussions/59\">asked about it</a> in the Headless WordPress Framework discussion board and was told that it might be considered. I also asked in WebDevStudios’ Next.js WordPress Starter discussion board, but alas, my question was immediately deleted, without a response. (Not encouraging, is it?)</p>\n<p>So WPGraphQL it is then, currently and for the foreseeable future.</p>\n<h3>Use Either (Or Neither) If: Using Frontity</h3>\n<p><a href=\"https://frontity.org/\">Frontity</a> is a <a href=\"https://reactjs.org/\">React</a> framework for WordPress. It enables you to build a React-based application that is managed in the back end via WordPress. Even creating blog posts using the WordPress editor is supported out of the box.</p>\n<p>Frontity manages the state of the application, without leaking how the data was obtained. Even though it is based on REST by default, you can also power it via GraphQL by <a href=\"https://community.frontity.org/t/some-questions-from-a-newcomer-to-frontity/3252/6\">implementing the corresponding source plugin</a>.</p>\n<p>This is how Frontity is smart: The source plugin is an interface to communicate with the data provider. Currently, the only available source plugin is the <a href=\"https://api.frontity.org/frontity-packages/features-packages/wp-source\">one for the WordPress REST API</a>. But anyone can implement a source plugin for either WPGraphQL or GraphQL API for WordPress. (This is the approach that I wish the Next.js-based frameworks replicated.)</p>\n<p><strong>Conclusion</strong>: Neither WPGraphQL nor the GraphQL API offers any advantage over the other for working with Frontity, and they both require some initial effort to plug them in.</p>\n<h3>Use WPGraphQL If: Creating a Static Site</h3>\n<p>In the first two sections, the conclusion was the same: Use WPGraphQL. But my response to this conclusion was different: While with Gatsby I had no regret, with Next.js I felt compelled to do something about it.</p>\n<p>Why is that?</p>\n<p>The difference is that, while Gatsby is purely a static site generator, Next.js can power both static and live websites.</p>\n<p>I mentioned that WPGraphQL is already good enough for Gatsby. This statement can actually be broadened: <strong>WPGraphQL is already good enough for any static site generator</strong>. Once the static site generator gets the data from the WordPress website, it is pretty much settled with WordPress.</p>\n<p>Even if GraphQL API for WordPress offers additional features, it will most likely not make a difference to the static site generator.</p>\n<p>Hence, because WPGraphQL is already good enough, and it has completely mapped the GraphQL schema (which is still a work in progress for GraphQL API for WordPress), then WPGraphQL is the most suitable option, now and for the foreseeable future.</p>\n<h3>Use GraphQL API If: Using GraphQL in a Live (i.e. Non-Static) Website</h3>\n<p>Now, the situation above changes if we want GraphQL to fetch data from a live website, such as when powering a mobile app or plotting real-time data on a website (for instance, to display analytics) or combining both the static and live approaches on the same website.</p>\n<p>For instance, let’s say we have built a simple static blog using one of the Next.js frameworks, and we want to allow users to add comments to blog posts. How should this task be handled?</p>\n<p>We have two options: <strong>static</strong> and <strong>live</strong> (or dynamic). If we opt for static, then comments will be rendered together with the rest of the website. Then, whenever a comment is added, we must trigger a webhook to regenerate and redeploy the website.</p>\n<p>This approach has a few inconveniences. The <strong>regeneration and redeployment process</strong> could take a few minutes, during which the new comment will not be available. In addition, if the website receives many comments a day, the static approach will require more server processing time, which could become costly (some hosting companies charge based on server time).</p>\n<p>In this situation, it would make sense to render the website statically without comments, and then retrieve the comments from a live site and render them dynamically in the client.</p>\n<p>For this, <a href=\"https://blog.logrocket.com/next-js-vs-gatsbyjs-a-developers-perspective/\">Next.js is recommended over Gatsby</a>. It can better handle the static and live approaches, including supporting different outputs for users with different capabilities.</p>\n<p>Back to the GraphQL discussion: Why do I recommend GraphQL API for WordPress when dealing with live data? I do because the GraphQL server can have a direct impact on the application, mainly in terms of <strong>speed and security</strong>.</p>\n<p>For a purely static website, the WordPress website can be kept private (it might even live on the developer’s laptop), so it’s safe. And the user will not be waiting for a response from the server, so speed is not necessarily of critical importance.</p>\n<p>For a live site, though, the GraphQL API will be made public, so data safety becomes an issue. We must make sure that no malicious actors can access it. In addition, the user will be waiting for a response, so speed becomes a critical consideration.</p>\n<p>In this respect, <strong>GraphQL API for WordPress has a few advantages over WPGraphQL</strong>.</p>\n<p>WPGraphQL does implement security measures, such as <a href=\"https://www.wpgraphql.com/docs/security/#introspection-disabled-by-default\">disabling introspection by default</a>. But GraphQL API for WordPress goes further, by disabling the single endpoint by default (along with <a href=\"https://graphql-api.com/features/#heading-multiple-layers-of-security\">several other measures</a>). This is possible because GraphQL API for WordPress offers <a href=\"https://graphql-api.com/features/#heading-persisted-queries\">persisted queries</a> natively.</p>\n<p>As for speed, persisted queries also make the API faster, because the response can then be <a href=\"https://graphql-api.com/features/#heading-http-caching\">cached via HTTP caching</a> on several layers, including the client, content delivery network, and server.</p>\n<p>These reasons make GraphQL API for WordPress better suited at handling live websites.</p>\n<h3>Use GraphQL API If: Exposing Different Data for Different Users or Applications</h3>\n<p>WordPress is a versatile content management system, able to manage content for multiple applications and accessible to different types of users.</p>\n<p>Depending on the context, we might need our GraphQL APIs to expose different data, such as:</p>\n<ul>\n<li>expose certain data to paid users but not to unpaid users,</li>\n<li>expose certain data to the mobile app but not to the website.</li>\n</ul>\n<p>To expose different data, we need to provide <strong>different versions of the GraphQL schema</strong>.</p>\n<p>WPGraphQL allows us to modify the schema (for instance, we can <a href=\"https://www.wpgraphql.com/functions/deregister_graphql_field/\">remove a registered field</a>). But the process is not straightforward: Schema modifications must be coded, and it’s not easy to understand who is accessing what and where (for instance, all schemas would still be available under the single endpoint, <code>/graphql</code>).</p>\n<p>In contrast, GraphQL API for WordPress natively supports this use case: It offers <a href=\"https://graphql-api.com/features/#heading-custom-endpoints\">custom endpoints</a>, which can expose different data for different contexts, such as:</p>\n<ul>\n<li><code>/graphql/mobile-app</code> and <code>/graphql/website</code>,</li>\n<li><code>/graphql/pro-users</code> and <code>/graphql/regular-users</code>.</li>\n</ul>\n<p>Each custom endpoint is configured via <a href=\"https://graphql-api.com/features/#heading-access-control-lists\">access control lists</a>, to provide granular user access field by field, as well as a <a href=\"https://graphql-api.com/features/#heading-publicprivate-api-mode\">public and private API mode</a> to determine whether the schema’s meta data is available to everyone or only to authorized users.</p>\n<p>These features directly integrate with the WordPress editor (i.e. Gutenberg). So, creating the different schemas is done visually, similar to creating a blog post. This means that <strong>everyone can produce custom GraphQL schemas</strong>, not only developers.</p>\n<p>GraphQL API for WordPress provides, I believe, a natural solution for this use case.</p>\n<h3>Use GraphQL API If: Interacting With External Services</h3>\n<p>GraphQL is not merely an API for fetching and posting data. As important (though often neglected), it can also <strong>process and alter the data</strong> — for instance, by feeding it to some external service, such as sending text to a third-party API to fix grammar errors or uploading an image to a content delivery network.</p>\n<p>Now, what’s the best way for GraphQL to communicate with external services? In my opinion, this is <a href=\"https://css-tricks.com/rendering-the-wordpress-philosophy-in-graphql/#directives-to-override-functionality\">best accomplished through directives</a>, applied when either creating or retrieving the data (not unlike how WordPress filters operate).</p>\n<p>I don’t know how well WPGraphQL interacts with external services, because its documentation doesn’t mention it, and the code base does not offer an example of any directive or document how to create one.</p>\n<p>In contrast, GraphQL API for WordPress has <strong>robust support for directives</strong>. Every directive in a query is executed only once in total (as opposed to once per field and/or object). This capability enables very efficient communication with external APIs, and it integrates the GraphQL API within a cloud of services.</p>\n<p>For instance, <a href=\"https://newapi.getpop.org/graphiql/?query=query%20%7B%0A%20%20posts%20%7B%0A%20%20%20%20title%20%40translate(from%3A%22en%22%2Cto%3A%22es%22\">this query</a>%0A%20%20%20%20excerpt%20%40translate(from%3A%22en%22%2Cto%3A%22es%22)%0A%20%20%7D%0A%7D) demonstrates a call to the Google Translate API via a <code>@translate</code> directive, to translate the titles and excerpts of many posts from English to Spanish. All fields for all posts are translated together, in a single call.</p>\n<p>GraphQL API for WordPress is a natural choice for this use case.</p>\n<p><strong>Note</strong>: <em>As a matter of fact, the engine on which GraphQL API for WordPress is based, GraphQL by PoP, was specifically designed to provide advanced data-manipulation capabilities. That is one of its distinct characteristics. For an extreme example of what it can achieve, check out the guide on “<a href=\"https://graphql-by-pop.com/guides/localized-newsletter.html\">Sending a Localized Newsletter, User by User</a>”.</em></p>\n<h3>Use WPGraphQL If: You Want a Support Community</h3>\n<p>Jason Bahl has done a superb job of rallying a community around WPGraphQL. As a result, if you need to troubleshoot your GraphQL API, you’ll likely find someone who can help you out.</p>\n<p>In my case, I’m still striving to create a community of users around GraphQL API for WordPress, and it’s certainly nowhere near that of WPGraphQL.</p>\n<h3>Use GraphQL API If: You Like Innovation</h3>\n<p>I call GraphQL API for WordPress a “forward-looking” GraphQL server. The reason is that I often browse the list of <a href=\"https://github.com/graphql/graphql-spec/issues/\">requests for the GraphQL specification</a> and implement some of them well ahead of time (especially those that I feel some affinity for or that I can support with little effort).</p>\n<p>As of today, GraphQL API for WordPress supports several innovative features (such as <a href=\"https://graphql-api.com/features/#heading-multiple-query-execution\">multiple query execution</a> and <a href=\"https://graphql-api.com/features/#heading-schema-namespacing\">schema namespacing</a>), offered as opt-in, and there are plans for a <a href=\"https://github.com/leoloso/PoP/labels/innovative\">few more</a>.</p>\n<h3>Use WPGraphQL If: You Need a Complete Schema</h3>\n<p>WPGraphQL has completely <a href=\"https://www.wpgraphql.com/docs/posts-and-pages/\">mapped the WordPress data model</a>, including:</p>\n<ul>\n<li>posts and pages,</li>\n<li>custom post types,</li>\n<li>categories and tags,</li>\n<li>custom taxonomies,</li>\n<li>media,</li>\n<li>menus,</li>\n<li>settings,</li>\n<li>users,</li>\n<li>comments,</li>\n<li>plugins,</li>\n<li>themes,</li>\n<li>widgets.</li>\n</ul>\n<p>GraphQL API for WordPress is <a href=\"https://graphql-api.com/guides/query/posts/\">progressively mapping the data model</a> with each new release. As of today, the list includes:</p>\n<ul>\n<li>posts and pages,</li>\n<li>custom post types,</li>\n<li>categories and tags,</li>\n<li>custom taxonomies,</li>\n<li>media,</li>\n<li>menus,</li>\n<li>settings,</li>\n<li>users,</li>\n<li>comments.</li>\n</ul>\n<p>So, if you need to fetch data from a plugin, theme, or widget, currently only WPGraphQL does the job.</p>\n<h3>Use WPGraphQL If: You Need Extensions</h3>\n<p>WPGraphQL <a href=\"https://www.wpgraphql.com/extensions\">offers extensions for many plugins</a>, including Advanced Custom Fields, WooCommerce, Yoast, Gravity Forms.</p>\n<p>GraphQL API for WordPress offers an extension for Events Manager, and it will keep adding more after the release of version 1.0 of the plugin.</p>\n<h3>Use Either If: Creating Blocks for the WordPress Editor</h3>\n<p>Both WPGraphQL and GraphQL API for WordPress are currently working on integrating GraphQL with Gutenberg.</p>\n<p>Jason Bahl has <a href=\"https://www.wpgraphql.com/2021/03/09/gutenberg-and-decoupled-applications/\">described three approaches</a> by which this integration can take place. However, because all of them have issues, he is advocating for the introduction of a server-side registry to WordPress, to enable identification of the different Gutenberg blocks for the GraphQL schema.</p>\n<p>GraphQL API for WordPress also has an <a href=\"https://graphql-api.com/blog/proposing-a-new-approach-for-gutenberg-and-decoupled-applications/\">approach for integrating with Gutenberg</a>, based on the “create once, publish everywhere” strategy. It <strong>extracts block data from the stored content</strong>, and it uses a single <code>Block</code> type to represent all blocks. This approach could avoid the need for the proposed server-side registry.</p>\n<p>WPGraphQL’s solution can be considered tentative, because it will depend on the community accepting the use of a server-side registry, and we don’t know if or when that will happen.</p>\n<p>For GraphQL API for WordPress, the solution will depend entirely on itself, and it’s indeed already a work in progress.</p>\n<p>Because it has a higher chance of producing a working solution soon, I’d be inclined to recommend <strong>GraphQL API for WordPress</strong>. However, let’s wait for the solution to be fully implemented (in a few weeks, according to the plan) to make sure it works as intended, and then I will update my recommendation.</p>\n<h3>Use GraphQL API If: Distributing Blocks Via a Plugin</h3>\n<p>I came to a realization: Not many plugins (if any) seem to be using GraphQL in WordPress.</p>\n<p>Don’t get me wrong: WPGraphQL has surpassed 10,000 installations. But I believe that those are mostly installations to power Gatsby (in order to run Gatsby) or to power Next.js (in order to run one of the headless frameworks).</p>\n<p>Similarly, WPGraphQL has many extensions, as I described earlier. But those extensions are just that: extensions. They are not standalone plugins.</p>\n<p>For instance, the WPGraphQL for WooCommerce extension depends on both the WPGraphQL and WooCommerce plugins. If either of them is not installed, then the extension will not work, and that’s OK. But WooCommerce doesn’t have the choice of relying on WPGraphQL in order to work; hence, there will be no GraphQL in the WooCommerce plugin.</p>\n<p>My understanding is that there are no plugins that use GraphQL in order to run functionality for WordPress itself or, specifically, to power their Gutenberg blocks.</p>\n<p>The reason is simple: Neither WPGraphQL nor GraphQL API for WordPress are part of WordPress’ core. Thus, it is not possible to rely on GraphQL in the way that plugins can rely on WordPress’ REST API. As a result, plugins that implement Gutenberg blocks may only use REST to fetch data for their blocks, not GraphQL.</p>\n<p>Seemingly, the solution is to wait for a GraphQL solution (most likely WPGraphQL) to be added to WordPress core. But who knows how long that will take? Six months? A year? Two years? Longer?</p>\n<p>We know that WPGraphQL is being considered for WordPress’ core because Matt Mullenweg has hinted at it. But so many things must happen before then: bumping the minimum PHP version to 7.1 (required by both WPGraphQL and GraphQL API for WordPress), as well as having a clear decoupling, understanding, and roadmap for what functionality will GraphQL power.</p>\n<p>(Full site editing, currently under development, is based on REST. What about the next major feature, multilingual blocks, to be addressed in Gutenberg’s phase 4? If not that, then which feature will it be?)</p>\n<p>Having explained the problem, <strong>let’s consider a potential solution</strong> — one that doesn’t need to wait!</p>\n<p>A few days ago, I had another realization: From GraphQL API for WordPress’ code base, I can produce a smaller version, containing only the GraphQL engine and nothing else (no UI, no custom endpoints, no HTTP caching, no access control, no nothing). And this version can be distributed as a Composer dependency, so that plugins can install it to power their own blocks.</p>\n<p>The key to this approach is that this component must be of specific use to the plugin, not to be shared with anybody else. Otherwise, two plugins both referencing this component might modify the schema in such a way that they override each other.</p>\n<p>Luckily, I recently <a href=\"https://graphql-api.com/blog/graphql-api-for-wp-is-now-scoped-thanks-to-php-scoper/\">solved scoping GraphQL API for WordPress</a>. So, I know that I’m able to fully scope it, producing a version that will not conflict with any other code on the website.</p>\n<p>That means that it will work for any <strong>combination of events</strong>:</p>\n<ul>\n<li>If the plugin containing the component is the only one using it;</li>\n<li>If GraphQL API for WordPress is also installed on the same website;</li>\n<li>If another plugin that also embeds this component is installed on the website;</li>\n<li>If two plugins that embed the component refer to the same version of the component or to different ones.</li>\n</ul>\n<p>In each situation, the plugin will have its own self-contained, private GraphQL engine that it can fully rely on to power its Gutenberg blocks (and we need not fear any conflict).</p>\n<p>This component, to be called the <strong>Private GraphQL API</strong>, should be ready in a few weeks. (I have already <a href=\"https://github.com/leoloso/PoP/issues/519\">started working on it</a>.)</p>\n<p>Hence, my recommendation is that, if you want to use GraphQL to power Gutenberg blocks in your plugin, please wait a few weeks, and then check out GraphQL API for WordPress’ younger sibling, the Private GraphQL API.</p>\n<h3>Conclusion</h3>\n<p>Even though I do have skin in the game, I think I’ve managed to write an article that is mostly objective.</p>\n<p>I have been honest in stating why and when you need to use WPGraphQL. Similarly, I have been honest in explaining why GraphQL API for WordPress appears to be better than WPGraphQL for several use cases.</p>\n<p>In general terms, we can summarize as follows:</p>\n<ul>\n<li>Go static with WPGraphQL, or go live with GraphQL API for WordPress.</li>\n<li>Play it safe with WPGraphQL, or invest (for a potentially worthy payoff) in GraphQL API for WordPress.</li>\n</ul>\n<p>On a final note, I wish the Next.js frameworks were re-architected to follow the same approach used by Frontity: where they can access an interface to fetch the data that they need, instead of using a direct implementation of some particular solution (the current one being WPGraphQL). If that happened, developers could choose <strong>which underlying server to use</strong> (whether WPGraphQL, GraphQL API for WordPress, or some other solution introduced in the future), based on their needs — from project to project.</p>\n<h4>Useful Links</h4>\n<ul>\n<li>WPGraphQL: <a href=\"https://www.wpgraphql.com/docs/quick-start/\">documentation</a>, <a href=\"https://wordpress.org/plugins/wp-graphql/\">download page</a>, <a href=\"https://github.com/wp-graphql/wp-graphql/\">code repository</a></li>\n<li>GraphQL API for WordPress: <a href=\"https://graphql-api.com/guides\">documentation</a>, <a href=\"https://graphql-api.com/download\">download page</a>, <a href=\"https://github.com/leoloso/PoP\">code repository</a></li>\n<li>“<a href=\"https://www.youtube.com/watch?v=JqF_y5RQbF8&amp;list=TLGGnLwd9hrB9LAyNTAzMjAyMQ\">The Gatsby WordPress Integration Workshop</a>”<br />YouTube video with demo of WPGraphQL</li>\n<li>“<a href=\"https://www.youtube.com/watch?v=LnyNyT2RwwI\">Intro to GraphQL API for WordPress</a>”<br />YouTube video with demo of GraphQL API for WordPress</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"ebe84c431f501062b78901c28dc7de371c9ddab62c600d53c4fcc2b335a00a92","category":"Tech"}
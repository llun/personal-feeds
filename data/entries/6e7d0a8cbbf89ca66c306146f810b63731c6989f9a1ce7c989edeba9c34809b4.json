{"title":"[MQTT] ทดลองใช้ MQTT เพื่อควบคุม Sonoff ด้วย NodeJS ครับ","link":"https://thanapon.info/sonoff-mqtt/","date":1599916339000,"content":"<p id=\"6d9c\">สืบเนื่องจากบทความคราวก่อนนะครับที่ผมได้เขียนเกี่ยวกับการอัพโหลด TASMOTA firmware สำหรับ Sonoff กันและอีกบทความที่เกี่ยวกับการติดตั้งและใช้งาน MQTT ร่วมกับ NodeJS</p>\n\n\n\n<p id=\"2c4d\">สำหรับบทความนี้จะเป็นการรวมทั้งสองบทความก่อนหน้านี้ให้เป็น Web Application สำหรับควบคุม Sonoff โดยผ่าน MQTT Protocol กันนะครับอาจจะออกแนวไปสาย developer นิดนึ่ง แต่ผมจะพยายามเขียนให้ทุกท่านเข้าใจมากที่สุดครับ สำหรับผู้ที่สนใจสามารถดาวน์โหลด code ได้ที่ github ได้นะครับ&#8230;</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a href=\"http://thanapon.info/?p=92\" target=\"_blank\" rel=\"noreferrer noopener\">[ESP8266-Sonoff] มาลอง TASMOTA firmware สำหรับ Sonoff กันครับ</a></p><cite>สวัสดีครับหลังจากที่หายไปหลายเดือน<br>พอดีได้มีโอกาสไปลองเล่น Sonoff มา ซึ่งรุ่นที่ได้ลองจะเป็น Module Sonoff Basic ลักษณะจะคล้ายๆกับบัลลาสต์เลยครับแต่ขนาดตัวจะเล็กกว่าประมาณครึ่งเลยที่เดียวครับ</cite></blockquote>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a href=\"http://thanapon.info/?p=94\" target=\"_blank\" rel=\"noreferrer noopener\">[MQTT] ลอง MQTT บน NodeJS เถอะครับ</a></p><cite>MQTT (Message Queueing Telemetry Transport protocol)คือโปรโตคอลที่ใช้สำหรับสื่อสารกันระหว่าง m2m หรือ machine to machine</cite></blockquote>\n\n\n<h2 id=\"52c4\" data-selectable-paragraph=\"\">เริ่มต้นสร้าง express-generator สำหรับเป็นโครงให้ตัวโปรเจคของเรา</h2>\n<p id=\"d567\" data-selectable-paragraph=\"\">ก่อนจะนำ MQTT มาใช้เราต้องทำการสร้าง web application มาก่อนนะครับ ในที่นี้ผมจะใช้ตัว express-generator และในการสร้าง application ขึ้นมาโดยที่ view engine ผมจะใช้ EJS นะครับซึ่ง syntax จะคล้ายๆกับ html มากๆครับ</p>\n<pre>$ express --view=ejs nodejs-tasmota</pre>\n<p id=\"1b77\" data-selectable-paragraph=\"\">หลังจากนั้นเราก็จะได้โฟลเดอร์ nodejs-tasmota มา โดยภายในโฟลเดอร์นี้ก็จะประกอบไปด้วย</p>\n<pre>├── app.js\n├── bin\n│   └── www\n├── package.json\n├── public\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n│       └── style.css\n├── routes\n│   ├── index.js\n│   └── users.js\n└── views\n    ├── error.ejs\n    ├── index.ejs</pre>\n<p id=\"4a7f\" data-selectable-paragraph=\"\">เสร็จแล้วทำการทดสอบการทำงานของ web application ของเราโดยการรัน <em>npm install</em> ก่อนโดยจะเป็นการติดตั้ง package ต่างๆที่จำเป็นสำหรับ application ของเราแล้วทำการรัน <em>npm start</em> ตามลำดับ</p>\n<section>\n<p id=\"4a7f\" data-selectable-paragraph=\"\">\n</p><pre>$ npm install // Install package dependencies\n$ npm start   // Start service</pre>\n<p id=\"c2d4\" data-selectable-paragraph=\"\">มาที่ Web browser ของเราไม่ว่าจะเป็น Google chrome หรือ Microsoft Edge ทำการพิมพ์ไปที่ช่อง address : <a href=\"http://localhost:3000\" rel=\"noopener nofollow\"><strong>http://localhost:3000</strong></a> เป็นอันว่าจบการติดตั้งโครงสร้าง web application ที่จะใช้เขียนเชื่อมต่อ MQTT และ Tasmota</p>\n<figure>&nbsp;<img loading=\"lazy\" src=\"https://miro.medium.com/max/1920/1*eCG3UkL7iHRFz-4LwGxZgw.png\" sizes=\"700px\" srcset=\"https://miro.medium.com/max/276/1*eCG3UkL7iHRFz-4LwGxZgw.png 276w, https://miro.medium.com/max/552/1*eCG3UkL7iHRFz-4LwGxZgw.png 552w, https://miro.medium.com/max/640/1*eCG3UkL7iHRFz-4LwGxZgw.png 640w, https://miro.medium.com/max/700/1*eCG3UkL7iHRFz-4LwGxZgw.png 700w\" alt=\"Image for post\" class=\"aligncenter\" width=\"1920\" height=\"1030\"></figure>\n</section>\n<section>\n<h2 id=\"aa20\" data-selectable-paragraph=\"\">ขั้นตอนต่อไปเริ่มพัฒนา nodejs-mqtt กันเลย</h2>\n<p id=\"99bd\" data-selectable-paragraph=\"\">ทำการติดตั้ง package MQTT สำหรับ web application ของเราโดยที่พิมพ์คำสั่ง</p>\n<pre>$ npm install mqtt</pre>\n<p id=\"aef2\" data-selectable-paragraph=\"\">หลังจากนั้นเปิดไฟล์ <strong>app.js </strong>ขึ้นมาเพื่อที่จะแก้ไขตัว application ของเราให้เชื่อมต่อกับ mqtt ได้</p>\n</section>\n\n\n<div class=\"hcb_wrap\"><pre class=\"prism line-numbers lang-js\" data-lang=\"JavaScript\"><code>const createError = require(&#39;http-errors&#39;);\nconst express = require(&#39;express&#39;);\nconst path = require(&#39;path&#39;);\nconst cookieParser = require(&#39;cookie-parser&#39;);\nconst logger = require(&#39;morgan&#39;);\n\n//------------MQTT section------------//\nconst mqtt = require(&#39;mqtt&#39;)  // import mqtt connect\n// mqtt configuration\nconst mqttConfig = {\n  host: &#39;localhost&#39;,\n  port: 1883,\n  username: &#39;&#39;,\n  password: &#39;&#39;\n}\nconst client  = mqtt.connect(mqttConfig) // create connection to mqtt broker\nclient.on(&#39;connect&#39;, function () {\n  client.subscribe(&#39;tasmota/#&#39;, function (err) {\n    if (!err) {\n      client.publish(&#39;tasmota&#39;, &#39;Hello from application mqtt&#39;)\n    }\n  })\n})\n \nclient.on(&#39;message&#39;, function (topic, message) {\n  // message is Buffer\n  console.log(message.toString())\n})\n//------------------------------------//\n\nconst indexRouter = require(&#39;./routes/index&#39;);\n\nconst app = express();\n\n// view engine setup\napp.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));\napp.set(&#39;view engine&#39;, &#39;ejs&#39;);\n\napp.use(logger(&#39;dev&#39;));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, &#39;public&#39;)));\n\n// Route endpoint\nindexRouter(app,client)\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get(&#39;env&#39;) === &#39;development&#39; ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render(&#39;error&#39;);\n});\n\nmodule.exports = app;\n</code></pre></div>\n\n\n\n<p id=\"c9e7\">ในที่นี้ผมจะกำหนด topic สำหรับ subscribe เป็น “<strong><em>tasmota/#”</em></strong> นะครับ</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p># แปลว่ายอมรับทุกๆ topic ที่ขึ้นต้นด้วย prefix “tasmota”</p></blockquote>\n\n\n\n<p id=\"2e4e\">เสร็จแล้วหลังจากนั้นทำการแก้ไขไฟล์ <strong><em>views/index.ejs </em></strong>โดยที่ผมจะทำการเพิ่มปุ่มสำหรับเปิดและปิดเจ้าตัว Sonoff นะครับ ซึ่งในไฟล์ <strong><em>views/index.ejs </em></strong>เราก็จะทำการเพิ่ม html button tag กัน </p>\n\n\n\n<div class=\"hcb_wrap\"><pre class=\"prism line-numbers lang-html\" data-lang=\"HTML\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;/stylesheets/style.css&quot; /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;\n    &lt;p&gt;Welcome nodejs-tasmota&lt;/p&gt;\n    &lt;button id=&quot;butt_on&quot;&gt;เปิด&lt;/button&gt;\n    &lt;button id=&quot;butt_off&quot;&gt;ปิด&lt;/button&gt;\n  &lt;/body&gt;\n  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n    $(&quot;#butt_on&quot;).click(function (event) {\n      event.preventDefault();\n      $.get(&quot;/control/on&quot;, function (data, status) {\n        alert(&quot;Data: &quot; + data + &quot;\\nStatus: &quot; + status);\n      });\n    });\n    $(&quot;#butt_off&quot;).click(function (event) {\n      event.preventDefault();\n      $.get(&quot;/control/off&quot;, function (data, status) {\n        alert(&quot;Data: &quot; + data + &quot;\\nStatus: &quot; + status);\n      });\n    });\n  &lt;/script&gt;\n&lt;/html&gt;</code></pre></div>\n\n\n\n<p id=\"4226\">จากโค๊ดจะเห็นว่าผมได้สร้าง button tag เอาไว้สำหรับกด เปิด และ ปิด หลังจากที่ผู้ใช้งานทำการกดแล้วจะเกิด event การ click แล้ว จะไปเรียก Endpoint URL <em>/control/on</em> และ <em>/control/off</em> ผ่าน method GET กันครับ</p>\n\n\n\n<p id=\"f5bd\"><strong>เป็นอันว่าขั้นตอนที่ 2 ก็เสร็จไปแล้วขั้นตอนที่ 3 กันต่อครับโดยขั้นตอนนี้จะเป็นการเขียนให้ไปเรียก MQTT publish ข้อมูลตามโครงสร้าง MQTT ฝั่งของ Tasmota กัน</strong></p>\n\n\n\n<p id=\"eb9a\">ทำการแก้ไขโค๊ดในส่วนของการ route โดยการเปิดไฟล์ route/index.js เพื่อเพิ่ม Endpoint สำหรับการเปิดและปิด Sonoff ซึ่งในส่วนนี้เราจะต้องกำหนดข้อมูล publish ให้เป็นไปตามโครงสร้างของ Tasmota ด้วยนะครับ </p>\n\n\n\n<div class=\"hcb_wrap\"><pre class=\"prism line-numbers lang-js\" data-lang=\"JavaScript\"><code>const main = (app, client) =&gt; {\n  /* GET home page. */\n  app.get(&#39;/&#39;, function (req, res) {\n    res.render(&#39;index&#39;, {\n      title: &#39;nodejs-tasmota&#39;\n    });\n  });\n\n  app.get(&#39;/control/on&#39;, function (req, res) {\n    const fullTopic = `tasmota/cmnd/tasmota-1/POWER`\n    client.publish(fullTopic, &quot;ON&quot;);\n    res.send(&#39;Turn on!&#39;)\n  })\n\n  app.get(&#39;/control/off&#39;, function (req, res) {\n    const fullTopic = `tasmota/cmnd/tasmota-1/POWER`\n    client.publish(fullTopic, &quot;OFF&quot;);\n    res.send(&#39;Turn off!&#39;)\n  })\n}\n\nmodule.exports = main;</code></pre></div>\n\n\n\n<p id=\"7e97\">ภายใน Configuration ของ Sonoff เราจะต้องตั้งค่า Topic และ Full Topic ในการ subscribe</p>\n\n\n\n<ul><li><strong><em>Topic: tasmota-1</em></strong></li><li><strong><em>Full Topic: tasmota/%prefix%/%topic%/</em></strong></li></ul>\n\n\n\n<p id=\"ced7\">หลังจากนั้นทำการกด Save แล้ว Sonoff ของเราจะทำการ restart ตัวเอง เป็นอันว่าตอนนี้เจ้า Sonoff ของเราพร้อมกับการเชื่อมต่อเข้ากับ web application ของเราแล้ว</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://miro.medium.com/max/1498/1*KzowlRg7f3O-3AKXTrGqpQ.png\" alt=\"Image for post\"/></figure></div>\n\n\n\n<p><strong>Fulltopic : tasmota/${prefix}/${topic}/</strong></p>\n\n\n\n<ul><li><strong><em>tasmota</em></strong> เป็นชื่อกรุ๊ปของเราสามารถตั้งเป็นชื่ออะไรก็ได้</li><li><strong><em>prefix</em></strong> คือส่วนที่กำหนดว่าเป็นคำสั่งอะไร เช่น cmnd, stat, tele</li><li><strong>topic </strong>คือส่วนที่เรากำหนดได้โดยอาจจะเป็นชื่อของอุปกรณ์ที่สามารถแสดงความเจาะจงถึงอุปกรณ์นั้นๆได้เช่น device_1, device_2</li></ul>\n\n\n\n<p id=\"cea0\">ในการ publish ไปยัง MQTT broker นั้นเราจะต้องสร้าง topic ใน application ของเราให้อยู่ในรูปแบบ Fulltopic ของ Tasmota ซึ่งถ้าเราจะทำการกำหนดสถานะเช่นเปิด/ปิด Sonoff จำเป็นต้องเพิ่มคำสั่งย่อยของ prefix นั้นๆคือ POWER</p>\n\n\n\n<p id=\"b35c\">ทำการรัน application ของเราโดยใช้คำสั่ง</p>\n\n\n\n<pre class=\"wp-block-preformatted\">$ npm start</pre>\n\n\n\n<p id=\"4bb5\">หลังจากนั้นเปิด web browser ของเราไปที่ <a href=\"http://localhost:3000\"><strong>http://localhost:3000</strong></a> เพื่อดูผลลัพธ์</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://miro.medium.com/max/392/1*5GYz10EaylHCBNq58ciCnQ.gif\" alt=\"Image for post\"/></figure></div>\n\n\n\n<p id=\"a2ce\">จริงๆแล้ว Tasmota firmware มีของดีอีกเยอะเลยครับไม่ว่าจะเป็นข้อมูลที่ response มาจากตัว firmware แล้วผ่าน MQTT ซึ่งเราสามารถนำข้อมูลต่างๆนั้นมาทำเป็น Dashboard หรือแสดงสถานะต่างๆได้เป็นอย่างดีเลยครับ ไม่ว่าอยากจะทำ Smarthome เอย หรือ Smart ต่างๆ Tasmota และ Sonoff นี้น่าจะช่วยในส่วนของ hardware สำหรับนักพัฒนาได้เยอะครับ หากมีข้อผิดพลาดประการใด กราบขออภัยด้วยครับ <img src=\"https://s.w.org/images/core/emoji/13.0.0/72x72/1f642.png\" alt=\"🙂\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p>\n\n\n\n<h1 id=\"5eaa\">สำหรับวันนี้ขอบคุณและสวัสดีครับ</h1>\n\n\n\n<ul><li><strong>Github code example</strong></li></ul>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><a href=\"https://github.com/toygame/nodejs-tasmota\" target=\"_blank\" rel=\"noreferrer noopener\">toygame/<strong>nodejs-tasmota</strong></a></p><cite>https://github.com/toygame/nodejs-tasmota</cite></blockquote>\n<p>The post <a rel=\"nofollow\" href=\"https://thanapon.info/sonoff-mqtt/\">[MQTT] ทดลองใช้ MQTT เพื่อควบคุม Sonoff ด้วย NodeJS ครับ</a> appeared first on <a rel=\"nofollow\" href=\"https://thanapon.info\">Thanapon</a>.</p>","author":"thanapon.tap","siteTitle":"Thanapon","siteHash":"6a039c2f54d76e4c49227d80968f2a30de5427cc57525c047c383ea3563cde5f","entryHash":"6e7d0a8cbbf89ca66c306146f810b63731c6989f9a1ce7c989edeba9c34809b4","category":"Thai"}
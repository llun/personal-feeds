{"title":"A new HTTP spec proposes elimination of obnoxious “cookie banners”","link":"https://arstechnica.com/?p=1774162","date":1623887726000,"content":"<div>\n\n\n\n\n\n<div><a name=\"page-1\"></a></div>\n      <ul><li>\n        <div>  \n        <div><img src=\"https://cdn.arstechnica.net/wp-content/uploads/2021/06/cookie-yes-consent-banner-980x490.png\" /></div>\n        <p>\n          Cookieyes.com—a site devoted to providing GDPR/CCPA consent solutions—unsurprisingly has an excellent, minimally-invasive cookie banner.                      [credit:\n                        <a href=\"https://www.cookieyes.com/\">Jim Salter</a>\n                        ]\n                  </p>\n        </div>\n      </li>\n      </ul><p>The European Union's General Data Protection Regulation (<a href=\"https://gdpr-info.eu/\">GDPR</a>), passed in 2018, requires websites to ask visitors for consent prior to placing cookies. As any Internet user is now aware, this means an extra step required when visiting nearly any website for the first time—or potentially <em>every</em> time, if you choose not to accept cookies. A new proposed HTTP standard from <a href=\"http://noyb.eu\">None of Your Business</a> and the <a href=\"http://sustainablecomputing.eu/\">Sustainable Computing Lab</a> would allow the user to set their privacy preferences <em>once</em>, inside the browser itself, and have the browser communicate those preferences invisibly with any website the user visits.</p>\n<h2>Advanced Data Protection Control</h2>\n<p>The proposed standard enables two methods of automated preference delivery—one which communicates directly with the web server hosting a site being visited, and another which communicates with the website itself.</p>\n<p>When <a href=\"https://www.dataprotectioncontrol.org/spec/#technical-overview\">ADPC</a> communicates directly with the web server, it does so via HTTP headers—a Link header pointing to a JSON file on the server, and the ADPC header emitted by the user's browser. When communicating with the website itself, the mechanism is via JavaScript— configuration is passed as an object to the DOM interface, e.g., <code>navigator.dataProtectionControl.request(...)</code>.</p></div><p><a href=\"https://arstechnica.com/?p=1774162#p3\">Read 12 remaining paragraphs</a> | <a href=\"https://arstechnica.com/?p=1774162&amp;comments=1\">Comments</a></p>","author":"Jim Salter","siteTitle":"Ars Technica","siteHash":"5b0ddf6e8923e49262a7894cfd77962733e43fbcc565a103b48373820b310636","entryHash":"d1b3b176a6d41c0c8b3e4d35916a55467e0c1f984298f569a5adda16dbe50df1","category":"Tech"}
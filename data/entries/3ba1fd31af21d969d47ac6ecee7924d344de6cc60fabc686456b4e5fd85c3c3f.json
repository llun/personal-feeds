{"title":"Toward Vagrant 3.0","link":"https://www.hashicorp.com/blog/toward-vagrant-3-0","date":1623427200000,"content":"<p>HashiCorp Vagrant started as a small project to make interacting with virtual machines for local development easy. A growing community of developers, operators, designers, and products rely on Vagrant. In pursuing the goal to continue improving Vagrant, we discovered a path that would allow Vagrant to be ported to Go and still support its Ruby-based features. In this post, we’ll discuss how migration to a Go code base will not only support developer environments of the past decade but also new development workflows, environments, and ecosystems.</p>\n<p>The changes we are working on now are designed to allow you to run Vagrant with a client-server architecture, secure it better on different operating systems, and manage its configuration globally. They’ll also offer a more seamless plugin development experience by improving the portability of plugins and reducing the complexity of package management.</p>\n<p>Over the next year, Vagrant 2.3 and 2.4 will not break compatibility promises of Vagrantfiles or plugin interfaces. Vagrant 3.0 will introduce new methods for configuration but retain tooling for continued compatibility of Vagrantfiles. This includes detection for Ruby Vagrantfiles and installation of compatibility helpers to minimize interruptions to user workflow. While we don't yet have specific timeframes, we will announce our plans for these new versions of Vagrant as they solidify over the next few months.</p>\n<h2><a href=\"#improvements-and-new-features\">»</a><a></a>Improvements and New Features</h2>\n<p>You can look forward to many new features, capabilities, and improvements made possible by these updates to Vagrant’s architecture:</p>\n<h3><a href=\"#client-server-architecture\">»</a><a></a>Client-Server Architecture</h3>\n<p>The new architecture will allow you to run Vagrant on a remote host and secure actions on the machine. You will be able to install Vagrant on a resource-intensive machine and interact with it on a thin client, which will allow sharing of one Vagrant environment among multiple team members.</p>\n<p>A new client-server model will facilitate easy sharing of configuration and resources while also giving administrators power over Vagrant’s privileged actions. This streamlines the collaboration experience offered by the <a href=\"https://www.vagrantup.com/docs/share/provider\">existing Vagrant Share plugin</a>. You will still be able to run Vagrant locally on a desktop machine and use the new security capabilities.</p>\n<h3><a href=\"#security\">»</a><a></a>Security</h3>\n<p>Vagrant runs as a user process that requires acceptance from a user to run privileged actions. You can work around request and acceptance on POSIX platforms using a <code>sudoers</code> file to define each Vagrant command with escalated privileges. Unfortunately, you need to update this file any time you change the privileged Vagrant commands. On Windows systems, you cannot use a <code>sudoers</code> file. Instead, you must confirm a User Account Control (UAC) prompt, which makes it difficult to run Vagrant in a headless context. Vagrant 3.0 will enable a privileged service to execute known and trusted commands from Vagrant and its plugins without the need for direct user interaction.</p>\n<p>In addition to finer control of trusted commands, you will be able to use controls to prevent automatic evaluation of Ruby-based Vagrantfiles. You will also be able to write configuration in HashiCorp Configuration Language (HCL) to limit the potential for mistakes or risk arising from dynamic configuration. This prevents arbitrary code execution inline in Vagrantfiles.</p>\n<h3><a href=\"#global-configuration-management\">»</a><a></a>Global Configuration Management</h3>\n<p>Currently, you can reference only your own local configuration of Vagrant. Different users on the same system do not have access to the same configuration. A new, server-based approach will allow for management of a global Vagrant configuration, which you can also store in a database. This will fix <a href=\"https://github.com/hashicorp/vagrant/issues/8733\">long-running issues</a> where provider-specific information results in lost configuration settings. Lost settings can result in unexpected and unintended system modifications.</p>\n<p>Global configuration management helps organize Vagrant’s state and lays the foundation for adding a web-based UI, error checking, and transaction-based interactions. This improves Vagrant’s resilience to bad changes. The update will also resolve issues around Vagrant’s index file <a href=\"https://github.com/hashicorp/vagrant/issues/10657\">growing too big</a> or <a href=\"https://github.com/hashicorp/vagrant/issues/11214\">being too fragile</a>.</p>\n<h3><a href=\"#plugin-api-and-portability\">»</a><a></a>Plugin API and Portability</h3>\n<p>While the existing Ruby plugin API will continue to be supported, Vagrant will support a new plugin API with the help of the <a href=\"https://github.com/hashicorp/go-plugin\">HashiCorp go-plugin library</a>. Plugin authors will be able to create Vagrant plugins in Go or any other language with GRPC support. A plugin SDK will provide common utilities and helpers for plugin development.</p>\n<p>You will be able to port plugins written with the new API across platforms and release them independently of Vagrant’s releases. A compiled Go plugin's cross-platform capability will ease distribution and usage by simplifying current requirements for complex dependency management.</p>\n<h3><a href=\"#bring-your-own-ruby\">»</a><a></a>Bring Your Own Ruby</h3>\n<p>A long-standing issue with some plugins and third-party distributions packaging Vagrant revolves around Vagrant shipping its own Ruby. This causes friction when you want to <a href=\"https://github.com/hashicorp/vagrant/issues/12318\">run Vagrant on the latest versions of Ruby</a> or when Ruby plugins depend on packages that <a href=\"https://github.com/hashicorp/vagrant/issues/12327\">require specific libraries</a>. Moving away from bundling Ruby with Vagrant will give users more control over the Ruby runtime. For example, systems such as Arch or Fedora that distribute their own Vagrant package can safely depend on system Ruby.</p>\n<h3><a href=\"#using-ecosystem-libraries\">»</a><a></a>Using Ecosystem Libraries</h3>\n<p>We have developed a number of Go libraries for other HashiCorp products and other infrastructure tooling by various vendors and communities. The move to Go will allow Vagrant to more fully join this community, gaining the ability to use (and contribute to) tools that already exist, as well as lean on the Go expertise that exists at Hashicorp.</p>\n<p>HashiCorp tools such as <a href=\"https://github.com/hashicorp/go-plugin\">go-plugin</a> and <a href=\"https://github.com/mitchellh/go-glint\">glint</a> helped us explore the possibilities around writing Vagrant in Go while maintaining backward compatibility. Moving forward, other Go libraries will allow Vagrant to accommodate a wide variety of new plugins. For example, you can use Go bindings for different virtualization software to build new plugins for many more backends.</p>\n<h2><a href=\"#plugin-externalization\">»</a><a></a>Plugin Externalization</h2>\n<p>Vagrant has more than 70 built-in plugins. This proliferation has introduced new development constraints. Currently, any fix that may be required on a built-in plugin is dependent on the entirety of Vagrant before it can be released. With Vagrant 3.0, as we continue to improve the plugin API and portability, we can extract plugins from Vagrant so you can update them faster and easier.</p>\n<p>The focus will mainly be on provider and provisioner plugins. Once these plugins are externalized, you will be able to upgrade provider and provisioner plugins independent of Vagrant. Command plugins will remain internal and still depend on Vagrant’s release cycle.</p>\n<h2><a href=\"#planned-milestones\">»</a><a></a>Planned Milestones</h2>\n<p>We recognize that porting a project to another language can be disruptive, so we aim to make it as seamless as possible. We will not deprecate any interfaces or features you require as a Vagrant end user or plugin developer during this process. First, we will port the core of Vagrant to Go. Once that is stable, we will work on built-in plugins. This iterative process ensures full compatibility between the Go and Ruby Vagrant runtimes, a requirement for our own built-in plugins to remain functional.</p>\n<p>We will spread these changes over two minor releases and one major release:</p>\n<h3><a href=\"#vagrant-2-3\">»</a><a></a>Vagrant 2.3</h3>\n<p>The Vagrant 2.3 release will include the initial alpha version of the Go-based Vagrant implementation. It will be shipped in the Vagrant installer packages and made available as an optional executable. You will be able to choose to use the new implementation, but you may experience some instability. Throughout the Vagrant 2.3 release cycle, we will work to stabilize the Go-based Vagrant implementation and begin to port built-in plugins. The <code>vagrant</code> command will continue to run the traditional Ruby-based Vagrant implementation.</p>\n<h3><a href=\"#vagrant-2-4\">»</a><a></a>Vagrant 2.4</h3>\n<p>The Vagrant 2.4 release will feature the new Go implementation of Vagrant as the primary executable. It will include a migration command, which will import existing data from the Vagrant home and project directories. Vagrantfiles will also support HCL and data structures.</p>\n<p>We will focus on identifying and resolving compatibility issues in the Vagrant 2.4 release cycle. You will still be able to use the Ruby-based implementation by using the alternate executable. Based on feedback and the consistency of user experience in the 2.4 series, we may have additional 2.x series releases.</p>\n<h3><a href=\"#vagrant-3-0\">»</a><a></a>Vagrant 3.0</h3>\n<p>The Vagrant 3.0 release will include only the Go-based Vagrant implementation. By default, it will support only plugins that use the new API and HCL-based Vagrantfiles. The installer package will no longer include Ruby nor the extra dependencies required for running the Ruby-based Vagrant implementation.</p>\n<p>You will still be able to use Ruby-based Vagrantfiles and Vagrant plugins. However, you will need to install Ruby on the host system. Vagrant will detect Ruby-based Vagrantfile or plugin usage and prompt you with instructions for installing Ruby on your platform. Once installed, Ruby-based Vagrantfiles and plugins will work normally.</p>\n<h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>From a new Go-based implementation to the externalization of plugins, we are designing Vagrant 3.0 to provide a foundation to integrate with new developer environments while maintaining the environments of the last decade. We look forward to making these changes available to help you scale your use and development of Vagrant. If you have feedback on our plans for Vagrant, or would like to ask questions about it, please reply with a comment in <a href=\"https://discuss.hashicorp.com/t/the-future-of-vagrant/25104\">our topic on the Vagrant forum</a>.</p>","author":"Chris Roberts","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"3ba1fd31af21d969d47ac6ecee7924d344de6cc60fabc686456b4e5fd85c3c3f","category":"Tech"}
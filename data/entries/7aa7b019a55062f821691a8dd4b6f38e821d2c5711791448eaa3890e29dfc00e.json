{"title":"Things You Can Do With CSS Today","link":"https://smashingmagazine.com/2021/02/things-you-can-do-with-css-today/","date":1612179000000,"content":"<p>CSS is great and getting better all the time. Over recent years, especially, it has evolved really fast, too. Understandably, some of the really handy powers CSS gives you might have slipped you by because of this, so in this article, I’m going to show you some really handy <strong>stuff you can do with modern CSS today</strong>, and also share some stuff that we can look forward to in the future.</p>\n<p>Let’s dig in.</p>\n<h3>Masonry Layout</h3>\n<p>Masonry layouts became very popular with Pinterest, Tumblr and Unsplash, and up until recently, we tended to <a href=\"https://masonry.desandro.com/\">rely on JavaScript to assist with our layout</a>, which is almost never a good idea.</p>\n<p>Sure, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns/Basic_Concepts_of_Multicol\">CSS multicol</a> pretty darn effectively to achieve a masonry layout, but that approach can be problematic with tabbed-focus as it lays content out in <em>columns</em>. This creates a disconnect between the visual layout and the tabbing index.</p>\n<p>Fast forward to today (well, <em>very</em> <a href=\"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid/\"><em>shortly in the future</em></a>) and a masonry layout is pretty trivial, thanks to an <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Masonry_Layout\">update to CSS Grid</a>. Here’s a complete masonry layout, with gutters, in 6 lines of CSS:</p>\n<pre><code>.masonry {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: masonry;\n  grid-gap: 1rem;\n}</code></pre>\n\n<p>The magic is in <code>grid-template-rows</code> set as <code>masonry</code>, which turns it into the “masonry axis”, thus providing the “filled in” layout we’ve all come accustomed to.</p>\n<p>Let’s expand on this and explore a quick demo of creating a <strong>responsive masonry layout</strong>. Using a slightly modified version of the above CSS, we can replace the <code>grid-template-columns</code> line to use this <a href=\"https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid\">auto grid method</a> instead:</p>\n<pre><code>.masonry {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));\n  grid-template-rows: masonry;\n  grid-gap: 1rem;\n}</code></pre>\n\n<p>The <code>minmax()</code> function allows us to define what the smallest size is for our items, which for us, is <code>16rem</code>. Then we tell <code>minmax()</code> what the maximum size should be for each item. We declare that as 1fr, <strong>which takes 1 portion of the remaining available space</strong>.</p>\n<p>This definition of <code>grid-template-columns</code> allows our layout to break and stack if it runs out of horizontal space which the <strong>masonry axis</strong> then automatically sorts our remaining elements for us.</p>\n<p><strong>Note</strong>: <em>Right now, masonry is <a href=\"https://twitter.com/MiriSuzanne/status/1255567501359853570\">only working in Firefox Nightly</a>, or behind a flag, but the grid layout will still work perfectly in non-supporting browsers, making it a decent progressive enhancement target.</em></p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/539ffdf6-24b7-4111-b012-287fdf2b661a/jake-archibald-beyond-fast-chrome-dev-summit-2020.png\" /></p>\n<p>You can also <a href=\"https://web.dev/content-visibility/\">read this great article, too</a>.</p>\n<h4>Resources</h4>\n<ul>\n<li><a href=\"https://web.dev/content-visibility/\">Content-visibility on web.dev</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=FFA-v-CIxJQ\">Another video explaining what happens under the hood</a></li>\n<li><a href=\"https://css-tricks.com/more-on-content-visibility/\">A handy article with some useful notes to know about <code>content-visibility</code></a></li>\n</ul>\n<h3>Wrapping Up And What’s Coming Up</h3>\n<p>That’s a pretty cool new CSS, right? There’s loads more arriving soon and loads in the long-term pipeline too. We can look forward to <a href=\"https://www.w3.org/TR/mediaqueries-5/\">Media Queries Level 5</a> which let us target the current ambient light level and whether or not the user prefers reduced data.</p>\n<p>We’ve also got <a href=\"https://drafts.csswg.org/css-nesting-1/\">CSS Nesting in draft</a>, which will give us Sass-like nesting capabilities like this:</p>\n<pre><code>.my-element {\n    background: red;\n\n    &amp; p {\n        background: yellow;\n    }\n}</code></pre>\n\n<p>We’re getting even more control too, with <a href=\"https://gist.github.com/xiaochengh/da1fa52648d6184fd8022d7134c168c1\">font metrics override descriptors</a> and <a href=\"https://www.w3.org/TR/css-cascade-5/\">Cascade Level 5</a>, which introduces layers to the cascade. <a href=\"https://groups.google.com/a/chromium.org/g/blink-dev/c/u1AKdrXhPGI/m/wrJb-unhAgAJ?pli=1\">Prototyping is happening with container queries too</a>!</p>\n<p>Lastly, there are some cool new tricks on the horizon, like <a href=\"https://twitter.com/argyleink/status/1349051923912036355\">scroll-linked animations</a>, which will open the door wide-open to a new generation of creative work on the web.</p>\n<p>In conclusion, the present and future of CSS are very bright indeed and if you take a pragmatic, progressive approach to your CSS: things will continue to get better and better on your projects too.</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"7aa7b019a55062f821691a8dd4b6f38e821d2c5711791448eaa3890e29dfc00e","category":"Tech"}
{"title":"Using Template Files with HashiCorp Packer","link":"https://www.hashicorp.com/blog/using-template-files-with-hashicorp-packer","date":1619452800000,"content":"<p>In HashiCorp Packer 1.7, we tagged HCL2 as stable and implemented HCL2-only functions. You can use one such function, the <code>templatefile</code> <a href=\"https://www.packer.io/docs/templates/hcl_templates/functions/file/templatefile\">function</a> to build multiple operating systems with less duplication of configuration.</p>\n<p>Currently, you need to use the <code>boot_command</code> argument to configure an OS before you connect to the machine. You can use it with many builders, including the <a href=\"https://www.packer.io/docs/builders/vmware/iso#boot_command\">vmware-iso</a> or <a href=\"https://www.packer.io/docs/builders/virtualbox/iso#boot_command\">virtualbox-iso</a> builders. A <code>boot_command</code> mimicks manual keystrokes and sends them at a regular cadence. You aggregate these keystrokes for installing and configuring packages in a <a href=\"https://www.packer.io/guides/automatic-operating-system-installs/preseed_ubuntu\">preseed file</a>.  Packer enables sharing preseed files by making them available statically through an HTTP server. You can also access static files using CD files or a floppy.</p>\n<p>In this post, we’ll use the <code>http_content</code> and the <code>templatefile</code> functions together to build preseed file templates for two Ubuntu images, one with HashiCorp Nomad and one with HashiCorp Consul.</p>\n<h2><a href=\"#templating-a-preseed-file\">»</a><a></a>Templating a Preseed File</h2>\n<p>Say the file <code>preseed.pkrtpl</code> is your preseed template file, and you would like to be able to set a user’s name, ID, and password and also the packages installed with it :</p><pre><code>d-i apt-setup/universe boolean true\nd-i pkgsel/include %{ for install in installs ~}${install} %{ endfor }string\n openssh-server cryptsetup build-essential libssl-dev libreadline-dev zlib1g-dev\n linux-source dkms nfs-common linux-headers-$(uname -r) perl cifs-utils\n software-properties-common rsync ifupdown\n\nd-i passwd/user-fullname string ${user.name}\nd-i passwd/user-uid string ${user.id}\nd-i passwd/user-password password ${user.password}\nd-i passwd/user-password-again password ${user.password}\nd-i passwd/username string ${user.name}\n\nchoose-mirror-bin mirror/http/proxy string\nd-i base-installer/kernel/override-image string linux-server\nd-i clock-setup/utc boolean true\nd-i clock-setup/utc-auto boolean true\nd-i finish-install/reboot_in_progress note\nd-i grub-installer/only_debian boolean true\nd-i grub-installer/with_other_os boolean true\nd-i mirror/country string manual\nd-i mirror/http/directory string /ubuntu/\nd-i mirror/http/hostname string archive.ubuntu.com\nd-i mirror/http/proxy string\nd-i partman-auto-lvm/guided_size string max\nd-i partman-auto/choose_recipe select atomic\nd-i partman-auto/method string lvm\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman/confirm_write_new_label boolean true\nd-i pkgsel/install-language-support boolean false\nd-i pkgsel/update-policy select none\nd-i pkgsel/upgrade select full-upgrade\nd-i time/zone string UTC\nd-i user-setup/allow-password-weak boolean true\nd-i user-setup/encrypt-home boolean false\ntasksel tasksel/first multiselect standard, server\n</code></pre><p>This template file can be used to install binaries from a variable. In this example, we made it possible to configure the user settings and pass an arbitrary list of packages to install. This simplifies the build while making it more powerful.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code>.pkrtpl</code> extension is a recommendation and not a requirement. It allows editors to recognize a Packer template file written in HCL2.</p>\n</blockquote>\n<p>The following configuration file can then be defined:</p><pre><code>variables {\n  headless = true\n}\n\nsource \"virtualbox-iso\" \"base-ubuntu-amd64\" {\n  headless                = var.headless\n\n  iso_url                 = local.ubuntu_2010_iso_url\n  iso_checksum            = \"file:${local.ubuntu_2010_iso_checksum_url}\"\n\n  guest_os_type           = \"Ubuntu_64\"\n  hard_drive_interface    = \"sata\"\n  ssh_wait_timeout        = \"15m\"\n  boot_wait               = \"5s\"\n}\n\nlocals {\n  ubuntu_2010_dl_folder        = \"http://cdimage.ubuntu.com/ubuntu/releases/18.04/release/\"\n  ubuntu_2010_iso_url          = \"${local.ubuntu_2010_dl_folder}ubuntu-18.04.5-server-amd64.iso\"\n  ubuntu_2010_iso_checksum_url = \"${local.ubuntu_2010_dl_folder}SHA256SUMS\"\n\n  builds = {\n    consul = {\n      user = {\n        id       = 1000\n        name     = \"bob\"\n        password = \"s3cr2t\"\n      }\n      installs = [\"consul\"]\n    }\n    nomad = {\n      user = {\n        id       = 1000\n        name     = \"bob\"\n        password = \"s3cr2t\"\n      }\n      installs = [\"nomad\"]\n    }\n  }\n}\n\nbuild {\n  name = \"ubuntu\"\n  description = &lt;\",\n        \"\",\n        \"\",\n        \"/install/vmlinuz\",\n        \" auto\",\n        \" console-setup/ask_detect=false\",\n        \" console-setup/layoutcode=us\",\n        \" console-setup/modelcode=pc105\",\n        \" debconf/frontend=noninteractive\",\n        \" debian-installer=en_US.UTF-8\",\n        \" fb=false\",\n        \" initrd=/install/initrd.gz\",\n        \" kbd-chooser/method=us\",\n        \" keyboard-configuration/layout=USA\",\n        \" keyboard-configuration/variant=USA\",\n        \" locale=en_US.UTF-8\",\n        \" netcfg/get_domain=vm\",\n        \" netcfg/get_hostname=vagrant\",\n        \" grub-installer/bootdev=/dev/sda\",\n        \" noapic\",\n        \" preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg\",\n        \" -- \",\n        \"\"\n      ]\n      output_directory = \"virtualbox_iso_ubuntu_2010_amd64_${source.key}\"\n    }\n  }\n\n  provisioner \"shell\" {\n    environment_vars  = [ \"HOME_DIR=/home/vagrant\" ]\n    execute_command   = \"echo '${local.builds[source.name].user.password}' | {{.Vars}} sudo -S -E sh -eux '{{.Path}}'\"\n    expect_disconnect = true\n    inline            = [\n      \"echo hello from the ${source.name} image\",\n      \"${source.name} version\"\n    ]\n  }\n}</code></pre><p>Now we can see that this has made it easier to maintain a preseed project. Pretty cool, right? Effectively, the <code>templatefile</code> function can be used in other scenarios, same for the http_content option. We could extend this by skipping the template file and setting everything from the map:</p>\n<pre><code><span>[</span>...<span>]</span>\n<span>http_content</span> <span>=</span> <span>{</span>\n  <span>\"/preseed.cfg\"</span> <span>=</span> &lt;<span>&lt;&lt;EOF\nd-i apt-setup/universe boolean true\nd-i pkgsel/include string openssh-server cryptsetup build-essential libssl-dev libreadline-dev zlib1g-dev linux-source dkms nfs-common linux-headers-$(uname -r) perl cifs-utils software-properties-common rsync ifupdown consul\n...\nEOF</span>\n<span>}</span>\n</code></pre><h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>For more information on Packer’s recent additions, review Packer's <a href=\"https://github.com/hashicorp/packer/blob/master/CHANGELOG.md\">changelog</a>. Lastly, if you have any issues, do not hesitate to <a href=\"https://github.com/hashicorp/packer/issues\">open an issue</a> in the Packer repository on GitHub.</p>","author":"Adrien Delorme","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"acfb50116e1b849e2c4ecb976d47124623d70ae112b02f87a76389f5bf19a6ca","category":"Tech"}
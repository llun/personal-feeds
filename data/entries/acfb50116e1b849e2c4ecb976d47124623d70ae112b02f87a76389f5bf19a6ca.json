{"title":"Using Template Files with HashiCorp Packer","link":"https://www.hashicorp.com/blog/using-template-files-with-hashicorp-packer","date":1619452800000,"content":"<p>In HashiCorp Packer 1.7, we tagged HCL2 as stable and implemented HCL2-only functions. You can use one such function, the <code>templatefile</code> <a href=\"https://www.packer.io/docs/templates/hcl_templates/functions/file/templatefile\">function</a> to build multiple operating systems with less duplication of configuration.</p>\n<p>Currently, you need to use the <code>boot_command</code> argument to configure an OS before you connect to the machine. You can use it with many builders, including the <a href=\"https://www.packer.io/docs/builders/vmware/iso#boot_command\">vmware-iso</a> or <a href=\"https://www.packer.io/docs/builders/virtualbox/iso#boot_command\">virtualbox-iso</a> builders. A <code>boot_command</code> mimicks manual keystrokes and sends them at a regular cadence. You aggregate these keystrokes for installing and configuring packages in a <a href=\"https://www.packer.io/guides/automatic-operating-system-installs/preseed_ubuntu\">preseed file</a>.  Packer enables sharing preseed files by making them available statically through an HTTP server. You can also access static files using CD files or a floppy.</p>\n<p>In this post, we’ll use the <code>http_content</code> and the <code>templatefile</code> functions together to build preseed file templates for two Ubuntu images, one with HashiCorp Nomad and one with HashiCorp Consul.</p>\n<h2><a href=\"#templating-a-preseed-file\">»</a><a></a>Templating a Preseed File</h2>\n<p>Say the file <code>preseed.pkrtpl</code> is your preseed template file, and you would like to be able to set a user’s name, ID, and password and also the packages installed with it :</p><pre><code>d-i apt-setup/universe boolean true\nd-i pkgsel/include %{ for install in installs ~}${install} %{ endfor }string\n openssh-server cryptsetup build-essential libssl-dev libreadline-dev zlib1g-dev\n linux-source dkms nfs-common linux-headers-$(uname -r) perl cifs-utils\n software-properties-common rsync ifupdown\n\nd-i passwd/user-fullname string ${user.name}\nd-i passwd/user-uid string ${user.id}\nd-i passwd/user-password password ${user.password}\nd-i passwd/user-password-again password ${user.password}\nd-i passwd/username string ${user.name}\n\nchoose-mirror-bin mirror/http/proxy string\nd-i base-installer/kernel/override-image string linux-server\nd-i clock-setup/utc boolean true\nd-i clock-setup/utc-auto boolean true\nd-i finish-install/reboot_in_progress note\nd-i grub-installer/only_debian boolean true\nd-i grub-installer/with_other_os boolean true\nd-i mirror/country string manual\nd-i mirror/http/directory string /ubuntu/\nd-i mirror/http/hostname string archive.ubuntu.com\nd-i mirror/http/proxy string\nd-i partman-auto-lvm/guided_size string max\nd-i partman-auto/choose_recipe select atomic\nd-i partman-auto/method string lvm\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm boolean true\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\nd-i partman/confirm_write_new_label boolean true\nd-i pkgsel/install-language-support boolean false\nd-i pkgsel/update-policy select none\nd-i pkgsel/upgrade select full-upgrade\nd-i time/zone string UTC\nd-i user-setup/allow-password-weak boolean true\nd-i user-setup/encrypt-home boolean false\ntasksel tasksel/first multiselect standard, server\n</code></pre><p>This template file can be used to install binaries from a variable. In this example, we made it possible to configure the user settings and pass an arbitrary list of packages to install. This simplifies the build while making it more powerful.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code>.pkrtpl</code> extension is a recommendation and not a requirement. It allows editors to recognize a Packer template file written in HCL2.</p>\n</blockquote>\n<p>The following configuration file can then be defined:</p>\n<pre><code><span>variables</span> <span>{</span>\n  <span>headless</span> <span>=</span> <span>true</span>\n<span>}</span>\n\nsource <span>\"virtualbox-iso\"</span> <span>\"base-ubuntu-amd64\"</span> <span>{</span>\n  <span>headless</span>                <span>=</span> var.headless\n\n  <span>iso_url</span>                 <span>=</span> local.ubuntu_2010_iso_url\n  <span>iso_checksum</span>            <span>=</span> <span>\"file:<span><span>$</span><span>{</span><span>local</span><span>.</span><span>ubuntu_2010_iso_checksum_url</span><span>}</span></span>\"</span>\n\n  <span>guest_os_type</span>           <span>=</span> <span>\"Ubuntu_64\"</span>\n  <span>hard_drive_interface</span>    <span>=</span> <span>\"sata\"</span>\n  <span>ssh_wait_timeout</span>        <span>=</span> <span>\"15m\"</span>\n  <span>boot_wait</span>               <span>=</span> <span>\"5s\"</span>\n<span>}</span>\n\n<span>locals</span> <span>{</span>\n  <span>ubuntu_2010_dl_folder</span>        <span>=</span> <span>\"http://cdimage.ubuntu.com/ubuntu/releases/18.04/release/\"</span>\n  <span>ubuntu_2010_iso_url</span>          <span>=</span> <span>\"<span><span>$</span><span>{</span><span>local</span><span>.</span><span>ubuntu_2010_dl_folder</span><span>}</span></span>ubuntu-18.04.5-server-amd64.iso\"</span>\n  <span>ubuntu_2010_iso_checksum_url</span> <span>=</span> <span>\"<span><span>$</span><span>{</span><span>local</span><span>.</span><span>ubuntu_2010_dl_folder</span><span>}</span></span>SHA256SUMS\"</span>\n\n  <span>builds</span> <span>=</span> <span>{</span>\n    <span>consul</span> <span>=</span> <span>{</span>\n      <span>user</span> <span>=</span> <span>{</span>\n        <span>id</span>       <span>=</span> <span>1000</span>\n        <span>name</span>     <span>=</span> <span>\"bob\"</span>\n        <span>password</span> <span>=</span> <span>\"s3cr2t\"</span>\n      <span>}</span>\n      <span>installs</span> <span>=</span> <span>[</span><span>\"consul\"</span><span>]</span>\n    <span>}</span>\n    <span>nomad</span> <span>=</span> <span>{</span>\n      <span>user</span> <span>=</span> <span>{</span>\n        <span>id</span>       <span>=</span> <span>1000</span>\n        <span>name</span>     <span>=</span> <span>\"bob\"</span>\n        <span>password</span> <span>=</span> <span>\"s3cr2t\"</span>\n      <span>}</span>\n      <span>installs</span> <span>=</span> <span>[</span><span>\"nomad\"</span><span>]</span>\n    <span>}</span>\n  <span>}</span>\n<span>}</span>\n\n<span>build</span> <span>{</span>\n  <span>name</span> <span>=</span> <span>\"ubuntu\"</span>\n  <span>description</span> <span>=</span> <span>&lt;&lt;EOF\nThis build creates images for :\n* Ubuntu 18.04\nFor the following builders :\n* virtualbox-iso\nIt will create base images with:\n* Nomad\n* Consul\nEOF</span>\n\n  dynamic <span>\"source\"</span> <span>{</span>\n    <span>for_each</span> <span>=</span> local.builds\n\n    <span>labels</span>   <span>=</span> <span>[</span><span>\"source.virtualbox-iso.base-ubuntu-amd64\"</span><span>]</span>\n    <span>content</span> <span>{</span>\n      <span>name</span>                    <span>=</span> source.key\n\n      <span>ssh_username</span>            <span>=</span> source.value.user.name\n      <span>ssh_password</span>            <span>=</span> source.value.user.password\n      <span>shutdown_command</span>        <span>=</span> <span>\"echo '<span><span>$</span><span>{</span>source<span>.</span>value<span>.</span>user<span>.</span>password<span>}</span></span>' | sudo -S shutdown -P now\"</span>\n\n      <span>http_content</span>            <span>=</span> <span>{</span>\n        <span>\"/preseed.cfg\"</span> <span>=</span> templatefile(<span>\"<span><span>$</span><span>{</span><span>path</span><span>.</span><span>root</span><span>}</span></span>/preseed.pkrtpl\"</span>, source.value)\n      <span>}</span>\n\n      <span>boot_command</span>     <span>=</span> <span>[</span>\n        <span>\"&lt;esc&gt;&lt;wait&gt;\"</span>,\n        <span>\"&lt;esc&gt;&lt;wait&gt;\"</span>,\n        <span>\"&lt;enter&gt;&lt;wait&gt;&lt;wait&gt;\"</span>,\n        <span>\"/install/vmlinuz&lt;wait&gt;\"</span>,\n        <span>\" auto&lt;wait&gt;\"</span>,\n        <span>\" console-setup/ask_detect=false&lt;wait&gt;\"</span>,\n        <span>\" console-setup/layoutcode=us&lt;wait&gt;\"</span>,\n        <span>\" console-setup/modelcode=pc105&lt;wait&gt;\"</span>,\n        <span>\" debconf/frontend=noninteractive&lt;wait&gt;\"</span>,\n        <span>\" debian-installer=en_US.UTF-8&lt;wait&gt;\"</span>,\n        <span>\" fb=false&lt;wait&gt;\"</span>,\n        <span>\" initrd=/install/initrd.gz&lt;wait&gt;\"</span>,\n        <span>\" kbd-chooser/method=us&lt;wait&gt;\"</span>,\n        <span>\" keyboard-configuration/layout=USA&lt;wait&gt;\"</span>,\n        <span>\" keyboard-configuration/variant=USA&lt;wait&gt;\"</span>,\n        <span>\" locale=en_US.UTF-8&lt;wait&gt;\"</span>,\n        <span>\" netcfg/get_domain=vm&lt;wait&gt;\"</span>,\n        <span>\" netcfg/get_hostname=vagrant&lt;wait&gt;\"</span>,\n        <span>\" grub-installer/bootdev=/dev/sda&lt;wait&gt;\"</span>,\n        <span>\" noapic&lt;wait&gt;\"</span>,\n        <span>\" preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg&lt;wait&gt;\"</span>,\n        <span>\" -- &lt;wait&gt;\"</span>,\n        <span>\"&lt;enter&gt;&lt;wait&gt;\"</span>\n      <span>]</span>\n      <span>output_directory</span> <span>=</span> <span>\"virtualbox_iso_ubuntu_2010_amd64_<span><span>$</span><span>{</span>source<span>.</span>key<span>}</span></span>\"</span>\n    <span>}</span>\n  <span>}</span>\n\n  <span>provisioner<span> \"shell\" </span></span><span>{</span>\n    <span>environment_vars</span>  <span>=</span> <span>[</span> <span>\"HOME_DIR=/home/vagrant\"</span> <span>]</span>\n    <span>execute_command</span>   <span>=</span> <span>\"echo '<span><span>$</span><span>{</span><span>local</span><span>.</span><span>builds</span><span>[</span>source<span>.</span>name<span>]</span><span>.</span>user<span>.</span>password<span>}</span></span>' | {{.Vars}} sudo -S -E sh -eux '{{.Path}}'\"</span>\n    <span>expect_disconnect</span> <span>=</span> <span>true</span>\n    <span>inline</span>            <span>=</span> <span>[</span>\n      <span>\"echo hello from the <span><span>$</span><span>{</span>source<span>.</span>name<span>}</span></span> image\"</span>,\n      <span>\"<span><span>$</span><span>{</span>source<span>.</span>name<span>}</span></span> version\"</span>\n    <span>]</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><p>Now we can see that this has made it easier to maintain a preseed project. Pretty cool, right? Effectively, the <code>templatefile</code> function can be used in other scenarios, same for the http_content option. We could extend this by skipping the template file and setting everything from the map:</p>\n<pre><code><span>[</span>...<span>]</span>\n<span>http_content</span> <span>=</span> <span>{</span>\n  <span>\"/preseed.cfg\"</span> <span>=</span> &lt;<span>&lt;&lt;EOF\nd-i apt-setup/universe boolean true\nd-i pkgsel/include string openssh-server cryptsetup build-essential libssl-dev libreadline-dev zlib1g-dev linux-source dkms nfs-common linux-headers-$(uname -r) perl cifs-utils software-properties-common rsync ifupdown consul\n...\nEOF</span>\n<span>}</span>\n</code></pre><h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>For more information on Packer’s recent additions, review Packer's <a href=\"https://github.com/hashicorp/packer/blob/master/CHANGELOG.md\">changelog</a>. Lastly, if you have any issues, do not hesitate to <a href=\"https://github.com/hashicorp/packer/issues\">open an issue</a> in the Packer repository on GitHub.</p>","author":"Adrien Delorme","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"acfb50116e1b849e2c4ecb976d47124623d70ae112b02f87a76389f5bf19a6ca","category":"Tech"}
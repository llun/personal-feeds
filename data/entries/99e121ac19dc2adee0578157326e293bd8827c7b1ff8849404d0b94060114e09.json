{"title":"Amazon CodeGuru Reviewer Updates: New Java Detectors and CI/CD Integration with GitHub Actions","link":"https://aws.amazon.com/blogs/aws/amazon_codeguru_reviewer_updates_new_java_detectors_and_cicd_integration_with_github_actions/","date":1624556126000,"content":"<p><span>Amazon CodeGuru</span> allows you to automate code reviews and improve code quality, and thanks to the <a href=\"https://aws.amazon.com/blogs/aws/amazon-codeguru-reviewer-updates-new-pricing-model-and-python-support-in-ga/\">new pricing model announced in April</a> you can get started with a lower and fixed monthly rate based on the size of your repository (up to 90% less expensive). <span>CodeGuru Reviewer</span> helps you detect potential defects and bugs that are hard to find in your Java and Python applications, using the <span>AWS Management Console</span>, <span>AWS SDKs</span>, and AWS <span>CLI</span>.</p> \n<p>Today, I’m happy to announce that <span>CodeGuru Reviewer</span> natively integrates with the tools that you use every day to package and deploy your code. This new CI/CD experience allows you to trigger code quality and security analysis as a step in your build process using GitHub Actions.</p> \n<p>Although the <span>CodeGuru Reviewer</span> console still serves as an analysis hub for all your onboarded repositories, the new CI/CD experience allows you to integrate <span>CodeGuru Reviewer</span> more deeply with your favorite source code management and CI/CD tools.</p> \n<p>And that’s not all! Today we’re also releasing 20 new security detectors for Java to help you identify even more issues related to security and AWS best practices.</p> \n<p><span><strong>A New CI/CD Experience for <span>CodeGuru Reviewer</span></strong></span><br /> As a developer or development team, you push new code every day and want to identify security vulnerabilities early in the development cycle, ideally at every push. During a pull-request (PR) review, all the CodeGuru recommendations will appear as a comment, as if you had another pair of eyes on the PR. These comments include useful links to help you resolve the problem.</p> \n<p>When you push new code or schedule a code review, recommendations will appear in the <em><strong>Security &gt; Code scanning alerts</strong></em> tab on GitHub.</p> \n<p>Let’s see how to integrate <span>CodeGuru Reviewer</span> with GitHub Actions.</p> \n<p>First of all, create a .yml file in your repository under .github/workflows/ (or update an existing action). This file will contain all your actions’ step. Let’s go through the individual steps.</p> \n<p>The first step is configuring your AWS credentials. You want to do this securely, without storing any credentials in your repository’s code, using the <a href=\"https://github.com/aws-actions/configure-aws-credentials\">Configure AWS Credentials action</a>. This action allows you to configure an IAM role that GitHub will use to interact with AWS services. This role will require a few permissions related to <span>CodeGuru Reviewer</span> and Amazon S3. You can attach the <code>AmazonCodeGuruReviewerFullAccess</code> managed policy to the action role, in addition to <code>s3:GetObject</code>, <code>s3:PutObject</code> and <code>s3:ListBucket</code>.</p> \n<p>This first step will look as follows:</p> \n<pre><code>- name: Configure AWS Credentials\n  uses: aws-actions/configure-aws-credentials@v1\n  with:\n    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    aws-region: eu-west-1\n</code></pre> \n<p>These access key and secret key correspond to your IAM role and will be used to interact with <span>CodeGuru Reviewer</span> and Amazon S3.</p> \n<p>Next, you add the <span>CodeGuru Reviewer</span> action and a final step to upload the results:</p> \n<pre><code>- name: Amazon CodeGuru Reviewer Scanner\n  uses: aws-actions/codeguru-reviewer\n  if: ${{ always() }} \n  with:\n    build_path: target # build artifact(s) directory\n    s3_bucket: 'codeguru-reviewer-myactions-bucket'  # S3 Bucket starting with \"codeguru-reviewer-*\"\n- name: Upload review result\n  if: ${{ always() }}\n  uses: github/codeql-action/upload-sarif@v1\n  with:\n    sarif_file: codeguru-results.sarif.json</code></pre> \n<p>The <span>CodeGuru Reviewer</span> action requires two input parameters:</p> \n<ul> \n <li><em><strong>build_path</strong></em>: Where your build artifacts are in the repository.</li> \n <li><em><strong>s3_bucket:</strong></em> The name of an S3 bucket that you’ve created previously, used to upload the build artifacts and analysis results. It’s a customer-owned bucket so you have full control over access and permissions, in case you need to share its content with other systems.</li> \n</ul> \n<p>Now, let’s put all the pieces together.</p> \n<p>Your .yml file should look like this:</p> \n<pre><code>name: CodeGuru Reviewer GitHub Actions Integration\non: [pull_request, push, schedule]\njobs:\n  CodeGuru-Reviewer-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-2\n\t  - name: Amazon CodeGuru Reviewer Scanner\n        uses: aws-actions/codeguru-reviewer\n        if: ${{ always() }} \n        with:\n          build_path: target # build artifact(s) directory\n          s3_bucket: 'codeguru-reviewer-myactions-bucket'  # S3 Bucket starting with \"codeguru-reviewer-*\"\n      - name: Upload review result\n        if: ${{ always() }}\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: codeguru-results.sarif.json\n</code></pre> \n<p>It’s important to remember that the S3 bucket name needs to start with <code>codeguru_reviewer-</code> and that these actions can be configured to run with the <em><strong>pull_request</strong></em>, <em><strong>push</strong></em>, or <em><strong>schedule</strong></em> triggers (check out the <a href=\"https://docs.github.com/en/actions/reference/events-that-trigger-workflows\">GitHub Actions documentation for the full list of events that trigger workflows</a>). Also keep in mind that there are minor differences in how you configure GitHub-hosted runners and self-hosted runners, mainly in the credentials configuration step. For example, if you run your GitHub Actions in a self-hosted runner that already has access to AWS credentials, such as an EC2 instance, then you don’t need to provide any credentials to this action (check out the <a href=\"https://github.com/aws-actions/configure-aws-credentials#self-hosted-runners\">full documentation for self-hosted runners</a>).</p> \n<p>Now when you push a change or open a PR <span>CodeGuru Reviewer</span> will comment on your code changes with a few recommendations.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/16/amazon-codeguru-cicd-1024x557.png\" /></p> \n<p>Or you can schedule a daily or weekly repository scan and check out the recommendations in the <strong>Security &gt; Code scanning alerts</strong> tab.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/23/codeguru-cicd-security-github-1024x452.png\" /></p> \n<p><span><strong>New Security Detectors for Java</strong></span><br /> In December last year, we launched the <a href=\"https://aws.amazon.com/blogs/devops/tightening-application-security-with-amazon-codeguru/\">Java Security Detectors</a> for <span>CodeGuru Reviewer</span> to help you find and remediate potential security issues in your Java applications. These detectors are built with machine learning and automated reasoning techniques, trained on over 100,000 Amazon and open-source code repositories, and based on the decades of expertise of the AWS Application Security (AppSec) team.</p> \n<p>For example, some of these detectors will look at potential leaks of sensitive information or credentials through excessively verbose logging, exception handling, and storing passwords in plaintext in memory. The security detectors also help you identify several web application vulnerabilities such as command injection, weak cryptography, weak hashing, LDAP injection, path traversal, secure cookie flag, SQL injection, XPATH injection, and XSS (cross-site scripting).</p> \n<p>The new security detectors for Java can identify security issues with the Java Servlet APIs and web frameworks such as Spring. Some of the new detectors will also help you with security best practices for AWS APIs when using services such as Amazon S3, <span>IAM</span>, and AWS Lambda, as well as libraries and utilities such as Apache ActiveMQ, LDAP servers, SAML parsers, and password encoders.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/23/codeguru-java-security-detectors-1024x511.png\" /></p> \n<p><span><strong>Available Today at No Additional Cost</strong></span><br /> The new CI/CD integration and security detectors for Java are available today at no additional cost, excluding the storage on S3 which can be estimated based on size of your build artifacts and the frequency of code reviews. Check out the <a href=\"https://github.com/marketplace/actions/codeguru-reviewer\">CodeGuru Reviewer Action in the GitHub Marketplace</a> and the <span>Amazon CodeGuru</span> <a href=\"https://aws.amazon.com/codeguru/pricing/\">pricing page</a> to find pricing examples based on the new pricing model we launched last month.</p> \n<p>We’re looking forward to hearing your feedback, launching more detectors to help you identify potential issues, and integrating with even more CI/CD tools in the future.</p> \n<p><a href=\"https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/working-with-cicd.html\">You can learn more about the CI/CD experience and configuration in the technical documentation.</a></p> \n<p>— <a href=\"https://twitter.com/alex_casalboni\">Alex</a></p>","author":"Alex Casalboni","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"99e121ac19dc2adee0578157326e293bd8827c7b1ff8849404d0b94060114e09","category":"Tech"}
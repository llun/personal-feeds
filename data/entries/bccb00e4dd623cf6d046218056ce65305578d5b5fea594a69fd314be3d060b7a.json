{"title":"Announcing General Availability of Consul-Terraform-Sync 0.2","link":"https://www.hashicorp.com/blog/announcing-general-availability-of-consul-terraform-sync-0-2","date":1624388400000,"content":"<p>We are pleased to announce general availability of Consul-Terraform-Sync (CTS) 0.2. This release further enhances CTS’s capabilities, helping users better manage Day 2+ operations and eliminating the need for manual ticket-based systems. In this blog we will highlight the new features that are available for download on our release page.</p>\n<h2><a href=\"#task-run-conditions\">»</a><a></a>Task Run Conditions</h2>\n<p>Tasks are the heart of Consul-Terraform-Sync’s automation capabilities. Operators define tasks (address group updates, load balancer pool changes, etc.) in their CTS configurations. When Consul detects a change to the services defined within the task, CTS triggers the appropriate Terraform run to apply the changes. However, there are times when users may not want the run to trigger until certain other conditions have been met. For example a user might prefer to have a task run once all service instances have been deregistered from Consul’s catalog so only one Terraform run is needed to clean up the environment. CTS 0.2 enables this functionality through a feature called task run conditions.</p>\n<p>With task run conditions, users can specify certain events that need to occur prior to the task being executed. Conditions include tasks running only when:</p>\n<ul>\n<li>The first instance of a service is registered</li>\n<li>All service instances have been deregistered</li>\n</ul>\n<p>The default setting for CTS will remain that all tasks run on every service change. Users must specify the conditions in order to change this behavior. Details about this feature can be found <a href=\"https://www.consul.io/docs/nia/tasks#catalog-services-condition\">here</a>.</p><pre><code>Task {\n  name = “catalog_service_condition_task”\n  source = “path/to/catalog-service-module”\n  providers = [“my-provider”]\n  services = [“web-api”]\n\n  condition “catalog-service” {\n    datacenter\t\t\t= “dc1”\n    regexp\t\t\t= “web.*”\n    source_includes_var\t= false\n    }\n}</code></pre><h2><a href=\"#enhanced-service-filtering\">»</a><a></a>Enhanced Service Filtering</h2>\n<p>Consul catalog can scale to a massive number of services. In many cases, users would want to trigger infrastructure automation only for services that match a certain criteria in the Consul catalog. For example, a user might prefer to update the load balancer pool only for services that have <code>production</code> and <code>external</code> tags.</p><pre><code>service {\n  name = “web”\n  filter = “\\”production\\” in Service.Tags and \\”external\\” in Service.Tags”</code></pre><p>Enhanced service filtering allows CTS users to filter services based on values in other fields in addition to service tags. This feature also allows users to filter based on <a href=\"https://www.terraform.io/docs/language/expressions/strings.html#heredoc-strings\">heredoc</a> format.</p>\n<h2><a href=\"#hashicorp-linux-repos-and-homebrew-tap\">»</a><a></a>HashiCorp Linux Repos and Homebrew Tap</h2>\n<p>CTS is now part of HashiCorp’s official Linux repository, a source of Debian and RPM packages for HashiCorp products. The Debian and RPM package for CTS currently targets popular x86_64/amd64 systemd systems and supports many versions of Debian, Ubuntu, Fedora, CentOS, RHEL, and AmazonLinux. In addition to being a part of the Linux repository, you can also easily and securely install CTS using the popular macOS-based package manager: <a href=\"https://brew.sh/\">Homebrew</a>. This will provide you with a smoother experience getting up and running quickly with CTS regardless of the platform you are running.</p>\n<h2><a href=\"#citrix-integration\">»</a><a></a>Citrix Integration</h2>\n<p>We recently had Citrix join the HashiCorp Partner Program and launched a new <a href=\"https://registry.terraform.io/modules/citrix/servicegroup-consul-sync-nia/citrixadc/latest\">CTS module for Citrix ADC</a>. This module enables users to automatically create, update, and delete Service groups. Using this module, CTS will create a <code>servicegroup</code> for each service and then bind to its <code>servicemembers</code> according to the number of instances for each service as sourced from the<a href=\"https://www.consul.io/\"> Consul service discovery</a>. Once deployed, the <code>servicegroups</code> will remain in sync with the services sourced from Consul. When adding, deleting, or modifying services in Consul, CTS will apply the changes to the <code>servicegroups</code> and its servicemembers reflecting these changes.</p>\n<h2><a href=\"#terraform-0-15-integration\">»</a><a></a>Terraform 0.15 Integration</h2>\n<p>Users can now configure Consul-Terraform-Sync to download Terraform 0.15 upon installation. While this adds some new functionality, it’s important to note this update introduces some potential breaking changes for users, depending on how they have previously configured CTS or if they have built their own custom modules and are planning to upgrade CTS to Terraform 0.15. For a more detailed explanation of the changes, please refer to <a href=\"https://github.com/hashicorp/consul-terraform-sync/pull/277\">these notes</a>.</p>\n<p>We are excited to see the continued improvements on Consul-Terraform-Sync. For more information about CTS, please visit our documentation. Consul-Terraform-Sync 0.2 is <a href=\"https://github.com/hashicorp/consul-terraform-sync/blob/master/CHANGELOG.md\">available now for download</a>.</p>","author":"Devarshi Shah","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"bccb00e4dd623cf6d046218056ce65305578d5b5fea594a69fd314be3d060b7a","category":"Tech"}
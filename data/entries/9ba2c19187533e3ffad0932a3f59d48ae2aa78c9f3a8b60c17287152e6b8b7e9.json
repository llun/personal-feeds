{"title":"Transparent Proxy on Consul Service Mesh","link":"https://www.hashicorp.com/blog/transparent-proxy-on-consul-service-mesh","date":1625169600000,"content":"<p><a href=\"https://www.consul.io/docs/connect/transparent-proxy\">Transparent proxy</a>, a new feature in Consul 1.10, provides an easier onboarding experience for deploying applications with Consul service mesh on Kubernetes. With transparent proxy, traffic is automatically redirected from a service within the application to the service's sidecar proxy. Previously, application owners needed to make slight modifications to their applications to explicitly dial the sidecar proxy deployed alongside the application. This enabled these applications to communicate to other services within the mesh.</p>\n<p>Transparent proxy ensures that both inbound and outbound application traffic is directed through the proxy by capturing and redirecting traffic to the Envoy sidecar, which then proxies the connection to its appropriate destination. This eliminates the need to modify an application to communicate through a proxy and removes the need for defining application upstreams, allowing the user to quickly realize the benefits of using a service mesh.</p>\n<h2><a href=\"#overview\">»</a><a></a>Overview</h2>\n<p>Utilizing transparent proxy with a securely configured service mesh ensures that application communication is encrypted. When properly enabled, mTLS is enforced and authorization policies, such as <a href=\"https://www.consul.io/docs/connect/config-entries/service-intentions\">service intentions</a>, are used to control access to services and access to the types of requests allowed.</p>\n<p>Before transparent proxying, the upstreams for service to service communication needed to be explicitly declared via annotations, for example, <code>consul.hashicorp.com/connect-service-upstreams: api:1234.</code> These annotations would configure the local Envoy proxy with a listener at <code>localhost:1234</code> that forwards traffic to the <code>api</code> service. The service would then have to explicitly use <code>localhost:1234</code> whenever addressing the <code>api</code> service.</p>\n<p>In Kubernetes, services commonly communicate to each other using hostnames resolvable by Kubernetes DNS (KubeDNS). A Kubernetes service named <code>web</code> can talk to a Kubernetes service named <code>api</code> using the hostname <code>api.svc.cluster.local</code>. To enable this, each service is given a unique, virtual IP that’s routable within the Kubernetes cluster called a clusterIP, that is tied to the Kubernetes Service.</p>\n<p>With Consul 1.10, services using transparent proxy utilize the Kubernetes DNS hostnames will now have their traffic routed natively within the mesh. Let’s walk through the proposed datapath in an example:</p>\n<ul>\n<li>Service <code>web</code> is making a request to Service <code>api</code>, using the KubeDNS address.\n<ul>\n<li>Service <code>web</code> <code>------ api.svc.cluster.local ---&gt;</code> Service <code>api</code></li>\n</ul>\n</li>\n<li>Service <code>web</code>: In the application’s request, the DNS lookup for <code>api.svc.cluster.local</code> returns 10.20.30.40, so the application connects to 10.20.30.40.</li>\n<li>Service <code>web</code> Pod: Iptables rules in the Pod sees outbound traffic from the application, and redirects it to the Envoy sidecar’s port for outbound traffic. (See <a href=\"https://www.consul.io/commands/connect/redirect-traffic\">Consul Connect Redirect Traffic</a> for more details)</li>\n<li>Service <code>web</code> Envoy: The Envoy sidecar configuration for service <code>web</code> has the following <code>filter_chain </code>on its outbound listener to match the outbound traffic based on the packet’s destination IP, to tell it which Envoy cluster (Service <code>api</code>’s Envoy cluster) to direct the traffic to. This will send the traffic to a Pod for Service <code>api</code>.</li>\n</ul><pre><code>    {\n     \"filter_chain_match\": {\n      \"prefix_ranges\": [\n       {\n        \"address_prefix\": \"10.244.0.38\", # Service api Pod IP\n        \"prefix_len\": 32\n       },\n       {\n        \"address_prefix\": \"10.97.110.136\", # Service api cluster IP\n        \"prefix_len\": 32\n       }\n      ]\n     },\n     \"filters\": [ # If traffic matches above IPs, this filter will run\n      {\n       \"name\": \"envoy.filters.network.tcp_proxy\",\n       \"typed_config\": {\n        \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy\",\n        \"stat_prefix\": \"upstream.api.default.dc1\",\n\t# This filter sends traffic to the Envoy cluster for service api\n        \"cluster\": \"api.default.dc1.internal.83d7967b-7b3f-4637-7dfb-dab835242cb4.consul\"\n       }\n      }\n     ]\n },</code></pre><ul>\n<li>\n<p>Service <code>api</code> Pod: Iptables rules in the Pod see inbound traffic for service <code>api</code> and redirect it to the Envoy sidecar’s port for inbound traffic.</p>\n</li>\n<li>\n<p>Service <code>api</code>: Receives the request from Service <code>web</code>. The request was successfully transparently proxied securely through the mesh.</p>\n</li>\n</ul>\n<p>For virtual machines, the <a href=\"https://www.consul.io/commands/connect/redirect-traffic#using-registered-proxy-configuration\"><code>consul connect redirect-traffic</code></a> command can be utilized to configure traffic redirection through an inbound and outbound listener on the Envoy proxy. In addition, to communicate with upstream service instances on virtual machines, a service could either connect to the IP addresses of other service instances directly (via the <a href=\"https://www.consul.io/docs/connect/config-entries/service-defaults#dialeddirectly\">DialedDirectly</a> in the Service Defaults configuration entry) or utilize a pre-configured virtual IP configured as a <code>virtual</code> tagged addresses on the sidecar service registration, which will allow Consul to load balance traffic across the available upstream service instances.</p>\n<h2><a href=\"#configuration\">»</a><a></a>Configuration</h2>\n<p>Transparent Proxy is enabled by default within Consul on Kubernetes starting with Consul 1.10 and Consul Helm 0.32.0. Users can optionally control Transparent Proxy globally via the Helm stanza below:</p><pre><code>connectInject:\n  transparentProxy:\n    defaultEnabled: true</code></pre><p>In addition, users can opt-in services to utilize transparent proxy on a per-service basis via the Kubernetes annotation <code>consul.hashicorp.com/transparent-proxy: true</code>. If transparent proxy is not disabled globally, then only the <code>connect-inject</code> annotation will need to be enabled on the pod to utilize transparent proxy.</p><pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: static-server\nspec:\n  selector:\n    app: static-server\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: static-server\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: static-server\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: static-server\n  template:\n    metadata:\n      name: static-server\n      labels:\n        app: static-server\n      annotations:\n        'consul.hashicorp.com/connect-inject': 'true'\n        # ‘consul.hashicorp.com/transparent-proxy’: ‘true’ - only required if \n        #     Transparent Proxy is disabled as a global setting\n    spec:\n      containers:\n        # This name will be the service name in Consul.\n        - name: static-server\n          image: hashicorp/http-echo:latest\n          args:\n            - -text=\"hello world\"\n            - -listen=:8080\n          ports:\n            - containerPort: 8080\n              name: http\n        # If ACLs are enabled, the serviceAccountName must match the Consul service name.\n      serviceAccountName: static-server\n</code></pre><p>After a service has been deployed, you can use an intention to define which upstream service it should communicate to. A <code><a href=\"https://www.consul.io/docs/k8s/connect#consul-hashicorp-com-connect-service-upstreams\">consul.hashicorp.com/connect-service-upstreams annotation</a></code> is no longer required to define the upstream service, as the upstream service is now inferred directly from the Consul Service Intention:</p><pre><code>apiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n name: client-to-server\nspec:\n destination:\n   name: static-server\n sources:\n   - name: static-client\n     action: allow</code></pre><h2><a href=\"#controlling-communication-to-third-party-services\">»</a><a></a>Controlling Communication to Third-Party Services</h2>\n<p>By default, Consul’s transparent proxy allows services to connect to any external service, and Envoy will act as a pass-through proxy for services outside the mesh. This allows users to install Consul and enable transparent proxying without breaking connectivity to external services. Using transparent proxy in conjunction with <a href=\"https://learn.hashicorp.com/tutorials/consul/service-mesh-terminating-gateways\">terminating gateways</a> and service intentions, traffic can also be forced to egress through terminating gateways, ensuring to secure communication with services outside the network.</p>\n<p>Alternatively, if third-party external service communication is not allowed due to internal policy, users can also disable this pass-through mode on the entire Consul datacenter using a <code>mesh</code> custom resource definition (CRD), which was also introduced in Consul 1.10. Users can now utilize a <code>meshDestinationsOnly</code> option to configure sidecar proxies operating in transparent mode to proxy traffic to only services registered within the mesh.</p><pre><code>apiVersion: consul.hashicorp.com/v1alpha1\n kind: Mesh\n metadata:\n   name: mesh\n spec:\n   transparentProxy:\n     meshDestinationsOnly: true</code></pre><h2><a href=\"#headless-services\">»</a><a></a>Headless Services</h2>\n<p>Headless services in Kubernetes represent services that do not have an allocated ClusterIP set within a Kubernetes service resource. The use case for headless services arises when a user needs to communicate with all individual pods in a service (such as stateful set database deployment) directly as opposed to load balancing traffic over a single IP. A user can now define whether a specific service should be dialed directly via the Service Defaults CRD, or configure this for all services within a Consul namespace via the Proxy Defaults CRD.</p><pre><code>apiVersion: consul.hashicorp.com/v1alpha1\n kind: ServiceDefaults\n metadata:\n   name: counting\n   namespace: product\n spec:\n   transparentProxy: \n     dialedDirectly: true</code></pre><h2><a href=\"#traffic-exclusion-and-overwriting-health-probes\">»</a><a></a>Traffic Exclusion and Overwriting Health Probes</h2>\n<p>Transparent proxy for Consul also provides features that allow for exempting additional traffic from redirection. One example of utilizing transparent proxy with traffic redirection exemption involves deploying ingress controllers on Kubernetes and using sidecars to facilitate direct communication with a service mesh. Previously, ingress controllers required a direct integration with Consul to communicate securely with services in the mesh.</p>\n<p>Consul now supports the following annotations to define the types of traffic that should be exempted from traffic redirection:</p>\n<ul>\n<li>\n<a></a>\n<a href=\"#consul-hashicorp-com-transparent-proxy-exclude-inbound-ports\"><code>consul.hashicorp.com/transparent-proxy-exclude-inbound-ports</code></a>: Provides the ability to exclude a list of ports for inbound traffic that the service exposes from redirection</li>\n<li>\n<a></a>\n<a href=\"#consul-hashicorp-com-transparent-proxy-exclude-outbound-ports\"><code>consul.hashicorp.com/transparent-proxy-exclude-outbound-ports</code></a>: Provides the ability to exclude a list of ports for outbound traffic that the service exposes from redirection.</li>\n<li>\n<a></a>\n<a href=\"#consul-hashicorp-com-transparent-proxy-exclude-outbound-cidrs\"><code>consul.hashicorp.com/transparent-proxy-exclude-outbound-cidrs</code></a>: Provides the ability to exclude a CIDR that the service communicates with for outbound requests from redirection.</li>\n<li>\n<a></a>\n<a href=\"#consul-hashicorp-com-transparent-proxy-overwrite-probes\"><code>consul.hashicorp.com/transparent-proxy-overwrite-probes</code></a> (default: true): Provides the ability to overwrite HTTP health probes of a container to point them to Envoy. This allows Pods that have health probes — such as liveness and readiness probes — to still function even if traffic redirection is enabled.</li>\n</ul>\n<h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>Transparent proxy enables applications to be more easily deployed into the service mesh, and provides better controls to manage communication with applications inside or outside the service mesh.</p>\n<p>For more information about transparent proxy within Consul, please visit our <a href=\"https://www.consul.io/docs/connect/transparent-proxy\">documentation</a> for Transparent Proxy. Learn more about the Consul 1.10 release in the Consul 1.10 <a href=\"https://www.hashicorp.com/blog/announcing-consul-1-10\">announcement blog</a>. To get started with Consul 1.10, follow the <a href=\"https://learn.hashicorp.com/tutorials/consul/kubernetes-deployment-guide?in=consul/kubernetes-production\">Consul Kubernetes Deployment Guide</a> on HashiCorp Learn for installing Consul on Kubernetes, or the <a href=\"https://learn.hashicorp.com/tutorials/consul/get-started-install?in=consul/getting-started\">Install Consul guide</a> for installing Consul on VMs.</p>","author":"David Yu","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9ba2c19187533e3ffad0932a3f59d48ae2aa78c9f3a8b60c17287152e6b8b7e9","category":"Tech"}
{"title":"New WebKit Features in Safari 14.1","link":"https://webkit.org/blog/11648/new-webkit-features-in-safari-14-1/","date":1619712041000,"content":"<p>Safari 14.1 for macOS Big Sur, iPadOS 14.5, and iOS 14.5 brings new WebKit features, APIs, performance improvements, and improved compatibility for web developers. Take a look.</p>\n<h2>Flexbox Gap Support</h2>\n<p>Safari 14.1 now supports the <code>gap</code> property inside Flexbox containers, along with  <code>row-gap</code> and <code>column-gap</code>. Gaps in Flexbox make it possible for web developers to create space between Flex items without resorting to annoying margin hacks.</p>\n<p>The <code>gap</code> property, of course, has worked inside Grid containers since Safari 12. Because <code>gap</code> is supported for Grid, testing support for the property in a Flexbox formatting context wasn’t possible by using feature queries (<code>@supports</code>). By adding support for <code>gap</code> in Flexbox, Safari brings the web closer to widespread compatibility.</p>\n<figure>\n<div>\n<div>\n    </div>\n<div>\n    </div>\n<div>\n    </div>\n</div>\n<p><br />\n</p></figure>\n<p>For more information, see the “flex containers” definition in the “Row and Column Gutters” section of the <a href=\"https://drafts.csswg.org/css-align/#gap-flex\">CSS Box Alignment specification</a>.</p>\n<h2>Date &amp; Time Inputs on macOS</h2>\n<p>In HTML, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date\">date</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time\">time</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local\">datetime-local</a> attributes for the input element prompt the browser to create date and/or time controls — an interface that’s designed to let the user easily enter a time or a date, usually with a calendar. Safari has supported these input fields on iOS since 2012. Now with Safari 14.1, these fields are supported on macOS as well.</p>\n<figure><img src=\"https://webkit.org/wp-content/uploads/date-time-inputs-light.jpg\" /></figure>\n<h2>CSS Individual Transform Properties</h2>\n<p>With WebKit support of Individual Transform Properties, web developers can write CSS rules and keyframe animations in a more straightforward way.</p>\n<p><a href=\"https://caniuse.com/transforms2d\">For years</a>, the transform property has provided the ability to scale, rotate, and translate. You could access this power through code like this:</p>\n<pre><code><span>transform</span>: <span>translate</span>(100<span>px</span>, 100<span>px</span>) <span>rotate</span>(180<span>deg</span>) <span>scale</span>(2);\n</code></pre>\n<p>Now, if you wish, you can instead write:</p>\n<pre><code><span>translate</span>: 100<span>px</span> 100<span>px</span>;\n<span>rotate</span>: 180<span>deg</span>;\n<span>scale</span>: 2;\n</code></pre>\n<p>This is a syntactical and conceptual difference — the result is the same. You might find it easier to understand and remember.</p>\n<p>This syntax also avoids unintentional overrides of other transform-related properties and eliminates pre-computing intermediate values when using keyframe animations.</p>\n<p>You can learn more by reading “<a href=\"https://webkit.org/blog/11420/css-individual-transform-properties/\">CSS Individual Transform Properties</a>” on the WebKit blog.</p>\n<h2>Paint Timing API</h2>\n<p>A valuable metric to improving the performance of web content is the time it takes for the user-agent to show something to the user. WebKit added the Paint Timing API to its suite of performance APIs to provide this measurement. Developers can measure:</p>\n<ul>\n<li><code>first-paint</code> for the time it takes to show pixels of anything that is not the user-agent’s default background</li>\n<li><code>first-contentful-paint</code> to get the time for the user to see content such as text or an image</li>\n</ul>\n<p>To learn more about the API, see the <a href=\"https://w3c.github.io/paint-timing/\">Paint Timing specification</a>.</p>\n<h2>Web Speech API</h2>\n<p>The Web Speech API in WebKit has supported speech synthesis for some time. Now, Safari supports speech recognition powered by the same speech engine as Siri. That means web developers can enjoy the benefits of high-quality transcription for over 50 languages and dialects. Note that users will need Siri enabled in System Preferences on macOS or Settings in iOS or iPadOS for the API to be available to be used.</p>\n<p>For more information on speech recognition and speech synthesis on the web, see the <a href=\"https://wicg.github.io/speech-api/\">Web Speech API specification</a>.</p>\n<h2>Web Audio API</h2>\n<p>As a continuing area of focus, Safari compatibility improvements are ongoing. Updates to the Web Audio API bring it to standards compliance. It is now available unprefixed with support for advanced audio processing via Audio Worklets.</p>\n<p>You can learn more about web audio from the <a href=\"https://www.w3.org/TR/webaudio/\">Web Audio API specification</a>.</p>\n<h2>Interoperability Improvements</h2>\n<p>There are several new interoperability improvements in WebKit:</p>\n<ul>\n<li>Web Animations now work on 122 more properties</li>\n<li>Animation of pseudo-elements beyond <code>::before</code> and <code>::after</code>.</li>\n<li>Improved mouse support on iPadOS and in Catalyst apps, including wheel events and hover/pointer media queries</li>\n</ul>\n<p>Updated wheel Event handling improves performance and interoperability with other browsers. Wheel handlers registered on root objects (window/document/body) with default arguments will be treated as passive. Pages that want to prevent the default handling of Wheel Events which result from gestures like trackpad swipes on macOS, must now call <code>preventDefault()</code> on the first Wheel Event in the sequence.</p>\n<h2>MediaRecorder API</h2>\n<p>WebKit added support for MediaStream Recording, also known as the MediaRecorder API. It allows websites to record audio and video, then encode them using the platform’s available set of default encodings.</p>\n<p>Learn more in the <a href=\"https://w3c.github.io/mediacapture-record/MediaRecorder.html\">MediaStream Recording specification</a>.</p>\n<h2>WebM Support</h2>\n<p>WebKit added improved support for WebM media. With Safari 14, WebKit added support for WebM via MSE on iPadOS and macOS. Now, WebKit on macOS supports WebM files containing VP8 or VP9 video tracks and Vorbis audio tracks. Developers can now offer WebM content to users, though users will enjoy the best quality and power efficiency with h.264 or HEVC.</p>\n<p>See the <a href=\"https://www.webmproject.org/\">WebM Project</a> for details.</p>\n<h2>JavaScript Improvements</h2>\n<h3>Class Fields</h3>\n<p>Updates to the JavaScript engine in WebKit adds new support for private class fields to enforce restrictions for static and instance fields in ES6 classes. Developers that used conventions before can switch to built-in support to manage access to properties and methods. Public static class fields are also available, adding to the previously supported public instance class fields.</p>\n<p>To learn more, see the <a href=\"https://tc39.es/proposal-class-fields/\">public and private instance field proposal</a>.</p>\n<h3>Internationalization API</h3>\n<p>New Internationalization API features include <code>Intl.DisplayNames</code>, <code>Intl.ListFormat</code>, and <code>Intl.Segmenter</code>. <code>Intl.DateTimeFormat</code> was updated to support <code>dateStyle</code> and <code>timeStyle</code> options. The <code>Intl.NumberFormat</code> method was updated with support to display measurement units, notation formats, sign display, and narrow symbol currency formatting.</p>\n<p>For more information on these formatting methods, see the proposals for <a href=\"https://github.com/tc39/proposal-intl-displaynames\"><code>Intl.DisplayNames</code></a>, <a href=\"https://github.com/tc39/proposal-intl-list-format\"><code>Intl.ListFormat</code></a>, <a href=\"https://github.com/tc39/proposal-intl-segmenter\"><code>Intl.Segmenter</code></a>, <a href=\"https://github.com/tc39/proposal-intl-datetime-style\"><code>Intl.DateTimeFormat</code></a>, and <a href=\"https://github.com/tc39/proposal-unified-intl-numberformat\"><code>Intl.NumberFormat</code></a>.</p>\n<h3>WeakRef and FinalizationRegistry</h3>\n<p><a href=\"https://tc39.es/ecma262/#sec-weak-ref-objects\">WeakRef</a> supports holding an object that can be garbage collected when there are no strong references to it. The FinalizationRegistry object compliments WeakRef to manage cleanup tasks when a target object is garbage collected.</p>\n<p>Read more details in the <a href=\"https://tc39.es/proposal-weakrefs/\">WeakRefs proposal</a>.</p>\n<h2>WebAssembly</h2>\n<h3>Threading</h3>\n<p>WebAssembly support, <a href=\"https://webkit.org/blog/7956/new-webkit-features-in-safari-11/\">introduced with Safari 11</a>, is a low-level binary format used as a compilation target for existing languages. In this release, WebKit added WASM threading to support CPU-intensive applications that need to work across CPU threads to preserve application performance.</p>\n<p>For more information, see the WebAssembly Specification for <a href=\"https://webassembly.github.io/threads/core/\">WASM Threads</a>.</p>\n<h3>WebAssembly Sign Extension Operator</h3>\n<p>New sign-extension operator support preserves the number’s sign while extending the number of bits of an integer.</p>\n<p>Learn more in the <a href=\"https://github.com/WebAssembly/sign-extension-ops\">Sign-extension Ops</a> proposal.</p>\n<h3>JavaScript BigInt Integration</h3>\n<p>Support for a new JavaScript API allows bidirectional conversion of a JavaScript BigInt value to a WASM 64-bit integer.</p>\n<p>See the WebAssembly Specification for <a href=\"https://webassembly.github.io/spec/js-api/#tojsvalue\">toJSValue</a>.</p>\n<h2>Private Click Measurement</h2>\n<p>This release features Private Click Measurement – a proposed web standard that enables advertisers to measure the effectiveness of click-through ad campaigns in a privacy-preserving way. This new technology is part of a larger effort to remove cross-site tracking from the web and provide privacy-preserving alternatives where needed.</p>\n<p>See “<a href=\"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/\">Introducing Private Click Measurement, PCM</a>” on the WebKit blog.</p>\n<h2>Storage Access API Updates</h2>\n<p>WebKit has improved the Storage Access API to allow per-page storage access and allow nested iframes to request storage access. These interoperability changes are from the ongoing standardization of the Storage Access API together with Mozilla, Microsoft, and the web community. This API has shipped in Safari since 2018 and is part of a larger effort to remove cross-site tracking from the web and provide privacy-preserving alternatives where needed.</p>\n<p>For details, see “<a href=\"https://webkit.org/blog/11545/updates-to-the-storage-access-api/\">Updates to the Storage Access API</a>” on the WebKit blog.</p>\n<h2>Web Inspector Updates</h2>\n<p>The updates to Web Inspector available in these releases include:</p>\n<ul>\n<li>A new three-panel layout in the Elements Tab brings the Styles sidebar into an independent panel alongside the existing details sidebar.</li>\n<li>The new Font panel gives content authors visibility into details of the fonts used on the page.</li>\n<li>Breakpoints in the Sources Tab can now be configured with conditions or actions, reducing the need for stray <code>console.log</code> statements left in production code.</li>\n</ul>\n<p>To learn more about Web Inspector features, see the <a href=\"https://webkit.org/web-inspector/\">Web Inspector Reference</a> documentation.</p>\n<h2>Availability</h2>\n<p>These improvements are available to users running Safari on iPadOS 14.5, iOS 14.5, or Safari 14.1 on macOS Big Sur (11.3), macOS Catalina, or macOS Mojave. These features were also available to web developers in Safari Technology Preview releases. Changes in this release of Safari were included in the following Safari Technology Preview releases: <a href=\"https://webkit.org/blog/10929/release-notes-for-safari-technology-preview-110/\">110</a>, <a href=\"https://webkit.org/blog/10967/release-notes-for-safari-technology-preview-111/\">111</a>, <a href=\"https://webkit.org/blog/11183/release-notes-for-safari-technology-preview-112/\">112</a>, <a href=\"https://webkit.org/blog/11294/release-notes-for-safari-technology-preview-113/\">113</a>, <a href=\"https://webkit.org/blog/11300/release-notes-for-safari-technology-preview-114/\">114</a>, <a href=\"https://webkit.org/blog/11333/release-notes-for-safari-technology-preview-115/\">115</a>, <a href=\"https://webkit.org/blog/11348/release-notes-for-safari-technology-preview-116/\">116</a>, <a href=\"https://webkit.org/blog/11364/release-notes-for-safari-technology-preview-117/\">117</a>, <a href=\"https://webkit.org/blog/11439/release-notes-for-safari-technology-preview-118/\">118</a>, <a href=\"https://webkit.org/blog/11525/release-notes-for-safari-technology-preview-119/\">119</a>, <a href=\"https://webkit.org/blog/11548/release-notes-for-safari-technology-preview-120/\">120</a>, <a href=\"https://webkit.org/blog/11555/release-notes-for-safari-technology-preview-121/\">121</a>, <a href=\"https://webkit.org/blog/11577/release-notes-for-safari-technology-preview-122/\">122</a>.</p>\n<p><a href=\"https://developer.apple.com/safari/download/\">Download the latest Safari Technology Preview release</a> to stay at the forefront of future web platform and Web Inspector features. You can also use the <a href=\"https://webkit.org/status\">WebKit Feature Status</a> page to watch for changes to web platform features you’re interested in.</p>\n<h2>Feedback</h2>\n<p>If you run into any issues, we welcome your <a href=\"https://bugreport.apple.com/\">bug reports</a> for Safari or <a href=\"https://bugs.webkit.org/\">WebKit bugs</a> for web content issues. Send us a tweet <a href=\"https://twitter.com/webkit\">@webkit</a> to share your thoughts on this release.</p>\n<div>Note that an earlier version of this blog post described updates to Web Share API that are not enabled by default. Additional clarification of WebM support has also been added.</div>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"530cdab5a97812983d43201e4c0991f3e36f7ebf4335759492ef37f0905cfea8","category":"Tech"}
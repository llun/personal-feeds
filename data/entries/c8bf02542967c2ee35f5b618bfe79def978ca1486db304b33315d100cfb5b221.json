{"title":"ว่าด้วยเรื่อง Component Testing ของ Cypress","link":"https://www.somkiat.cc/component-testing-in-cypress/","date":1617896319000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/04/cypress-testing-150x150.jpg\" /></p>\n<p>จากที่คุยเรื่อง Component Testing ของ Cypress ใน alpha version<br />หรือเรียกว่า <strong><a href=\"https://docs.cypress.io/guides/component-testing/introduction\" target=\"_blank\">Cypress Component Testing Library</a></strong><br />พบว่า มีความเข้าใจผิดเรื่องของ <strong>Component testing</strong> นิดหน่อย<br />เพราะว่า ชื่อดันไปเหมือนกับ <strong>Service Component Testing</strong> ใน Microservices อีกด้วย<br />จึงทำการอธิบายไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong><em>ปล. Cypress Component Testing Library</em></strong> <strong><em>สามารถเปลี่ยนแปลงได้อีกมาก</em></strong></p>\n\n\n\n<p><strong>ก่อนอื่น ๆ Component Testing ของ Cypress นั้น</strong></p>\n\n\n\n<p>คือการทดสอบแต่ละ component ที่เราต้องการ<br />ไม่ว่าจะเป็น Component ใน ReactJS, Angular และ VueJS<br /><br />ซึ่งปกติการทดสอบในแต่ละ component<br />จะทดสอบผ่าน test framework/library เช่ร Jest หรือ Mocha<br />รวมทั้งการ render จะใช้ virtual browser แทนคือ JSDom นั่นเอง</p>\n\n\n\n<p><strong>แต่ใน Cypress นั้นจะทดสอบบน browser จริง ๆ ไปเลย</strong><br />ทำให้ง่ายต่อการทดสอบและ debugแสดง<br />ดังรูป</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/04/cypress-testing.jpg\" /></figure>\n\n\n\n<p><strong>การทดสอบแบบนี้ เราสามารถเข้าถึง Component ที่ต้องการได้เลย</strong></p>\n\n\n\n<p>ไม่จำเป็นต้องเข้า URL ใด ๆ<br />เพียงแค่ mount Component ที่ต้องการได้เลย<br />จากภาพ Component ที่สามารถทดสอบได้ด้วย Cypress คือ</p>\n\n\n\n<ul><li>Main component</li><li>Component 1</li><li>Component 2</li></ul>\n\n\n\n[gist id=\"d7a2448dc59b1d750fb2d0cb45408c51\" file=\"1.js\"]\n\n\n\n<p><strong>ส่วนอีกเรื่องคือ Service Component Testing</strong></p>\n\n\n\n<p>ซึ่งมีที่มาจาก <strong><a href=\"https://martinfowler.com/articles/microservice-testing/#testing-component-in-process-diagram\" target=\"_blank\">Microservices Testing</a></strong><br />เป็นการทดสอบในแต่ละ service แยกกันไปเลย<br />แน่นอนว่า มีแนวคิดเดียวกันคือ Isolated component/service testing นั่นเอง<br />ช่วยทำให้เรามั่นใจมากยิ่งขึ้นว่า <br />service หนึ่ง ๆ ของเราทำงานได้ตามที่เราคาดหวัง<br />ด้วยการเข้าตาม URL ที่ต้องการ<br />รวมทั้งมีการจำลองหรือควบคุมการทำงานของ dependency ที่ใช้งาน<br />ยกตัวอย่างเช่น External REST API เป็นต้น</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/04/Screen-Shot-2564-04-08-at-22.14.41.png\" /></figure>\n\n\n\n<p><strong>ดังนั้นถ้าเรามองว่าระบบงานในฝั่งของ Frontend เป็น service หนึ่งของเรา</strong></p>\n\n\n\n<p>แล้วมี dependency ที่ใช้คือ External REST API<br />เราสามารถทดสอบส่วนของ Frontend แบบ <strong>Service Component Testing </strong><br />ด้วยการใช้งาน Cypress ได้เลยด้วยการใช้ <a href=\"https://docs.cypress.io/guides/guides/network-requests#Testing-Strategies\" target=\"_blank\">Intercept network request </a><br />ที่ออกจาก browser ของ Cypress ได้เลย</p>\n\n\n\n[gist id=\"d7a2448dc59b1d750fb2d0cb45408c51\" file=\"2.js\"]\n\n\n\n<p><strong>เพียงเท่านี้เราสามารถทดสอบการทำงานของระบบงาน</strong><br />ได้ตามที่เราต้องการ<br />เพื่อเพิ่มความมั่นใจต่อระบบงานให้มากยิ่งขึ้น</p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"c8bf02542967c2ee35f5b618bfe79def978ca1486db304b33315d100cfb5b221","category":"Thai"}
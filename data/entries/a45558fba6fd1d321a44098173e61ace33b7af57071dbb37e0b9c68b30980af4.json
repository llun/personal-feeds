{"title":"Announcing HashiCorp Nomad 1.1 Beta","link":"https://www.hashicorp.com/blog/announcing-hashicorp-nomad-1-1-beta","date":1620059400000,"content":"<p>We are excited to announce that the beta release of HashiCorp Nomad 1.1 is now available. <a href=\"https://www.nomadproject.io/\">Nomad</a> is a simple and flexible orchestrator used to deploy and manage containers and non-containerized applications across on-premises and cloud environments. Nomad is widely adopted and used in production by organizations such as <a href=\"https://blog.cloudflare.com/how-we-use-hashicorp-nomad/\">Cloudflare</a>, <a href=\"https://www.hashicorp.com/case-studies/roblox\">Roblox</a>, <a href=\"https://www.hashicorp.com/case-studies/q2-software\">Q2</a>, <a href=\"https://www.hashicorp.com/case-studies/pandora\">Pandora</a>, and GitHub.</p>\n<p>Nomad 1.1 delivers more than 10 new features to enable more flexible scheduling and a simplified operator experience. The core Nomad scheduler has been upgraded with new resource control mechanisms to improve cluster efficiency, application performance, and volume management. Enhancements across the UI and API support Nomad’s dedication to a simple and intuitive operator experience. In addition to core Nomad improvements, the Nomad Autoscaler now allows for more flexible scaling policies on more cloud providers.</p>\n<p>Highlights of the Nomad 1.1 beta include:</p>\n<ul>\n<li><strong>Memory oversubscription</strong>: Improve cluster efficiency by allowing applications,  whether containerized or non-containerized, to use memory in excess of their scheduled amount.</li>\n<li><strong>Reserved CPU cores</strong>: Improve the performance of your applications by ensuring tasks have exclusive use of client CPUs.</li>\n<li><strong>UI improvements</strong>: Enjoy a streamlined operator experience with fuzzy search, resource monitoring, and authentication improvements.</li>\n<li><strong>CSI enhancements</strong>: Run stateful applications with improved volume management and support for Container Storage Interface (CSI) plugins such as Ceph.</li>\n<li><strong>Readiness checks</strong>: Differentiate between application liveness and readiness with new options for task health checks.</li>\n<li><strong>Remote task drivers (Technical Preview)</strong>: Use Nomad to manage your workloads on more platforms, such as <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> or <a href=\"https://aws.amazon.com/ecs/\">Amazon ECS</a>.</li>\n<li><strong>Consul namespace support (Enterprise)</strong>: Run Nomad-defined services in their HashiCorp Consul namespaces more easily using Nomad Enterprise.</li>\n<li><strong>License autoloading (Enterprise):</strong> Automatically load Nomad licenses when a Nomad server agent starts using Nomad Enterprise.</li>\n<li><strong>Autoscaling improvements:</strong> Scale your applications more precisely with new strategies.</li>\n</ul><p>Let’s look at each of these in more detail.</p>\n<h2><a href=\"#memory-oversubscription\">»</a><a></a>Memory Oversubscription</h2>\n<p>Increase the resilience of your applications and improve resource efficiency by using memory oversubscription. This feature enables Nomad tasks to exceed their allocated memory limit without throwing out-of-memory (OOM) errors, resulting in more efficient bin-packing and smoother handling of applications with variable memory usage.</p><pre><code>task \"redis\" {\n  driver = \"exec\"\n  ...\n  config {\n    resources {\n      cpu\t= 500\n      memory = 256\n      memory_max = 512\n    }\n  }\n}</code></pre><p>Nomad 1.1 introduces an optional <code>memory_max</code> value in addition to the existing <code>memory</code> value in a task’s resources stanza. Nomad uses the <code>memory</code> value to reserve resources on client nodes while the <code>memory_max</code> value is used as a hard limit. Tasks that exceed their hard limit will be restarted and emit an OOM error.</p>\n<p>The <code>memory_max</code> attribute is supported by all default Nomad drivers except <code><a href=\"https://www.nomadproject.io/docs/drivers/raw_exec\">raw_exec</a></code> and <a href=\"https://www.nomadproject.io/docs/drivers/qemu\">QEMU</a>.</p>\n<h2><a href=\"#reserved-cpu-cores\">»</a><a></a>Reserved CPU Cores</h2>\n<p>Improve performance by pinning applications to run in isolation on exclusive CPU cores. This ensures that latency-sensitive or business-critical are not blocked by other applications running on the same node.</p><pre><code>task \"my-application\" {\n  driver = \"docker\"\n  ...\n  config {\n    resources {\n      cores  = 2\n      memory = 500\n    }\n  }\n}</code></pre><p>Instead of setting a <code>cpu</code> value in the resources stanza, users can now optionally set <code>cores </code>instead. The client nodes will reserve this set number of CPU cores exclusively for the task and no other application will have access to these cores.</p>\n<h2><a href=\"#ui-improvements\">»</a><a></a>UI Improvements</h2>\n<p>Version 1.1 of Nomad enhances the user interface in several important ways. The UI’s search now delegates to an external fuzzy search API, making it quicker to navigate to allocations, task groups, and CSI plugins, in addition to the jobs and clients that were already returned.</p><img src=\"https://www.datocms-assets.com/2885/1620051879-fuzzy.gif\" /><p>Improved resource monitoring helps Nomad operators better understand client resource constraints and health at a glance. Client CPU and memory charts now expose resource reservations for non-Nomad processes:</p><img src=\"https://www.datocms-assets.com/2885/1620051517-reserve.png\" /><p>Allocation metrics now report resource consumption for individual tasks:</p><img src=\"https://www.datocms-assets.com/2885/1620051521-allocs.png\" /><p>Namespaces are now treated as a filterable property in relevant views and are no longer selected via the sidebar dropdown. You can now view jobs across all namespaces with the “All (*)” option:</p><img src=\"https://www.datocms-assets.com/2885/1620051526-namespaces.png\" /><p>Finally, a new <code>-authenticate</code> flag on the <code>nomad ui</code> command. This opens the UI using a one-time token generated using the <code>NOMAD_TOKEN</code> environment variable:</p><img src=\"https://www.datocms-assets.com/2885/1620052316-authenticate.gif\" /><h2><a href=\"#csi-improvements\">»</a><a></a>CSI Improvements</h2>\n<p>You can run a wider variety of stateful workloads on Nomad with Container Storage Interface (CSI) improvements. Applications using CSI now have access to more functionality in the CSI spec, including volume creation, volume destruction, and volume snapshotting.</p>\n<p>This expands the set of CSI plugins that work with Nomad to include popular integrations such as <a href=\"https://ceph.io/\">Ceph</a>. Additionally, scheduler improvements allow for easier management of volumes that must be associated with single allocations.</p>\n<p>For more information on how to use CSI with Nomad, see these <a href=\"https://github.com/hashicorp/nomad/tree/main/demo/csi\">examples in the Nomad repository</a>, or read our <a href=\"https://www.nomadproject.io/docs/internals/plugins/csi\">storage plugin documentation</a>.</p>\n<h2><a href=\"#readiness-checks\">»</a><a></a>Readiness Checks</h2>\n<p>Nomad 1.1 lets you make your deployments more robust by giving you more granular control over the health status of tasks. You can now differentiate between checks used solely by Consul for health and traffic routing (readiness) and checks used by Nomad for general application health (liveness).</p>\n<p>This can simplify deploying Nomad tasks that have long-running setups such as cache-warming or database migrations:</p><pre><code>check {\n  name = \"deploy-readiness-check\"\n  type = \"script\"\n  name = \"database-health\"\n  command = \"/user/local/bin/db-health\"\n  on_update = \"ignore\" # or \"ignore_warnings\" or \"require_healthy\"\n}</code></pre><p>Check stanzas now take an optional <code>on_update</code> attribute, which determines Nomad’s response to failing checks.</p>\n<p>Nomad will fail a deployment if <code>on_update</code> is set to <code>\"require_healthy\"</code> and the check does not pass. (This is the default behavior, and the existing behavior in releases prior to 1.1.) If <code>on_update</code> is set to <code>\"ignore\"</code> or <code>\"ignore_warnings\"</code>, Nomad will ignore failing checks. Previously, these checks would have caused the deployment to fail. These checks will still be used by Consul to determine application readiness.</p>\n<h2><a href=\"#remote-task-drivers\">»</a><a></a>Remote Task Drivers</h2>\n<p>In Nomad 1.1, you can deploy and manage workloads on a wider variety of environments using remote task drivers. Nomad can now manage the lifecycles of applications running on nodes where a Nomad agent is not deployed.</p>\n<p><a href=\"https://pkg.go.dev/github.com/hashicorp/nomad@v0.10.1/plugins/drivers?tab=doc#Capabilities\">Nomad task driver capabilities</a> now include a <code>RemoteTask</code> Boolean value. Remote tasks have their state propagated to replacement allocations when nodes are drained or down (lost). The remote task will remain running throughout a node drain or rescheduling of lost allocations. This allows Nomad to manage tasks running on serverless container managers, such as Amazon ECS, or function-as-a-service providers, such as AWS Lambda, without unnecessarily restarting remote services if the Nomad agent managing them crashes or is drained.</p>\n<p>To learn more about how to write a Remote Task Driver, see the <a href=\"https://github.com/hashicorp/nomad-driver-ecs\">Elastic Container Service (ECS) Task Driver example</a> on Github.</p>\n<p>This feature is currently an experimental tech preview and feedback is welcome!</p>\n<h2><a href=\"#consul-namespace-support\">»</a><a></a>Consul Namespace Support</h2>\n<p>Register Consul services in specific Consul Namespaces through the Nomad job file.</p>\n<p>This feature improves the interoperability between Nomad and Consul while simplifying the adoption of hierarchical network models powered by Consul Enterprise:</p><pre><code>group \"billing\" {\n\n  consul {\n    namespace = \"finance\"\n  }\n\n  task \"api\" {\n    # ...\n  }\n}</code></pre><p>Operators can specify a <code>namespace</code> value in a <code>consul</code> stanza at the job, task group, or task level. Services defined within the same block will be registered in the given Consul namespace:</p><pre><code>nomad job run -consul-token  job.nomad</code></pre><p>Additionally, if a Consul namespace is not explicitly defined in the job configuration file, users can pass in a Consul ACL token via the <code>nomad run</code> command. This registers any Consul services in the token’s associated namespace.</p>\n<h2><a href=\"#license-autoloading\">»</a><a></a>License Autoloading</h2>\n<p>Nomad licenses are now automatically read from the file system when a Nomad server agent starts:</p><pre><code>server {\n  enabled  \t= true\n  license_path = \"/opt/nomad/license.hclc\"\n}</code></pre><p>Nomad licenses can be set by adding a <code>license_path </code>to the server configuration, or by using <code>NOMAD_LICENSE </code>or <code>NOMAD_LICENSE_PATH </code>environment variables when launching a server agent. See the <a href=\"https://www.nomadproject.io/docs/enterprise#nomad-enterprise-licensing\">Nomad licensing documentation</a> for more details.</p>\n<p>The <code>nomad license put </code>command and the <code>PUT v1/operator/license</code> API endpoint have been removed in favor of autoloading licenses. This is a breaking change for Nomad enterprise users. See the <a href=\"nomadproject.io/docs/upgrade/upgrade-specific#enterprise-licenses\">1.1 upgrade guide</a> for more details.</p>\n<p>If you would like to try Nomad Enterprise, get started with <a href=\"https://www.hashicorp.com/products/nomad/trial\">a 30-day trial license</a>.</p>\n<h2><a href=\"#autoscaling-improvements\">»</a><a></a>Autoscaling Improvements</h2>\n<p>In Nomad 1.1., you can tune application and cluster autoscaling more precisely using three new strategies:</p>\n<ol>\n<li>The <strong>pass-through</strong> strategy allows users to defer scaling logic to their APM of choice.</li>\n<li>The <strong>fixed-value</strong> strategy maintains a fixed number of nodes.</li>\n<li>The <strong>threshold</strong> strategy lets you toggle different scaling strategies based on whether a tracked metric is within a defined range.</li>\n</ol>\n<p>See Nomad’s <a href=\"https://www.nomadproject.io/docs/autoscaling/plugins/strategy\">plugin documentation</a> for more details.</p>\n<p>The Nomad Autoscaler now officially supports horizontal cluster autoscaling for <a href=\"https://www.nomadproject.io/docs/autoscaling/plugins/target#aws-autoscaling-group-target\">AWS Auto Scaling groups</a>, <a href=\"https://www.nomadproject.io/docs/autoscaling/plugins/target#google-cloud-platform-managed-instance-groups-target\">Google Cloud managed instance groups</a>, and <a href=\"https://www.nomadproject.io/docs/autoscaling/plugins/target#azure-virtual-machine-scale-set-target\">Microsoft Azure virtual machine scale sets</a>. Additional targets such as <a href=\"https://github.com/jsiebens/nomad-droplets-autoscaler\">Digital Ocean</a>, <a href=\"Senlin\">OpenStack</a>, and Hetzner Cloud are supported via <a href=\"https://www.nomadproject.io/docs/autoscaling/plugins/external#community-supported\">community plugins</a>.</p>\n<h2><a href=\"#ecosystem-integration-update\">»</a><a></a>Ecosystem Integration Update</h2>\n<p>The Nomad team plans to continue its significant investments in the ecosystem. In the past year, we have added <a href=\"https://www.nomadproject.io/docs/internals/plugins/csi\">CSI</a> and <a href=\"https://www.nomadproject.io/docs/job-specification/network#container-network-interface-cni\">CNI</a> support and built our <a href=\"https://www.hashicorp.com/resources/the-nomad-autoscaler\">application and cluster autoscaler</a> for three major cloud providers.</p>\n<p>To better facilitate collaboration and contribution with ecosystem partners, we have launched the <a href=\"https://www.nomadproject.io/docs/partnerships\">Nomad integration program</a>, a self-service process with links and guidance to information sources, defined steps, and checkpoints. Check the <a href=\"https://www.nomadproject.io/docs/partnerships\">integration program page </a>to learn more about the program and check our dedicated <a href=\"https://www.nomadproject.io/docs/ecosystem\">ecosystem page</a> to explore more integration solutions.</p>\n<h2><a href=\"#what-s-next-for-nomad-1-1\">»</a><a></a>What’s Next for Nomad 1.1</h2>\n<p>We encourage you to experiment with the new features in Nomad 1.1 but recommend against using this beta build in a production environment. We are eager to see how these new features enhance your Nomad experience. If you encounter an issue, please file a <a href=\"https://github.com/hashicorp/nomad/issues/new?assignees=&amp;labels=type%2Fbug&amp;template=bug_report.md\">new bug report</a> in GitHub and we'll take a look.</p>\n<p>To watch new features in action, register the webinar <a href=\"https://www.hashicorp.com/events/webinars/nomad-1-1-oversubscription-reserved-cpu-cores-autoscaler-and-more\">here</a>.</p>\n<p>Finally, on behalf of the Nomad team, I’d like to conclude with a big “thank you” to our amazing community! Your dedication and bug reports help us make Nomad better. We are deeply grateful for your time, passion, and support.</p>","author":"Mike Nomitch","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"a45558fba6fd1d321a44098173e61ace33b7af57071dbb37e0b9c68b30980af4","category":"Tech"}
{"title":"Wait Conditions in the Kubernetes Provider for HashiCorp Terraform","link":"https://www.hashicorp.com/blog/wait-conditions-in-the-kubernetes-provider-for-hashicorp-terraform","date":1612803600000,"content":"<p>The HashiCorp Terraform Strategic Integrations team is working hard to bring you a <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest\">Kubernetes provider</a> for HashiCorp Terraform with a better-than-native experience. We recently improved the <code>wait_for</code> configurations on several resources, as well as introduced an entirely new generic waiter. The new and improved configuration options allow you to specify whether Terraform should wait for a specific condition, or not, before continuing to <code>apply</code> your configuration or complete successfully.</p>\n<h2><a class=\"__permalink-h\" href=\"#wait-for-rollout\" aria-label=\"wait for rollout permalink\">»</a><a class=\"__target-h\" id=\"wait-for-rollout\" aria-hidden></a>Wait For Rollout</h2>\n<p>The <code>wait_for_rollout</code> attribute is available on both the <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/deployment#wait_for_rollout\"><code>kubernetes_deployment</code></a> and the <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/resources/stateful_set#wait_for_rollout\"><code>kubernetes_stateful_set</code></a> resources. The default value for <code>wait_for_rollout</code> is <code>true</code>, so if that’s the behavior you want, you don’t need to do anything. However, there are cases where you may not expect a rollout to complete before you’re finished applying your Kubernetes configuration. In these cases, you can set <code>wait_for_rollout</code> to <code>false</code> and the Kubernetes provider will move on after the <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Deployment</a> or <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">StatefulSet</a> have been successfully submitted to Kubernetes. Below is an example configuration that demonstrates the usage of <code>wait_for</code> in a deployment resource.</p><pre><code>terraform {\n required_providers {\n   kubernetes = {\n     source = \"hashicorp/kubernetes\"\n   }\n }\n}\n\nprovider \"kubernetes\" {\n   config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_deployment\" \"nginx\" {\n metadata {\n   name = \"example-nginx\"\n   labels = {\n     App = \"ExampleNGINX\"\n   }\n }\n\n spec {\n   replicas = 2\n   selector {\n     match_labels = {\n       App = \"ExampleNGINX\"\n     }\n   }\n   template {\n     metadata {\n       labels = {\n         App = \"ExampleNGINX\"\n       }\n     }\n     spec {\n       container {\n         image = \"nginx:1.7.8\"\n         name  = \"example\"\n\n         port {\n           container_port = 80\n         }\n       }\n     }\n   }\n }\n   wait_for_rollout = false\n}</code></pre><h2><a class=\"__permalink-h\" href=\"#wait-for-load-balancer\" aria-label=\"wait for load balancer permalink\">»</a><a class=\"__target-h\" id=\"wait-for-load-balancer\" aria-hidden></a>Wait For Load Balancer</h2>\n<p>The <code>wait_for_load_balancer</code> attribute is an option on the <code>kuberntes_ingress</code> resource. An <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\">Ingress</a> controls access to services in the Kubernetes cluster. By default, <code>wait_for_loadbalancer</code> is set to <code>false</code>, which means the Kubernetes provider will move on after Kubernetes has accepted the Ingress object API request. When creating or modifying an Ingress with a load balancer configuration, some users want to make sure at least one endpoint is available through the load balancer before the Terraform <code>apply</code> succeeds, or moves on. When <code>wait_for_load_balancer</code> is set to <code>true</code>, that’s exactly what the Kubernetes provider will do.</p><pre><code>terraform {\n required_providers {\n   kubernetes = {\n     source = \"hashicorp/kubernetes\"\n   }\n }\n}\n\nprovider \"kubernetes\" {\n config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_ingress\" \"example\" {\n metadata {\n   name = \"example\"\n\n   annotations = {\n     \"ingress.kubernetes.io/rewrite-target\" = \"/\"\n   }\n }\n\n spec {\n   backend {\n     service_name = \"example\"\n     service_port = 8080\n   }\n\n   rule {\n     host = \"myminikube.info\"\n\n     http {\n       path {\n         path = \"/\"\n\n         backend {\n           service_name = \"exampleserver\"\n           service_port = 8080\n         }\n       }\n     }\n   }\n }\n wait_for_load_balancer = true\n}</code></pre><h2><a class=\"__permalink-h\" href=\"#wait-for-completion\" aria-label=\"wait for completion permalink\">»</a><a class=\"__target-h\" id=\"wait-for-completion\" aria-hidden></a>Wait For Completion</h2>\n<p>The last wait for attribute on the Kubernetes provider is <code>wait_for_completion</code>, which is available on the <code>kubernetes_job</code> resource. <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/job/\">Jobs</a> create Pods that run until a specific task either completes successfully or fails. This attribute ensures Terraform waits until the job has completed or failed before continuing.</p><pre><code>terraform {\n required_providers {\n   kubernetes = {\n     source = \"hashicorp/kubernetes\"\n   }\n }\n}\n\nprovider \"kubernetes\" {\n config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_job\" \"test-pr\" {\n metadata {\n   name = \"job-with-wait\"\n   namespace = \"default\"\n }\n spec {\n   completions = 1\n   template {\n     metadata {}\n     spec {\n       container {\n         name = \"sleep\"\n         image = \"busybox:latest\"\n         command = [\"sleep\", \"30\"]\n       }\n       restart_policy = \"Never\"\n     }\n   }\n }\n wait_for_completion = true\n timeouts {\n   create = \"40s\"\n }\n}</code></pre><h2><a class=\"__permalink-h\" href=\"#the-new-generic-wait\" aria-label=\"the new generic wait permalink\">»</a><a class=\"__target-h\" id=\"the-new-generic-wait\" aria-hidden></a>The New Generic Wait</h2>\n<p>The <a href=\"https://www.hashicorp.com/blog/deploy-any-resource-with-the-new-kubernetes-provider-for-hashicorp-terraform\">Kubernetes-alpha provider</a> introduces a new, generic <code>kubernetes_manifest</code> <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes-alpha/latest/docs/resources/kubernetes_manifest\">resource</a> and with it, a new generic <code>wait_for</code> attribute. Unlike the previous <code>wait_for_x</code> attributes, the new generic <code>wait_for</code> configuration gives users more control over wait conditions. This new attribute instructs the Terraform provider to wait on a condition based on any attribute of a Kubernetes object.</p>\n<p>For example, you can specify that Terraform should consider a deployment with 10 replicas complete when two of the pods enter the ready state, and the ingress has an IP address assigned. Keep in mind that the <code>wait_for</code> attribute waits for all conditions to be met simultaneously.  So, in this example, if the deployment’s <code>readyReplicas</code> value is greater than two before the ingress has an IP address assigned, the conditions won’t be met and the provider will eventually timeout.  Currently, the Kubernetes-alpha provider doesn’t support a configurable timeout.  To address this, you can also use regular expressions in your conditions.</p><pre><code>terraform {\n required_providers {\n   kubernetes = {\n     source = \"hashicorp/kubernetes-alpha\"\n   }\n }\n}\n\nprovider \"kubernetes-alpha\" {\n  config_path = \"~/.kube/config\"\n}\n\nresource \"kubernetes_manifest\" \"example\" {\n  provider = kubernetes-alpha\n\n  manifest = {\n    apiVersion = \"v1\"\n    kind       = \"Pod\"\n\n    metadata = {\n      name      = \"example-pod\"\n      namespace = \"default\"\n\n      annotations = {\n        \"test.terraform.io\" = \"test\"      \n      }\n\n      labels = {\n        app = \"nginx\"\n      }\n    }\n\n    spec = {\n      containers = [\n        {\n          name  = \"nginx\"\n          image = \"nginx:1.19\"\n\n          readinessProbe = {\n            initialDelaySeconds = 10\n\n            httpGet = {\n              path = \"/\"\n              port = 80\n            }\n          }\n        }\n      ]\n    }\n  }\n\n  wait_for = {\n    fields = {\n\t\t\t\t\"metadata.annotations[\\\"test.terraform.io\\\"]\" = \"test\",\n\n\t\t\t\t\"status.containerStatuses[0].restartCount\" = \"0\",\n\t\t\t\t\"status.containerStatuses[0].ready\"        = \"true\",\n\n\t\t\t\t\"status.podIP\" = \"^(\\\\d+(\\\\.|$)){4}\",\n\t\t\t\t\"status.phase\" = \"Running\",\n    }\n  }\n}</code></pre><p>For more information on the new Kubernetes Provider, visit the <a href=\"https://registry.terraform.io/providers/hashicorp/kubernetes-alpha/latest\">Terraform Registry</a>. To discover more about managing Kubernetes with Terraform, review the <a href=\"https://learn.hashicorp.com/collections/terraform/kubernetes\">guides</a> on HashiCorp Learn.</p>\n<p>We would love to hear your feedback and expand on these projects! You can post bugs and feature requests for the Kubernetes-alpha provider by opening an issue at <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes-alpha\">hashicorp/terraform-provider-kubernetes-alpha</a>, or the Kubernetes provider at <a href=\"https://github.com/hashicorp/terraform-provider-kubernetes\">hashicorp/terraform-provider-kubernetes</a>.</p>\n<p>You can also engage with us and the community on <a href=\"https://discuss.hashicorp.com/\">HashiCorp Discuss</a> and in <a href=\"https://kubernetes.slack.com/messages/CJY6ATQH4\">#terraform-providers</a> on the Kubernetes Slack (<a href=\"http://slack.k8s.io/\">Sign up here</a>).</p>","author":"Phil Sautter","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"5bc982614209afe50ff3b749cee8a90a5546bafbab8af0ff16f30f57f9981dc7","category":"Tech"}
{"title":"AWS Fault Injection Simulator – Use Controlled Experiments to Boost Resilience","link":"https://aws.amazon.com/blogs/aws/aws-fault-injection-simulator-use-controlled-experiments-to-boost-resilience/","date":1615849097000,"content":"<p>AWS gives you the components that you need to build systems that are highly reliable: multiple <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/\">Regions</a> (each with multiple <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones\">Availability Zones</a>), <a href=\"https://aws.amazon.com/cloudwatch/\" title=\"\">Amazon CloudWatch</a> (metrics, monitoring, and alarms), <a href=\"https://aws.amazon.com/autoscaling\" title=\"\">Auto Scaling</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones\">Load Balancing</a>, several forms of cross-region replication, and lots more. When you put them together in line with the guidance provided in the <a href=\"https://wa.aws.amazon.com/index.en.html\">Well-Architected Framework</a>, your systems <em>should</em> be able to keep going even if individual components fail.</p> \n<p>However, you won’t know that this is indeed the case until you perform the right kinds of tests. The relatively new field of <a href=\"https://en.wikipedia.org/wiki/Chaos_engineering\">Chaos Engineering</a> (based on pioneering work done by “Master of Disaster” <a href=\"https://en.wikipedia.org/wiki/Jesse_Robbins\">Jesse Robbins</a> in the early days of <a href=\"https://www.amazon.com/\">Amazon.com</a>, and then taken into high gear by the Netflix <a href=\"https://netflix.github.io/chaosmonkey/\">Chaos Monkey</a>) focuses on adding stress to an application by creating disruptive events, observing how the system responds, and implementing improvements. In addition to pointing out the areas for improvements, Chaos Engineering helps to discover blind spots that deserve additional monitoring &amp; alarming, uncovers once-hidden implementation issues, and gives you an opportunity to improve your operational skills with an eye toward improving recovery time. To learn a lot more about this topic, start with <a href=\"https://adhorn.medium.com/chaos-engineering-ab0cc9fbd12a\">Chaos Engineering – Part 1</a> by my colleague <a href=\"https://aws.amazon.com/developer/community/evangelists/adrian-hornsby/\">Adrian Hornsby</a>.</p> \n<p><span style=\"text-decoration: underline;\"><strong>Introducing <span title=\"\">AWS Fault Injection Simulator (FIS)</span></strong></span><br /> <img style=\"float: right; padding-left: 8px; padding-bottom: 8px;\" src=\"https://media.amazonwebservices.com/blog/2021/fis_actions_2.png\" width=\"360\" height=\"587\" />Today we are introducing <a href=\"http://aws.amazon.com/fis\" title=\"\">AWS Fault Injection Simulator (FIS)</a>. This new service will help you to perform controlled experiments on your AWS workloads by injecting faults and letting you see what happens. You will learn how your system reacts to various types of faults and you will have a better understanding of failure modes. You can start by running experiments in pre-production environments and then step up to running them as part of your CI/CD workflow and ultimately in your production environment.</p> \n<p>Each <a href=\"http://aws.amazon.com/fis\" title=\"\">AWS Fault Injection Simulator (FIS)</a> experiment targets a specific set of AWS resources and performs a set of actions on them. We’re launching with support for <a href=\"https://aws.amazon.com/ec2/\" title=\"\">Amazon Elastic Compute Cloud (EC2)</a>, <a href=\"https://aws.amazon.com/ecs/\" title=\"\">Amazon Elastic Container Service (ECS)</a>, <a href=\"https://aws.amazon.com/eks/\" title=\"\">Amazon Elastic Kubernetes Service (EKS)</a>, and <a href=\"https://aws.amazon.com/rds/\" title=\"\">Amazon Relational Database Service (RDS)</a>, with additional resources and actions on the roadmap for 2021. You can select the target resources by type, tag, ARN, or by querying for specific attributes. You also have the ability to stop the experiment if one or more stop conditions (as defined by CloudWatch Alarms) are met. This allows you to quickly terminate the experiment if it has an unexpected impact on a crucial business or operational metric.</p> \n<p><span style=\"text-decoration: underline;\"><strong>Using <span title=\"\">AWS Fault Injection Simulator (FIS)</span></strong></span><br /> Let’s create an experiment template and run an experiment! I will use four EC2 instances, all tagged with a <strong>Mode</strong> of <strong>Test</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_instances_2.png\" alt=\"Four EC2 instances\" width=\"728\" height=\"193\" /></p> \n<p>I open the FIS Console and click <strong>Create experiment template</strong> to get started:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_splash_3.png\" alt=\"FIS Console Home Page\" width=\"899\" height=\"810\" /></p> \n<p>I enter a Description and choose an IAM Role. The role grants permission that are needed for FIS to perform actions on the selected resources so that it can perform the experiment:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_expt_pt1_6.png\" alt=\"Set up Description and IAM Role\" width=\"899\" height=\"447\" /></p> \n<p>Next, I define the action(s) that comprise the experiment. I click on <strong>Add action</strong> to get started:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/fis_expt_pt2_add_1.png\" alt=\"Ready to add an action\" width=\"900\" height=\"240\" /></p> \n<p>Then I define my first action — I want to stop some of my EC2 instances (tagged with a <strong>Mode</strong> of <strong>Test</strong> for this example) for five minutes, and make sure that my system stays running. I make my choices and click <strong>Save</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_expt_pt2_action1_5.png\" width=\"900\" height=\"835\" /></p> \n<p>Next, I choose the target resources (EC2 instances in this case) for the experiment. I click <strong>Add target</strong>, give my target a name, and indicate that it consists of all of my EC2 instances (in the current region) that have tag <strong>Mode</strong> with value <strong>Test</strong>. I can also choose a random instance or a percentage of all of instances that match the tag or the Resource filter. Again, I make my choices and click <strong>Save</strong>:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_expt_pt2_target1_4.png\" alt=\"Setting up a target\" width=\"900\" height=\"873\" /></p> \n<p>I can choose one or more stop conditions (<a href=\"https://aws.amazon.com/blogs/aws/amazon-cloudwatch-alarms/\">CloudWatch Alarms</a>) for the experiment. If an alarm is triggered, the experiment stops. This is a safety mechanism that allows me to make sure that a local failure does not cascade into a full-scale outage.</p> \n<p><img class=\"aligncenter\" src=\"https://media.amazonwebservices.com/blog/2020/fix_expt_stop_1.png\" alt=\"Setting a stop condition\" width=\"900\" height=\"285\" /></p> \n<p>Finally, I tag my experiment and click <strong>Create experiment template</strong>:</p> \n<p><img class=\"alignnone size-medium\" src=\"https://media.amazonwebservices.com/blog/2020/fix_expt_tag_create_1.png\" alt=\"Add tags and create experiment\" width=\"900\" height=\"361\" /></p> \n<p>My template is ready to be used as the basis for an experiment:</p> \n<p><img class=\"alignnone size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_experiments_4.png\" alt=\"Experiment templates\" width=\"899\" height=\"280\" /></p> \n<p>To run an experiment, I select a template and choose <strong>Start experiment</strong> from the <strong>Actions</strong> menu:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_exps_start_action_4.png\" width=\"900\" height=\"275\" /></p> \n<p>Then I click <strong>Start experiment</strong> (I also decided to add a tag):</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_exps_start_gogogo_2.png\" width=\"900\" height=\"522\" /></p> \n<p>I confirm my intent, since it can affect my AWS resources:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_confirm_3.png\" alt=\"Confirm affect on AWS resources\" width=\"700\" height=\"402\" /></p> \n<p>My experiment starts to run, and I can watch the actions:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_exp_running_3.png\" alt=\"Experiment is running\" /></p> \n<p>As expected, the target instances are stopped:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_instances_stopped_1.png\" width=\"801\" height=\"332\" /></p> \n<p>My experiment runs to conclusion, and I now know that my system can keep on going if those instances are stopped:</p> \n<p><img class=\"aligncenter size-medium\" src=\"https://media.amazonwebservices.com/blog/2021/fis_complete_1.png\" width=\"747\" height=\"364\" /></p> \n<p>I can also create, run, and review experiments using the FIS API and the FIS CLI. You could, for example, run different experiments against the same target, or run the same experiment against different targets.</p> \n<p><span style=\"text-decoration: underline;\"><strong>Available Now</strong></span><br /> <a href=\"http://aws.amazon.com/fis\" title=\"\">AWS Fault Injection Simulator (FIS)</a> is available now and you can use it to run controlled experiments today. It is available in all of the commercial AWS Regions today except <span title=\"\">Asia Pacific (Osaka)</span> and the two Regions in China. The remaining three commercial regions are on the roadmap.</p> \n<p>Pricing is based on the number of minutes that your actions run, with no extra charge when two or more actions run in parallel.</p> \n<p>We’ll be adding support for additional services and additional actions throughout 2021, so stay tuned!</p> \n<p>— <a href=\"https://twitter.com/jeffbarr\">Jeff</a>;</p>","author":"Jeff Barr","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"9c21048f001f690411e4c06c1596357523d30c05b10000e2c81c51ae73cd2ef0","category":"Tech"}
{"title":"Customize and Package Dependencies With Your Apache Spark Applications on Amazon EMR on Amazon EKS","link":"https://aws.amazon.com/blogs/aws/customize-and-package-dependencies-with-your-apache-spark-applications-on-amazon-emr-on-amazon-eks/","date":1624563278000,"content":"<p>Last AWS re:Invent, we <a href=\"https://aws.amazon.com/blogs/aws/new-amazon-emr-on-amazon-elastic-kubernetes-service-eks/\">announced</a> the general availability of <a href=\"https://aws.amazon.com/emr/features/eks/\">Amazon EMR on Amazon Elastic Kubernetes Service</a> (Amazon EKS), a new deployment option for Amazon EMR that allows customers to automate the provisioning and management of Apache Spark on Amazon EKS.</p> \n<p>With Amazon EMR on EKS, customers can deploy EMR applications on the same <a href=\"https://aws.amazon.com/eks\">Amazon EKS</a> cluster as other types of applications, which allows them to share resources and standardize on a single solution for operating and managing all their applications. Customers running Apache Spark on Kubernetes can migrate to EMR on EKS and take advantage of the performance-optimized runtime, integration with <a href=\"https://aws.amazon.com/emr/features/studio/\">Amazon EMR Studio</a> for interactive jobs, integration with Apache Airflow and <a href=\"https://aws.amazon.com/step-functions\">AWS Step Functions</a> for running pipelines, and Spark UI for debugging.</p> \n<p>When customers submit jobs, EMR automatically packages the application into a container with the big data framework and provides prebuilt connectors for integrating with other AWS services. EMR then deploys the application on the EKS cluster and manages running the jobs, logging, and monitoring. If you currently run Apache Spark workloads and use Amazon EKS for other Kubernetes-based applications, you can use EMR on EKS to consolidate these on the same Amazon EKS cluster to improve resource utilization and simplify infrastructure management.</p> \n<p>Developers who run containerized, big data analytical workloads told us they just want to point to an image and run it. Currently, EMR on EKS dynamically adds externally stored application dependencies during job submission.</p> \n<p>Today, I am happy to announce customizable image support for Amazon EMR on EKS that allows customers to modify the Docker runtime image that runs their analytics application using Apache Spark on your EKS cluster.</p> \n<p>With customizable images, you can create a container that contains both your application and its dependencies, based on the performance-optimized EMR Spark runtime, using your own continuous integration (CI) pipeline. This reduces the time to build the image and helps predicting container launches for a local development or test.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/22/2021-emr-on-eks-custom-image-2.png\" /></p> \n<p>Now, data engineers and platform teams can create a base image, add their corporate standard libraries, and then store it in <a href=\"https://aws.amazon.com/ecr/\">Amazon Elastic Container Registry</a> (Amazon ECR). Data scientists can customize the image to include their application specific dependencies. The resulting immutable image can be vulnerability scanned, deployed to test and production environments. Developers can now simply point to the customized image and run it on EMR on EKS.</p> \n<p><strong><u>Customizable Runtime Images – Getting Started</u></strong><br /> To get started with customizable images, use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (AWS CLI)</a> to perform these steps:</p> \n<ol> \n <li><a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/setting-up.html\">Register your EKS cluster</a> with Amazon EMR.</li> \n <li>Download the EMR-provided base images from Amazon ECR and modify the image with your application and libraries.</li> \n <li>Publish your customized image to a Docker registry such as Amazon ECR and then submit your job while referencing your image.</li> \n</ol> \n<p>You can download one of the following base images. These images contain the Spark runtime that can be used to run batch workloads using the EMR Jobs API. Here is <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/docker-custom-images-tag.html\">the latest full image list</a> available.</p> \n<table> \n <tbody> \n  <tr> \n   <td><strong>Release Label</strong></td> \n   <td><strong>Spark Hadoop Versions</strong></td> \n   <td><strong>Base Image Tag</strong></td> \n  </tr> \n  <tr> \n   <td>emr-5.32.0-latest</td> \n   <td>Spark 2.4.7 + Hadoop 2.10.1</td> \n   <td>emr-5.32.0-20210129</td> \n  </tr> \n  <tr> \n   <td>emr-5.33-latest</td> \n   <td>Spark 2.4.7-amzn-1 + Hadoop 2.10.1-amzn-1</td> \n   <td>emr-5.33.0-20210323</td> \n  </tr> \n  <tr> \n   <td>emr-6.2.0-latest</td> \n   <td>Spark 3.0.1 + Hadoop 3.2.1</td> \n   <td>emr-6.2.0-20210129</td> \n  </tr> \n  <tr> \n   <td>emr-6.3-latest</td> \n   <td>Spark 3.1.1-amzn-0 + Hadoop 3.2.1-amzn-3</td> \n   <td>emr-6.3.0:latest</td> \n  </tr> \n </tbody> \n</table> \n<p>These base images are located in an Amazon ECR repository in each AWS Region with an image URI that combines the ECR registry account, AWS Region code, and base image tag in the case of US East (N. Virginia) Region.</p> \n<p><code><span>755674844232</span>.dkr.ecr.<span>us-east-1</span>.amazonaws.com/spark/<span>emr-5.32.0-20210129</span></code></p> \n<p>Now, sign in to the Amazon ECR repository and pull the image into your local workspace. If you want to pull an image from a different AWS Region to reduce network latency, <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/docker-custom-images.html\">choose the different ECR repository</a> that corresponds most closely to where you are pulling the image from US West (Oregon) Region.</p> \n<pre><code>$ aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin <span>895885662937</span>.dkr.ecr.<span>us-west-2</span>.amazonaws.com\n$ docker pull <span>895885662937</span>.dkr.ecr.<span>us-west-2</span>.amazonaws.com/spark/emr-5.32.0-20210129</code></pre> \n<p>Create a Dockerfile on your local workspace with the EMR-provided base image and add commands to customize the image. If the application requires custom Java SDK, Python, or R libraries, you can add them to the image directly, just as with other containerized applications.</p> \n<p>The following example Docker commands are for a use case in which you want to install useful Python libraries such as Natural Language Processing (NLP) using Spark and Pandas.</p> \n<pre><code>FROM 895885662937.dkr.ecr.us-west-2.amazonaws.com/spark/emr-5.32.0-20210129\nUSER root\n### Add customizations here ####\nRUN pip3 install pyspark pandas spark-nlp // Install Python NLP Libraries\nUSER hadoop:hadoop</code></pre> \n<p>In another use case, as I mentioned, you can install a different version of Java (for example, Java 11):</p> \n<pre><code>FROM 895885662937.dkr.ecr.us-west-2.amazonaws.com/spark/emr-5.32.0-20210129\nUSER root\n### Add customizations here ####\nRUN yum install -y java-11-amazon-corretto // Install Java 11 and set home\nENV JAVA_HOME /usr/lib/jvm/java-11-amazon-corretto.x86_64\nUSER hadoop:hadoop</code></pre> \n<p>If you’re changing Java version to 11, then you also need to change Java Virtual Machine (JVM) options for Spark. Provide the following options in applicationConfiguration when you submit jobs. You need these options because Java 11 does not support some Java 8 JVM parameters.</p> \n<pre><code>\"applicationConfiguration\": [ \n  {\n    \"classification\": \"spark-defaults\",\n    \"properties\": {\n        \"spark.driver.defaultJavaOptions\" : \"\n\t\t    -XX:OnOutOfMemoryError='kill -9 %p' -XX:MaxHeapFreeRatio=70\",\n        \"spark.executor.defaultJavaOptions\" : \"\n\t\t    -verbose:gc -Xlog:gc*::time -XX:+PrintGCDetails -XX:+PrintGCDateStamps \n\t\t\t-XX:OnOutOfMemoryError='kill -9 %p' -XX:MaxHeapFreeRatio=70 \n\t\t\t-XX:+IgnoreUnrecognizedVMOptions\"\n    }\n  }\n]</code></pre> \n<p>To use custom images with EMR on EKS, publish your customized image and submit a Spark workload in Amazon EMR on EKS using the available Spark parameters.</p> \n<p>You can submit batch workloads using your customized Spark image. To submit batch workloads using the StartJobRun API or CLI, use the <code>spark.kubernetes.container.image</code> parameter.</p> \n<pre><code>$ aws emr-containers start-job-run \\\n    --virtual-cluster-id &lt;enter-virtual-cluster-id&gt; \\\n    --name sample-job-name \\\n    --execution-role-arn &lt;enter-execution-role-arn&gt; \\\n    --release-label &lt;base-release-label&gt; \\ # Base EMR Release Label for the custom image\n    --job-driver '{\n        \"sparkSubmitJobDriver\": {\n        \"entryPoint\": \"local:///usr/lib/spark/examples/jars/spark-examples.jar\",\n        \"entryPointArguments\": [\"1000\"],\n        \"sparkSubmitParameters\": [<strong> \"--class org.apache.spark.examples.SparkPi --conf spark.kubernetes.container.image=123456789012.dkr.ecr.us-west-2.amazonaws.com/emr5.32_custom\"</strong>\n\t\t  ]\n      }\n  }'</code></pre> \n<p>Use the <code>kubectl</code> command to confirm the job is running your custom image.</p> \n<pre><code>$ kubectl get pod -n &lt;namespace&gt; | grep \"driver\" | awk '{print $1}'\nExample output: k8dfb78cb-a2cc-4101-8837-f28befbadc92-1618856977200-driver</code></pre> \n<p>Get the image for the main container in the Driver pod (Uses <code>jq</code>).</p> \n<pre><code>$ kubectl get pod/&lt;driver-pod-name&gt; -n &lt;namespace&gt; -o json | jq '.spec.containers\n| .[] | select(.name==\"spark-kubernetes-driver\") | .image '\nExample output: 123456789012.dkr.ecr.us-west-2.amazonaws.com/emr5.32_custom</code></pre> \n<p>To view jobs in the <a href=\"https://console.aws.amazon.com/emr\">Amazon EMR console</a>, under <strong>EMR on EKS</strong>, choose <strong>Virtual clusters</strong>. From the list of virtual clusters, select the virtual cluster for which you want to view logs. On the <strong>Job runs</strong> table, select <strong>View logs</strong> to view the details of a job run.</p> \n<p><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/06/15/2021-emr-on-eks-console-job-run.png\" /></p> \n<p><strong><u>Automating Your CI Process and Workflows</u></strong><br /> You can now customize an EMR-provided base image to include an application to simplify application development and management. With custom images, you can add the dependencies using your existing CI process, which allows you to create a single immutable image that contains the Spark application and all of its dependencies.</p> \n<p>You can apply your existing development processes, such as vulnerability scans against your Amazon EMR image. You can also validate for correct file structure and runtime versions using the EMR validation tool, which can be run locally or integrated into your CI workflow.</p> \n<p>The APIs for Amazon EMR on EKS are integrated with orchestration services like AWS Step Functions and <a href=\"https://aws.amazon.com/managed-workflows-for-apache-airflow/\">AWS Managed Workflows for Apache Airflow (MWAA),</a> allowing you to include EMR custom images in your automated workflows.</p> \n<p><strong><u>Now Available</u></strong><br /> You can now set up customizable images in all AWS Regions where Amazon EMR on EKS is available. There is no additional charge for custom images. To learn more, see the <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/docker-custom-images.html\">Amazon EMR on EKS Development Guide</a> and a demo video how to build your own images for running Spark jobs on Amazon EMR on EKS.</p> \n<p></p> \n<p>You can send feedback to the <a href=\"https://forums.aws.amazon.com/forum.jspa?forumID=52\">AWS forum</a> for Amazon EMR or through your usual AWS support contacts.</p> \n<p>— <a href=\"https://twitter.com/channyun\">Channy</a></p>","author":"Channy Yun","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"08dfda4b8d79d988cee836c5a108f8475e43c15e137415ec6e56e08a49074ccd","category":"Tech"}
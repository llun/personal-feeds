{"title":"Introducing Private Click Measurement, PCM","link":"https://webkit.org/blog/11529/introducing-private-click-measurement-pcm/","date":1612207833000,"content":"<p>This blog post covers a new feature called Private Click Measurement, or PCM, for measuring ad clicks across websites and from iOS apps to websites. It is part of iOS and iPadOS 14.5 betas.</p>\n<h2>Motivation and Goals</h2>\n<p>Classic ad attribution on the web is done with cookies carrying user or device IDs. Such attribution constitutes cross-site tracking which WebKit is <a href=\"https://webkit.org/tracking-prevention-policy/\">committed to preventing</a>. Websites should not be able to attribute data of an ad click and a conversion to a single user as part of large scale tracking.</p>\n<p>At the same time, we want to support measurement of online advertising. PCM achieves this tradeoff by sending attribution reports with limited data in a dedicated Private Browsing mode without any cookies, delaying reports randomly between 24 and 48 hours to disassociate events in time, and handling data on-device.</p>\n<h2>The Feature in a Nutshell</h2>\n<ul>\n<li>A new, on-by-default feature called Private Click Measurement, or PCM, for privacy-preserving measurement of ad clicks across websites and from iOS apps to websites in iOS and iPadOS 14.5 betas.</li>\n<li>An 8-bit identifier on the click source side, which means 256 parallel ad campaigns can be measured per website or app.</li>\n<li>A 4-bit identifier on the conversion side, which means 16 different conversion events can be distinguished.</li>\n<li>Fraud prevention via unlinkable tokens will be coming.</li>\n</ul>\n<h2>A Proposed Standard</h2>\n<p>We first proposed privacy-preserving measurement of ad clicks in <a href=\"https://webkit.org/blog/8943/privacy-preserving-ad-click-attribution-for-the-web/\">May 2019</a>. Since then the proposal has changed name to Private Click Measurement and been discussed extensively in the W3C Privacy Community group, both through meetings and on <a href=\"https://github.com/privacycg/private-click-measurement\">GitHub</a>.</p>\n<p>A proposal needs two independent implementations to be on track to become a web standard. This means another browser such as Firefox, Brave, Chrome, or Edge needs to independently implement PCM before it can move further along the standards track. We are working with them to get there.</p>\n<p>Nevertheless, we are happy to be the first browser to enable a proposed web standard for measuring advertising!</p>\n<h2>On By Default</h2>\n<p>You may ask why we are enabling PCM by default before there is a second independent implementation and before we’ve added the fraud prevention mechanism <a href=\"https://github.com/privacycg/private-click-measurement/issues/27\">discussed</a> in W3C Privacy CG. The reasons are:</p>\n<ul>\n<li><strong>Early access</strong>. We recognize the need for early access so that advertisers, websites, and apps can adopt the technology, analyze real data, tune their measurement, and <a href=\"https://bugs.webkit.org/\">report any issues</a> to us.</li>\n<li><strong>Equal access</strong>. We want to provide everyone with the opportunity to test and use this technology from the get-go. An alternative would be to only run it with selected partners but we have opted for an open approach.</li>\n<li><strong>Attribution data is stable</strong>. Fraud prevention tokens will be added and naming of data labels might change, but the functionality and attribution data is stable, namely 8 bits on the click source side and 4 bits on the attribute-on side. Thus, full scale tests of PCM are meaningful and useful at this point.</li>\n</ul>\n<h2>Web-to-Web Click Measurement</h2>\n<p>PCM web-to-web is the case covered by the proposed standard, i.e. a user clicks a link on a webpage, is navigated cross-site, and up to seven days later, there’s a signal on the destination website saying it would like attribution for any previous clicks that took the user here.</p>\n<p>For the purposes of the examples below, we assume the click happens on a website called <code>social.example</code> and the click navigates the user to <code>shop.example</code>.</p>\n<h3>The Click Side</h3>\n<figure class=\"aligncenter\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/store-ad-clicks-1.png\" alt=\"\" width=\"2655\" height=\"762\" class=\"wp-image-11531\" srcset=\"https://webkit.org/wp-content/uploads/store-ad-clicks-1.png 2655w, https://webkit.org/wp-content/uploads/store-ad-clicks-1-300x86.png 300w, https://webkit.org/wp-content/uploads/store-ad-clicks-1-1024x294.png 1024w, https://webkit.org/wp-content/uploads/store-ad-clicks-1-768x220.png 768w, https://webkit.org/wp-content/uploads/store-ad-clicks-1-1536x441.png 1536w, https://webkit.org/wp-content/uploads/store-ad-clicks-1-2048x588.png 2048w\" sizes=\"(max-width: 2655px) 100vw, 2655px\" /></figure>\n<p>Links that want to store click measurement data should look like this:</p>\n<pre><code class=\"html\"><span class=\"comment\">&lt;!-- Link on social.example --&gt;</span> \n<span class=\"tag\">&lt;<span class=\"keyword\">a</span> <span class=\"keyword attribute\">href</span>=<span class=\"attribute value string\">\"https://shop.example/product.html\"</span> \n   <span class=\"keyword attribute\">attributionsourceid</span>=<span class=\"attribute value string\">\"[8-bit source ID]\"</span>\n   <span class=\"keyword attribute\">attributeon</span>=<span class=\"attribute value string\">\"https://shop.example\"</span>&gt;</span>\n\n  Markup\n\n<span class=\"tag\">&lt;/<span class=\"keyword\">a</span>&gt;</span>\n</code></pre>\n<p>The two mandatory attributes are:</p>\n<ul>\n<li><code>attributionsourceid</code>: The 8-bit attribution source ID, allowed to be between 0 and 255. This was earlier referred to as the ad campaign ID but since PCM is not technically tied to advertising, it was decided in the standards discussion that its attributes and key names should not use advertising terms.</li>\n<li><code>attributeon</code>. The click destination website which wants to attribute incoming navigations to clicks. Note that PCM only uses the <a href=\"https://webkit.org/tracking-prevention/#terminology\">registrable domain</a> or eTLD+1, i.e. there is no separation based on subdomains. This is so that the destination cannot be set up as <code>https://janeDoeTracking.shop.example</code> to track user Jane Doe.</li>\n</ul>\n<p>If the click indeed navigated the user to the <code>attributeon</code> website, the <code>attributionsourceid</code> is stored as a click from <code>social.example</code> to <code>shop.example</code> for 7 days.</p>\n<p>Note that this data is not accessible to websites. It’s silently stored in the browser.</p>\n<h3>The Triggering Event</h3>\n<figure class=\"aligncenter\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1.png\" alt=\"\" width=\"2655\" height=\"1026\" class=\"wp-image-11537\" srcset=\"https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1.png 2655w, https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1-300x116.png 300w, https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1-1024x396.png 1024w, https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1-768x297.png 768w, https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1-1536x594.png 1536w, https://webkit.org/wp-content/uploads/match-conversions-ad-clicks-1-2048x791.png 2048w\" sizes=\"(max-width: 2655px) 100vw, 2655px\" /></figure>\n<p>To trigger click attribution, the “attribute on” website has to make an HTTP GET request to the website(s) where it is running click-through ads. This way of doing it is intended to support existing “tracking pixels” and make adoption easy. In our example this would be the <code>shop.example</code> site making an HTTP GET request to <code>social.example</code>. For a more modern way of triggering attribution, see the Future Enhancements section.</p>\n<p>The HTTP GET request to <code>social.example</code> triggers attribution if it is redirected to <a href=\"https://social.example/.well-known/private-click-measurement/\"><code>https://social.example/.well-known/private-click-measurement/trigger-attribution/</code></a><code>[``4-bit`` trigger data]/[optional 6-bit priority]</code>. <strong>Note</strong>: The first beta lacks the <code>/trigger-attribution</code> path component since this was a very <a href=\"https://github.com/privacycg/private-click-measurement/issues/59\">recent decision</a> in the standards group.</p>\n<p>The two URL path parameters are:</p>\n<ul>\n<li><strong>Trigger data</strong>. This is a 4-bit value between 00 and 15 that encodes the triggering event (note the mandatory two digits). This was earlier referred to as the conversion value but again, PCM is not technically tied to advertising so it doesn’t use advertising terms.</li>\n<li><strong>Optional priority</strong>. This is a 6-bit value between 00 and 63 which allows multiple triggering events to result in a single attribution report for the event with the highest priority (again, note the two digits). For instance, there might be multiple steps in a sales funnel where each step triggers attribution but steps further down the funnel have higher priority. This value only controls which trigger data goes into the attribution report and is not part of the attribution report itself. You may ask why this isn’t a 4-bit value like the trigger data. The reason is to support easy changes to what’s being measured without having to remap several trigger-data-to-priority pairs. Triggering events 00-15 may start out as mapped to priority 00-15 but then the shop owner wants to drill into events 5-7. With the extra bits, it’s easy to assign triggering events 05-07 to priority 20-22 so as to focus attribution reports to those.</li>\n</ul>\n<p>Once a triggering event matches a stored click, a single attribution report is scheduled by the browser to be sent out randomly between 24 and 48 hours later, or the earliest time thereafter when the browser is running. As long as an attribution report has not yet been sent, it can be rescheduled based on a triggering event with higher priority.</p>\n<h3>The Attribution Report</h3>\n<figure class=\"aligncenter\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1.png\" alt=\"\" width=\"3066\" height=\"939\" class=\"wp-image-11538\" srcset=\"https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1.png 3066w, https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1-300x92.png 300w, https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1-1024x314.png 1024w, https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1-768x235.png 768w, https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1-1536x470.png 1536w, https://webkit.org/wp-content/uploads/send-ad-click-attribution-data-1-2048x627.png 2048w\" sizes=\"(max-width: 3066px) 100vw, 3066px\" /></figure>\n<p>PCM attribution reports are sent as HTTP POST requests to <code>/.well-known/private-click-measurement/report-attribution/</code> on the website where the click happened, in our example <a href=\"https://social.example//.well-known/private-click-measurement/\"><code>https://social.example/.well-known/private-click-measurement/report-attribution/</code></a>. <strong>Note</strong>: The first beta lacks the <code>/report-attribution</code> path component since this was a very <a href=\"https://github.com/privacycg/private-click-measurement/issues/59\">recent decision</a> in the standards group.</p>\n<p>The report is in JSON and looks like this:</p>\n<pre><code class=\"json\">{\n  <span class=\"string\">\"source_engagement_type\"</span> <span class=\"operator\">:</span> <span class=\"string\">\"click\"</span>,\n  <span class=\"string\">\"source_site\"</span> <span class=\"operator\">:</span> <span class=\"string\">\"social.example\"</span>,\n  <span class=\"string\">\"source_id\"</span> <span class=\"operator\">:</span> [<span class=\"number\">8</span><span class=\"operator\">-</span><span class=\"identifier\">bit</span> <span class=\"identifier\">source</span> <span class=\"identifier\">ID</span>],\n  <span class=\"string\">\"attributed_on_site\"</span> <span class=\"operator\">:</span> <span class=\"string\">\"shop.example\"</span>,\n  <span class=\"string\">\"trigger_data\"</span> <span class=\"operator\">:</span> [<span class=\"number\">4</span><span class=\"operator\">-</span><span class=\"identifier\">bit</span> <span class=\"identifier\">trigger</span> <span class=\"identifier\">data</span>],\n  <span class=\"string\">\"version\"</span><span class=\"operator\">:</span> <span class=\"number\">1</span>\n}\n</code></pre>\n<p>Notes on the non-obvious key-values above:</p>\n<ul>\n<li><code>source_engagement_type</code> is always “click” for PCM. This field allows for future use of this report mechanism for other types of attribution such as view-through.</li>\n<li><code>version</code> signals to the receiving end which version of the attribution feature this is. You should expect this number to be increased when fraud prevention tokens are added or something else about the mechanism is changed. This allows concurrent versions to work in parallel and provides a signal to developers that there may be things they need to change or adopt on their side.</li>\n</ul>\n<h2>App-to-Web Click Measurement</h2>\n<p>This is exciting – we’re adding the capability to measure ad clicks from iOS and iPadOS apps to Safari!</p>\n<p>Many advertisers in apps want to take the user to their website where the user can buy a product or sign up for a service. This is exactly the kind of ad PCM app-to-web allows them to measure.</p>\n<h3>The Click Side</h3>\n<p>The only thing that differs from PCM web-to-web is on the click side which is in an iOS app. To adopt this technology you need to do this:</p>\n<ol>\n<li>Add a URL to where you want PCM’s ad attribution reports to be sent when ads are clicked in your app. You do this under the key <code>NSAdvertisingAttributionReportEndpoint</code> in your Info.plist. The naming of this endpoint is deliberately not tied to PCM. Potential future ad measurement reports associated with apps may use this URL with a differing well-known location if appropriate. Note that the subsequent HTTP redirect to trigger attribution needs to go to this website.</li>\n<li>Populate and add the new <code>UIEventAttribution</code> to the options of your call to <code>openURL:</code>. See below for what fields you need to enter in <code>UIEventAttribution</code>.</li>\n<li>Overlay the parts of the click-through ad that will trigger navigations to websites with the new <code>UIEventAttributionView</code>. This view only serves as a checkpoint for Apple’s code on-device to check that a user gesture happened before the navigation. The view does not consume the gesture and you are free to decide whether or not to navigate to a website even if the gesture happened on one of these views. A user gesture is required for your <code>UIEventAttribution</code> object to be forwarded to the browser as part of the call to <code>openURL:</code>. Note that PCM app-to-web is so far only supported in Safari and only on iOS and iPadOS. We intend to add WebKit API to enable other default browsers to be the destination of PCM app-to-web too. </li>\n</ol>\n<figure class=\"aligncenter\"><img loading=\"lazy\" src=\"https://webkit.org/wp-content/uploads/app-to-web.png\" alt=\"\" width=\"2901\" height=\"870\" class=\"wp-image-11539\" srcset=\"https://webkit.org/wp-content/uploads/app-to-web.png 2901w, https://webkit.org/wp-content/uploads/app-to-web-300x90.png 300w, https://webkit.org/wp-content/uploads/app-to-web-1024x307.png 1024w, https://webkit.org/wp-content/uploads/app-to-web-768x230.png 768w, https://webkit.org/wp-content/uploads/app-to-web-1536x461.png 1536w, https://webkit.org/wp-content/uploads/app-to-web-2048x614.png 2048w\" sizes=\"(max-width: 2901px) 100vw, 2901px\" /></figure>\n<h3><code>UIEventAttribution</code></h3>\n<p>This is the optional data structure you submit in your call to <code>openURL:</code> when you want to measure clicks:</p>\n<pre><code>open class UIEventAttribution : NSObject, NSCopying {\n    open var sourceIdentifier: UInt8 { get }\n    open var destinationURL: URL { get }\n    open var reportEndpoint: String? { get }\n    open var sourceDescription: String { get }\n    open var purchaser: String { get }\n    public init(sourceIdentifier: UInt8,\n                destinationURL: URL,\n                sourceDescription: String,\n                purchaser: String)\n}\n</code></pre>\n<ul>\n<li><code>sourceIdentifier</code> is the same as PCM’s <code>attributionsourceid</code> attribute for links. Allowed values are 0-255.</li>\n<li><code>destinationURL</code> is the same as PCM’s <code>attributeon</code> attribute for links but it should be a full URL with protocol. The report will be sent to the URL’s <a href=\"https://webkit.org/tracking-prevention/#terminology\">registrable domain</a> (eTLD+1) and over HTTPS.</li>\n<li><code>reportEndpoint</code> will be picked up by Apple code from your info.plist’s <code>NSAdvertisingAttributionReportEndpoint</code>. As you can see, the <code>init</code> function does not take this parameter. This is where PCM will send any subsequent ad attribution reports. The reason why it need to be stated in the static Info.plist is so that it cannot be used as a tracking vector by dynamically submitting user-specific reporting URLs such as <code>janeDoeTracking.example</code>.</li>\n<li><code>sourceDescription</code> is a human-readable description of the content that was tapped. This string should be no longer than roughly 100 characters and can be localized according to the context. It will not be seen by Apple or the destination website. Instead it’s intended to be able to show to users what ad click data they have stored.</li>\n<li><code>purchaser</code> is a human-readable name or description of the purchaser of the content that was tapped, typically the ad buyer. This string should be no longer than roughly 100 characters and can be localized according to the context. It will not be seen by Apple or the destination website. Instead it’s intended to be able to show to users what ad click data they have stored.</li>\n</ul>\n<h3><code>UIEventAttribution</code> Sample Code</h3>\n<pre><code>func openAdLink() {\n    let adURL = URL(string: \"https://shop.example/tabletStandDeluxe.html\")!\n    let eventAttribution =\n        UIEventAttribution(sourceIdentifier: 4,\n                           destinationURL: adURL,\n                           sourceDescription: \"Banner ad for Tablet Stand Deluxe.\",\n                           purchaser: \"Shop Example, Inc.\")\n\n    // If using scene lifecycle.\n    let sceneOpenURLOptions = UIScene.OpenExternalURLOptions()\n    sceneOpenURLOptions.eventAttribution = eventAttribution\n    self.view.window?.windowScene?.open(adURL,\n                                        options: sceneOpenURLOptions,\n                                        completionHandler: nil)\n\n    // If using application lifecycle.\n    let appOpenURLOptions: [UIApplication.OpenExternalURLOptionsKey : Any] = [\n        .eventAttribution: eventAttribution\n    ]\n    UIApplication.shared.open(adURL,\n                              options: appOpenURLOptions,\n                              completionHandler: nil)\n}\n</code></pre>\n<h3><code>UIEventAttributionView</code></h3>\n<p><code>UIEventAttributionView</code> is the view that is placed over the tappable content, typically an ad. It’s used by the system to verify that a user gesture has occurred.</p>\n<pre><code>open class UIEventAttributionView : UIView {\n}\n</code></pre>\n<p>The view is invisible and very lightweight. The simplest use case is to create one of these views and stretch it over your entire tappable content. You can also place multiple over a single piece of content if you for instance want to create specific tappable areas.</p>\n<p>To ensure your <code>UIEventAttributionView</code> works correctly:</p>\n<ul>\n<li>Ensure <code>isUserInteractionEnabled</code> is <code>false</code>. This is the default value for this view and ensures the view doesn’t consume events which would otherwise go to the content beneath it.</li>\n<li>Ensure there are no views placed on top of the event attribution view. The user should be tapping this view for it to count as a user gesture for the purposes of PCM app-to-web.</li>\n<li>Ensure your tap handling occurs on a touch up event. This automatically occurs if your content is tapped in response to a <code>UITapGestureRecognizer</code> firing or at the <code>.ended</code> state of a <code>UILongPressGestureRecognizer</code>.</li>\n</ul>\n<h3><code>UIEventAttributionView</code> Sample Code</h3>\n<pre><code>func addEventAttributionView() {\n    // Create an event attribution view.\n    let eventAttributionView = UIEventAttributionView()\n\n    // Place it over your ad however you'd like.\n    eventAttributionView.translatesAutoresizingMaskIntoConstraints = false\n    adView.addSubview(eventAttributionView)\n    NSLayoutConstraint.activate([\n        adView.topAnchor.constraint(equalTo: eventAttributionView.topAnchor),\n        adView.leadingAnchor.constraint(equalTo: eventAttributionView.leadingAnchor),\n        adView.trailingAnchor.constraint(equalTo: eventAttributionView.trailingAnchor),\n        adView.bottomAnchor.constraint(equalTo: eventAttributionView.bottomAnchor)\n    ])\n}\n</code></pre>\n<h2>Testing and Debugging</h2>\n<p>WebKit has an experimental feature called Private Click Measurement Debug Mode. You’ll find it under Develop–>Experimental Features on macOS and under Settings–>Safari–>Advanced–>Experimental Features on iOS and iPadOS. When you enable this mode and restart Safari, reports go out a mere 10 seconds after the triggering event instead of 24-48 hours later. This allows quick turnaround in testing and debugging.</p>\n<p>The debug mode also enables debug output in Web Inspector’s console. This output will show up by default in a later beta.</p>\n<p>Remember to disable debug mode once you’re done testing.</p>\n<h2>Future Enhancements</h2>\n<p>As is always the case with web standards, proposed or established, there are enhancement requests, corner cases, and a need to evolve the specification as the platform progresses. Below is a list of prominent and relevant issues that may show up as changes to our implementation of PCM in upcoming releases. Please take part on GitHub if you have input.</p>\n<ul>\n<li><strong>Fraud prevention</strong> with unlinkable tokens, <a href=\"https://github.com/privacycg/private-click-measurement/issues/27\">GitHub issue #27</a>. A proposed solution was presented to W3C Privacy CG in May 2020. It will use what is traditionally called <a href=\"https://en.wikipedia.org/wiki/Blind_signature\">blinded signatures</a> (we call them unlinkable tokens). The intention is to offer websites to cryptographically sign tokens which will be included in attribution reports in a format that makes it impossible to link them back to the event when they were signed. These tokens serve as proof to the report recipient that they trusted the events involved (link click and attribution trigger) without telling them <em>which</em> events.</li>\n<li><strong>Modern JavaScript API</strong> for triggering event instead of legacy tracking pixels, <a href=\"https://github.com/privacycg/private-click-measurement/issues/31\">GitHub issue #31</a>. The intent here is to let a JavaScript call serve as the triggering event instead of redirected tracking pixels. This will remove the requirement for making third-party requests all together.</li>\n<li><strong>Attribution reports to advertisers</strong> too, <a href=\"https://github.com/privacycg/private-click-measurement/issues/53\">GitHub issue #53</a>. We have expressed that we’d like the attribution report to be sent to both the click source and the advertiser site. However, this sparked a conversation on sending reports to designated third-parties and you can read and join that conversation in <a href=\"https://github.com/privacycg/private-click-measurement/issues/57\">GitHub issue #57</a>.</li>\n<li>Support PCM links in <strong>nested iframes</strong>, <a href=\"https://github.com/privacycg/private-click-measurement/issues/7\">GitHub issue #7</a>. This is about measuring click-through ads served in cross-site iframes. Since subsequent attribution reports will be sent to the first-party click source site, it’s not clear how that first party should control click measurement requested on its behalf. Part of this conversation covers not just serving of ads by third parties but also <em>reporting</em> to such third-parties. The privacy risk of such a scheme is explored in <a href=\"https://github.com/privacycg/private-click-measurement/issues/57\">GitHub issue #57</a>.</li>\n</ul>\n<h2>Misuse or Use Together With Tracking May Lead To Blocking</h2>\n<p>PCM is intended to support privacy-preserving measurement of clicks across websites or from apps to websites. It is not intended to be used to track users, events, or devices across those contexts.</p>\n<p>If PCM is being misused for tracking purposes or being used in conjunction with unrelated means of tracking users, events, or devices, we may block the offending party from using PCM and potential future measurement features.</p>\n<h2>FAQ</h2>\n<ul>\n<li>What about PCM web-to-app? We are interested in this but don’t have a solution yet.</li>\n<li>What about view-through ad attribution? We are interested in this but don’t have a privacy-preserving solution yet.</li>\n<li>Is there a reason why the click has to take the user to the device’s browser? Yes. Stored clicks are valid for 7 days. Let’s assume that the user doesn&#8217;t trigger attribution right after they click but want to think about it first. When they choose to re-engage a few hours or days later they will most likely go to their browser and either look up the tab where they left off, use a bookmark they might have saved, use their search provider to find the right webpage, or enter the website&#8217;s address directly in the URL bar. For the stored click data to be readily available when the user re-engages in this fashion, the initial click needs to take the user to their browser since PCM data just like other website data is not shared between browsers and WebViews. In short: The user&#8217;s browser is the most likely place where delayed click-through attribution will happen.</li>\n<li>Does use of PCM app-to-web require the app to be granted permission to track according to <a href=\"https://developer.apple.com/app-store/user-privacy-and-data-use/\">AppTrackingTransparency</a>? No.</li>\n<li>How do users delete stored clicks? Stored clicks are deleted when they delete website data.</li>\n<li>Can users opt out of PCM? Yes. There is a new Safari privacy setting for privacy-preserving ad measurement. If the user has opted out, no click metadata will be stored and no attribution reports will be sent out.</li>\n<li>Is PCM enabled in Private Browsing Mode? No.</li>\n<li>What is the maximum number of parallel ad campaigns per source website or source app? 256, with the actual value being between 0 and 255.</li>\n<li>What is the maximum number of  triggering events I can distinguish? 16, with the actual value being between 0 and 15.</li>\n<li>What is the maximum time between a click and a triggering event to still get attribution? 7 days.</li>\n<li>Can I use PCM app-to-web with WebViews? No. Apps have too much control over WebViews for a feature like PCM to be able to protect the data.</li>\n<li>Can I use PCM app-to-web with SFSafariViewController? We are interested in this but don’t have a solution yet.</li>\n<li>Can other default browsers on iOS and iPadOS participate in PCM app-to-web? It is our intention to add such an API at a later point. Please let us know if you are interested.</li>\n<li>Where can I provide feedback? Please file any web-facing issues or issues with the attribution report mechanism directly to WebKit: <a href=\"https://bugs.webkit.org/\">https://bugs.webkit.org</a>. Please use Feedback Assistant for any issues with UIKit APIs or the Info.plist integration: <a href=\"https://developer.apple.com/bug-reporting/\">https://developer.apple.com/bug-reporting/</a>.</li>\n</ul>\n<h2>Thank You</h2>\n<p>We’d like to thank the <strong>W3C Privacy Community Group</strong> for all the work filing issues, suggesting changes, and engaging with us on this work. Please continue to do so as we move forward. Also, a big thank you to the engineers who’ve helped implement this feature – Anant, Kate, Jon, Chris, Jonathan, Chris, and Glen.</p>","author":"","siteTitle":"Blog – WebKit","siteHash":"7f8dbea0b8f53db2e11a2faa08c6dca9954c01638d09a2ce585b77a60d10f7a1","entryHash":"e37b252358c76a5e4e6e6b6c09959414c5878e61c92aa2551527849e45e9e60b","category":"Tech"}
{"title":"Building Alerts for Observability’s 4 Golden Signals with Terraform Cloud and New Relic","link":"https://www.hashicorp.com/blog/building-alerts-observability-4-golden-signals-with-terraform-cloud-new-relic","date":1612279800000,"content":"<p>At New Relic, we are heavy users of HashiCorp Terraform, which we use to provision all kinds of infrastructure and services, including New Relic dashboards and alerts. <a href=\"https://registry.terraform.io/browse/providers\">Terraform providers</a> are a big efficiency driver for us and for our customers that use Terraform to automate New Relic setup in their infrastructures. One of our customers,<a href=\"https://blog.newrelic.com/product-news/breaking-down-communication-barriers-with-observability/\"> 27Global</a>, described their efficiency gains through Terraform well:</p>\n<blockquote>\n<p>\"Historically, our cloud engineers would need to manually add monitoring to the infrastructure, and our developers would have to build monitoring into the applications. Now, using the Terraform Provider from New Relic, we take advantage of APIs to automatically add monitoring to our applications and infrastructure.\"   — Thomas Martin, Director of Site Reliability at 27Global</p>\n</blockquote>\n<p>In this guide, you’ll learn how to use the New Relic Terraform Provider on <a href=\"https://www.terraform.io/cloud\">Terraform Cloud</a>. We’ll walk through how to provision an alert policy, create four alert conditions, and set up a notification channel. The alert conditions are based on the <a href=\"https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/#xref_monitoring_golden-signals\">Four Golden Signals</a> of monitoring introduced in <a href=\"https://landing.google.com/sre/sre-book/toc/index.html\">Google’s Site Reliability Engineering book</a>.</p>\n<h2><a class=\"__permalink-h\" href=\"#the-four-golden-signals\" aria-label=\"the four golden signals permalink\">»</a><a class=\"__target-h\" id=\"the-four-golden-signals\" aria-hidden></a>The Four Golden Signals</h2>\n<ul>\n<li><strong>Latency</strong>: The amount of time it takes your application to service a request.</li>\n<li><strong>Traffic</strong>: The number of requests your system receives.</li>\n<li><strong>Errors</strong>: The rate of requests that fail.</li>\n<li><strong>Saturation</strong>: The stress on resources to meet the demands of your application.</li>\n</ul>\n<h2><a class=\"__permalink-h\" href=\"#the-advantages-of-using-terraform-cloud\" aria-label=\"the advantages of using terraform cloud permalink\">»</a><a class=\"__target-h\" id=\"the-advantages-of-using-terraform-cloud\" aria-hidden></a>The Advantages of Using Terraform Cloud</h2>\n<p>Once our New Relic alerts are set up with Terraform, you will be able to integrate Terraform Cloud into your workflow.</p>\n<p>With Terraform Cloud, you gain several advantages in maintaining your Terraform configuration locally. Terraform Cloud offers remote execution of your Terraform plans, remote state management, and provides a solid foundation to scale up as your team and infrastructure grow.</p>\n<h2><a class=\"__permalink-h\" href=\"#video-tutorial\" aria-label=\"video tutorial permalink\">»</a><a class=\"__target-h\" id=\"video-tutorial\" aria-hidden></a>Video Tutorial</h2>\n<p>If you want to follow along via video to set up Terraform on your local machine first, feel free to check out the getting started video my colleague Jon Thurman put together.</p><iframe width=\"560\" height=\"315\" src=https://www.youtube.com/watch?v=UwJ-7BLylJo frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><h2><a class=\"__permalink-h\" href=\"#before-you-begin\" aria-label=\"before you begin permalink\">»</a><a class=\"__target-h\" id=\"before-you-begin\" aria-hidden></a>Before You Begin</h2>\n<p>To use this guide, you should have some basic knowledge of both New Relic and Terraform. You will need to <a href=\"https://app.terraform.io/signup/account\">create a Terraform Cloud account</a> if you don’t already have one. You will want to <a href=\"https://docs.github.com/en/github/getting-started-with-github/create-a-repo\">create a new GitHub repository</a> so you can sync your code changes to Terraform Cloud. If you haven't deployed a New Relic open source agent yet, <a href=\"https://docs.newrelic.com/docs/agents/manage-apm-agents/installation/install-agent\">install New Relic</a> for your application. Also, <a href=\"https://www.terraform.io/intro/getting-started/install.html\">install the Terraform CLI</a>.</p>\n<h2><a class=\"__permalink-h\" href=\"#bootstrap-terraform-and-the-new-relic-provider\" aria-label=\"bootstrap terraform and the new relic provider permalink\">»</a><a class=\"__target-h\" id=\"bootstrap-terraform-and-the-new-relic-provider\" aria-hidden></a>Bootstrap Terraform and the New Relic Provider</h2>\n<p>Start by cloning your new GitHub repository into a directory named <code>terraform-project</code>, initialize the working directory, and create a Terraform configuration file:</p><pre><code>git clone <your-repository-url> terraform-project \ncd terraform-project\ntouch main.tf</code></pre><p>Next, instruct Terraform to install and use the New Relic provider, by setting the <code>terraform</code> and <code>required_providers</code> blocks in main.tf:</p><pre><code>terraform {\n  # Require Terraform version 0.13.x (recommended)\n  required_version = \"~> 0.13.0\"\n\n  # Require the latest 2.x version of the New Relic provider\n  required_providers {\n    newrelic = {\n      source  = \"newrelic/newrelic\"\n      version = \"~> 2.15\"\n    }\n  }\n}</code></pre><p>In this code block, you're setting the required version of Terraform to 0.13.x and setting the New Relic provider to the latest 2.x version. Using the right <a href=\"https://www.terraform.io/docs/configuration/version-constraints.html\">version constraints</a> for your setup will provide better stability with your Terraform runs.</p>\n<p>Now that you've set your Terraform and New Relic provider versions, you need to configure the New Relic provider.</p>\n<h2><a class=\"__permalink-h\" href=\"#configure-the-new-relic-provider\" aria-label=\"configure the new relic provider permalink\">»</a><a class=\"__target-h\" id=\"configure-the-new-relic-provider\" aria-hidden></a>Configure the New Relic Provider</h2>\n<p>With <code>terraform</code> all set, configure the New Relic <code>provider</code> with the following items:</p>\n<ol>\n<li>Your <a href=\"https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/account-id\">New Relic Account ID</a>.</li>\n<li>Your <a href=\"https://docs.newrelic.com/docs/apis/get-started/intro-apis/types-new-relic-api-keys#user-api-key\">New Relic User API key</a>. Most User API keys begin with the prefix <code>NRAK-</code>.</li>\n<li>Your <a href=\"https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers#verifying-account\">New Relic region</a>. Your region is <code>US</code> if your account settings page is located at <code>one.newrelic.com</code>, and <code>EU</code> if your account is located at <code>one.eu.newrelic.com</code>.</li>\n</ol>\n<p>We recommend configuring the New Relic provider using <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/guides/provider_configuration\">environment variables</a> to help keep sensitive credential information out of your codebase. This also allows for setting your environment variables in your Terraform Cloud workspace.</p>\n<p>To get started using environment variables, you will want to set the following in your local environment:</p><pre><code>export NEW_RELIC_ACCOUNT_ID=12345\nexport NEW_RELIC_API_KEY=\"NRAK-***\"\nexport NEW_RELIC_REGION=\"US\"</code></pre><p>It’s important to note that you will also be adding these environment variables to your Terraform Cloud workspace that you will be set up later in this guide.</p>\n<p>Since you are using environment variables to configure the New Relic provider, your <code>provider</code> block in your main.tf file can be left empty.</p><pre><code># If using environment variables, your provider block can be empty\nprovider \"newrelic\" {}</code></pre><p>By setting these values on the New Relic provider, you're configuring the provider to make changes on behalf of your account through New Relic APIs.</p>\n<p>For more information about configuring the New Relic provider, please feel free to check out our official provider <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/guides/provider_configuration\">documentation</a>.</p>\n<p>At this point, it’s a good idea to commit and push your code to your repository before you move on to wiring up your repository in Terraform Cloud.</p><pre><code>git commit -m \"initial commit for New Relic Terraform provider\"\ngit push</code></pre><h2><a class=\"__permalink-h\" href=\"#create-a-terraform-cloud-workspace\" aria-label=\"create a terraform cloud workspace permalink\">»</a><a class=\"__target-h\" id=\"create-a-terraform-cloud-workspace\" aria-hidden></a>Create a Terraform Cloud Workspace</h2>\n<p>With your GitHub repository updated with your Terraform configuration code, it’s time to integrate Terraform Cloud into the workflow. Terraform Cloud <a href=\"https://www.terraform.io/docs/cloud/workspaces/index.h\">Workspaces</a> offer a way to organize your infrastructure. You can think of a Terraform Cloud Workspace as a working directory for a collection of infrastructure configurations.</p>\n<p>We recommend following Terraform Cloud’s <a href=\"https://learn.hashicorp.com/collections/terraform/cloud-get-started\">getting started guide</a> to get up and running with a new workspace. The guide provides an example repository to link to the workspace, however, you will want to use the GitHub repository you created earlier.</p>\n<p>As part of the process, make sure to configure the environment variables mentioned earlier to the workspace.</p><img src=https://www.datocms-assets.com/2885/1611873611-configuration-uploaded-successfully.png alt=Config uploaded successfully><p>Add each of your associated New Relic environment variables using the screenshot below as an example. For sensitive credentials, we recommend checking the <strong>“sensitive”</strong> checkbox.</p><img src=https://www.datocms-assets.com/2885/1611873606-environment-variables-sensitive.png alt=Env vars sensitive><p>After you’ve created your workspace and linked it to your repository, you can start to build out the rest of your New Relic Terraform configuration. As you build out each new resource, you can push up your changes to your repository and then use Terraform Cloud to execute your plan to provision your resources. You can even set up your workspace to automatically pick up your changes and apply your Terraform plan as you push updates.</p>\n<p>You may also want to adjust some additional workspace options, such as “auto apply,” which will automatically apply your Terraform plan when you push up changes to your main branch. These settings can be found under <code>Settings > General.</code></p>\n<p>Lastly, you’ll want to make sure your workspace is configured to use the same version of Terraform as you configured in your main.tf file. The Terraform version specified in your main.tf file was Terraform version <strong>0.13.x</strong>, so you will want to set your workspace’s Terraform version to the latest 0.13.x, which at the time of writing is <strong>0.13.6</strong>.</p><img src=https://www.datocms-assets.com/2885/1611873602-terraform-version-136.png alt=TF version check><h2><a class=\"__permalink-h\" href=\"#create-a-new-relic-alert-policy-with-the-golden-signal-alerts\" aria-label=\"create a new relic alert policy with the golden signal alerts permalink\">»</a><a class=\"__target-h\" id=\"create-a-new-relic-alert-policy-with-the-golden-signal-alerts\" aria-hidden></a>Create a New Relic Alert Policy with the Golden Signal Alerts</h2>\n<p>Now that you have a Terraform Cloud workspace and your New Relic provider is configured, initialize Terraform:</p>\n<pre><code>terraform init\n</code></pre>\n<p>When Terraform finishes installing and registering the New Relic provider, you'll receive a success message and some actionable next steps, such as running <code>terraform plan</code>. But thanks to Terraform Cloud, manually running Terraform commands is unnecessary other than to potentially test your configuration with a dry run.</p>\n<p>With the New Relic provider configured and successfully initialized, you can define an alerting strategy for your application.</p>\n<p>Since you're targeting a specific application, use a <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/data-sources/entity\"><code>newrelic_entity</code></a> to fetch the application information from New Relic and allow us to reference that data elsewhere in the configuration:</p><pre><code>data \"newrelic_entity\" \"example_app\" {\n  name = \"Your App Name\" # Must be an exact match to your application name in New Relic\n  domain = \"APM\" # or BROWSER, INFRA, MOBILE, SYNTH, depending on your entity's domain\n  type = \"APPLICATION\"\n}</code></pre><p>Next, create a <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/alert_policy\"><code>newrelic_alert_policy</code></a>. Give the policy a dynamic name based on your application's name. This helps specify the scope of the policy:</p><pre><code>resource \"newrelic_alert_policy\" \"golden_signal_policy\" {\n  name = \"Golden Signals - ${data.newrelic_entity.example_app.name}\"\n}</code></pre><p>At this point, you should be able to test your configuration with a dry run:</p>\n<pre><code>terraform plan\n</code></pre>\n<p>You will see some output that displays Terraform's execution plan if you were to run <code>terraform apply</code> yourself, but we’re only running this manually to ensure things are set up properly.</p><pre><code>[output] {muted}# Example output\n[output] ------------------------------------------------------------------------\n[output]\n[output] An execution plan has been generated and is shown below.\n[output] Resource actions are indicated with the following symbols:\n[output]   + create\n[output]\n[output] Terraform will perform the following actions:\n[output]\n[output]   # newrelic_alert_policy.golden_signal_policy will be created\n[output]   + resource \"newrelic_alert_policy\" \"golden_signal_policy\" {\n[output]       + account_id          = (known after apply)\n[output]       + id                  = (known after apply)\n[output]       + incident_preference = \"PER_POLICY\"\n[output]       + name                = \"Golden Signals - Your App Name\"\n[output]     }\n[output]\n[output] Plan: 1 to add, 0 to change, 0 to destroy.\n[output]\n[output] ------------------------------------------------------------------------</code></pre><p>In this case, the plan shows you that Terraform will create a new alert policy when you run <code>terraform apply</code>, but we’re going to let Terraform Cloud handle that for us.</p>\n<p>Instead of running <code>terraform apply</code>, commit your code changes and push to your repository.</p><pre><code>git add main.tf \ngit commit -m \"added New Relic entity data source and alert policy resource\"\ngit push</code></pre><p>With your updates pushed up, queue a Terraform run in your workspace:</p>\n<p>You will see similar <code>terraform plan </code>output, but this time it will be within the Terraform Cloud UI. If you have the “auto apply” settings turned on, a successful Terraform plan will result in your plan getting automatically applied, otherwise you will need to use the UI to apply the plan.</p>\n<p>Once you’ve applied your Terraform plan, <a href=\"https://login.newrelic.com/login\">log in to New Relic</a> and <a href=\"https://docs.newrelic.com/docs/alerts-applied-intelligence/new-relic-alerts/alert-policies/create-edit-or-find-alert-policy#alert-policy-view\">navigate to Alert Policies</a> to confirm that Terraform created your new policy.</p>\n<p>As you move through the next steps of creating alert conditions, you can commit and push your changes and then use Terraform Cloud to execute your Terraform plan and apply the updates. After each update, refresh your alert policy webpage to see the new alert conditions added to your policy.</p>\n<h2><a class=\"__permalink-h\" href=\"#provision-alert-conditions-based-on-the-four-golden-signals\" aria-label=\"provision alert conditions based on the four golden signals permalink\">»</a><a class=\"__target-h\" id=\"provision-alert-conditions-based-on-the-four-golden-signals\" aria-hidden></a>Provision Alert Conditions Based on the Four Golden Signals</h2>\n<p>Next, add alert conditions for your application based on the four golden signals: latency, traffic, errors, and saturation. Apply these alert conditions to the alert policy you created in the previous step.</p>\n<h3><a class=\"__permalink-h\" href=\"#latency\" aria-label=\"latency permalink\">»</a><a class=\"__target-h\" id=\"latency\" aria-hidden></a>Latency</h3>\n<p>Most folks want to avoid slow response times. You can create a <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/alert_condition\"><code>newrelic_alert_condition</code></a> that triggers if the overall response time of your application rises above five seconds for five minutes:</p><pre><code># Response time\nresource \"newrelic_alert_condition\" \"response_time_web\" {\n  policy_id       = newrelic_alert_policy.golden_signal_policy.id\n  name            = \"High Response Time (Web) - ${data.newrelic_entity.example_app.name}\"\n  type            = \"apm_app_metric\"\n  entities        = [data.newrelic_entity.example_app.application_id]\n  metric          = \"response_time_web\"\n  runbook_url     = \"https://www.example.com\"\n  condition_scope = \"application\"\n\n  term {\n    duration      = 5\n    operator      = \"above\"\n    priority      = \"critical\"\n    threshold     = \"5\"\n    time_function = \"all\"\n  }\n}</code></pre><p>Note that you're linking this alert condition to the previously configured alert policy with <code>policy_id</code>.</p>\n<h3><a class=\"__permalink-h\" href=\"#traffic\" aria-label=\"traffic permalink\">»</a><a class=\"__target-h\" id=\"traffic\" aria-hidden></a>Traffic</h3>\n<p>Traffic represents how much demand is placed on your system at any given moment. Throughput is a metric that measures how much traffic goes to your application. Create a <code>newrelic_alert_condition</code> that triggers if the overall response rate of your application falls below five requests per minute for five minutes:</p><pre><code># Low throughput\nresource \"newrelic_alert_condition\" \"throughput_web\" {\n  policy_id       = newrelic_alert_policy.golden_signal_policy.id\n  name            = \"Low Throughput (Web)\"\n  type            = \"apm_app_metric\"\n  entities        = [data.newrelic_entity.example_app.application_id]\n  metric          = \"throughput_web\"\n  condition_scope = \"application\"\n\n  # Define a critical alert threshold that will\n  # trigger after 5 minutes below 5 requests per minute.\n  term {\n    priority      = \"critical\"\n    duration      = 5\n    operator      = \"below\"\n    threshold     = \"5\"\n    time_function = \"all\"\n  }\n}</code></pre><p>This type of alert is useful when you expect a constant baseline of traffic throughout the day — a drop off in traffic can indicate a problem.</p>\n<h3><a class=\"__permalink-h\" href=\"#errors\" aria-label=\"errors permalink\">»</a><a class=\"__target-h\" id=\"errors\" aria-hidden></a>Errors</h3>\n<p>If your application's error rate spikes, you need to know about it. Create a <code>newrelic_alert_condition</code> that triggers if your application's error rate rises above 5% for five minutes:</p><pre><code># Error percentage\nresource \"newrelic_alert_condition\" \"error_percentage\" {\n  policy_id       = newrelic_alert_policy.golden_signal_policy.id\n  name            = \"High Error Percentage\"\n  type            = \"apm_app_metric\"\n  entities        = [data.newrelic_entity.example_app.application_id]\n  metric          = \"error_percentage\"\n  runbook_url     = \"https://www.example.com\"\n  condition_scope = \"application\"\n\n  # Define a critical alert threshold that will trigger after 5 minutes above a 5% error rate.\n  term {\n    duration      = 5\n    operator      = \"above\"\n    threshold     = \"5\"\n    time_function = \"all\"\n  }\n}</code></pre><h3><a class=\"__permalink-h\" href=\"#saturation\" aria-label=\"saturation permalink\">»</a><a class=\"__target-h\" id=\"saturation\" aria-hidden></a>Saturation</h3>\n<p>Saturation represents how \"full\" your service is and can take many forms, such as CPU time, memory allocation, or queue depth. In this example, assume you already have a <a href=\"https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent\">New Relic Infrastructure agent</a> installed on the hosts serving your application, and you want to configure an alert for when CPU utilization spikes above a certain threshold:</p><pre><code># High CPU usage\nresource \"newrelic_infra_alert_condition\" \"high_cpu\" {\n  policy_id   = newrelic_alert_policy.golden_signal_policy.id\n  name        = \"High CPU usage\"\n  type        = \"infra_metric\"\n  event       = \"SystemSample\"\n  select      = \"cpuPercent\"\n  comparison  = \"above\"\n  runbook_url = \"https://www.example.com\"\n  where       = \"(`applicationId` = '${data.newrelic_entity.example_app.application_id}')\"\n\n  # Define a critical alert threshold that will trigger after 5 minutes above 90% CPU utilization.\n  critical {\n    duration      = 5\n    value         = 90\n    time_function = \"all\"\n  }\n}</code></pre><p>For the Infrastructure alert, you created a <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/infra_alert_condition\"><code>newrelic_infra_alert_condition</code></a> that triggers if the aggregate CPU usage on these hosts rises above 90% for five minutes.</p>\n<h2><a class=\"__permalink-h\" href=\"#get-notified-when-an-alert-triggers\" aria-label=\"get notified when an alert triggers permalink\">»</a><a class=\"__target-h\" id=\"get-notified-when-an-alert-triggers\" aria-hidden></a>Get Notified When an Alert Triggers</h2>\n<p>Now that you've configured some important alert conditions, add a notification channel to your alert policy to ensure the proper folks get notified when an alert triggers. To do so, use a <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/alert_channel\"><code>newrelic_alert_channel</code></a>.</p>\n<p>To begin, create an email notification channel to send alert notifications to your email. Use this when you want to notify a specific person or team when alerts are triggered:</p><pre><code>resource \"newrelic_alert_channel\" \"team_email\" {\n  name = \"example\"\n  type = \"email\"\n\n  config {\n    recipients              = \"yourawesometeam@example.com\"\n    include_json_attachment = \"1\"\n  }\n}</code></pre><p>If you want to specify multiple <code>recipients</code>, use a comma-delimited list of emails.</p>\n<p>Last, but not least, in order to apply the notification channel to your alert policy, create a <code>newrelic_alert_policy_channel</code>.</p><pre><code>newrelic_alert_policy_channel:\nresource \"newrelic_alert_policy_channel\" \"golden_signals\" {\n  policy_id   = newrelic_alert_policy.golden_signal_policy.id\n  channel_ids = [newrelic_alert_channel.team_email.id]\n}</code></pre><p>A <code>newrelic_alert_policy_channel</code> links the notification channel you just created to your alert policy.</p>\n<p>To finalize your golden signal alerts configuration, commit and push up your changes, then queue your plan again one last time from Terraform Cloud to make sure everything is up to date.</p>\n<p><code>new_relic_alert_channel</code> <a href=\"https://registry.terraform.io/providers/newrelic/newrelic/latest/docs/resources/alert_channel#argument-reference\">supports several types</a> of notification channels, including: email, slack, and pagerduty. So, if you want to explore this more, try creating an alert channel for a second channel type, such as Slack:</p><pre><code># Slack notification channel\nresource \"newrelic_alert_channel\" \"slack_notification\" {\n  name = \"slack-example\"\n  type = \"slack\"\n\n  config {\n    # Use the URL provided in your New Relic Slack integration\n    url     = \"https://hooks.slack.com/services/XXXXXXX/XXXXXXX/XXXXXXXXXX\"\n    channel = \"your-slack-channel-for-alerts\"\n  }\n}</code></pre><p>Before you <code>apply</code> this change, you need to add the <a href=\"https://slack.com/apps/A0F827KK2-new-relic-alerts\">New Relic Slack App</a> to your Slack account and select a Slack channel to send the notification. With this new alert channel, triggered alerts send notifications to the Slack channel of your choice.</p>\n<h2><a class=\"__permalink-h\" href=\"#conclusion\" aria-label=\"conclusion permalink\">»</a><a class=\"__target-h\" id=\"conclusion\" aria-hidden></a>Conclusion</h2>\n<p>As your team evaluates the alerting system you’ve put in place, you’ll find that you may need to tweak configuration values, such as the alert threshold and duration. If you manage your Terraform project in a remote repository, you can submit a pull request so your team can review these changes alongside the rest of your code contributions.</p>\n<p>In addition to maintaining your infrastructure code with a version control system, Terraform Cloud provides a safe and secure way to deploy your infrastructure changes. It also provides a great mechanism for managing your organization’s teams.</p>\n<p>For more information regarding various approaches to building a CI/CD pipeline with GitHub and Terraform Cloud, HashiCorp offers a <a href=\"https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github\">practitioner's guide</a> to help you figure out which approach would work best for your organization and a <a href=\"https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html\">recommended practices guide</a> to learn more about their recommended workflow and how to evolve your provisioning practices.</p>\n<p>Congratulations! You're officially practicing observability as code. Ready for more advanced New Relic guides and tutorials? Visit the <a href=\"http://developer.newrelic.com/\">New Relic developer site</a>.</p>","author":"Sander Blue","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"a8ffaab77b95be58475f54b4f6bbe1f286f896a79bc47f32b0b299dcd5f25757","category":"Tech"}
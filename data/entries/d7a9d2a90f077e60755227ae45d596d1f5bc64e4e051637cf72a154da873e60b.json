{"title":"Announcing the Snowflake Secrets Engine","link":"https://www.hashicorp.com/blog/announcing-the-snowflake-secrets-engine","date":1619107200000,"content":"<p>As part of our recent release of <a href=\"https://www.vaultproject.io/docs/release-notes/1.7.0\">Vault 1.7</a> and general availability launch of <a href=\"https://www.hashicorp.com/blog/vault-on-the-hashicorp-cloud-platform-ga\">HCP Vault</a>, we are excited to announce the <a href=\"https://www.vaultproject.io/docs/secrets/databases/snowflake\">Snowflake Secrets Engine</a> for self-managed HashiCorp Vault and HCP Vault. The secrets engine is packaged as part of the general <a href=\"https://www.vaultproject.io/docs/secrets/databases\">database secrets engine</a> and supports root credential rotation as well as dynamic and static roles (these are not to be confused with roles in Snowflake such as <code>accountadmin</code>).</p>\n<h2><a href=\"#what-is-vault\">»</a><a></a>What is Vault?</h2>\n<p>HashiCorp <a href=\"https://www.vaultproject.io/\">Vault</a> is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. Vault provides a unified interface to any secret while providing tight access control and recording a detailed audit log.</p>\n<p>With the HashiCorp Cloud Platform (HCP) Vault managed service, organizations can get up and running quickly, providing immediate access to Vault’s best-in-class secrets management and encryption capabilities while also offloading resilience and operational management concerns to HashiCorp.</p>\n<h2><a href=\"#what-are-dynamic-secrets-why-use-them\">»</a><a></a>What Are Dynamic Secrets? Why Use Them?</h2>\n<p>Today most organizations utilize static secrets. These are defined ahead of time and shared between many clients and can be long-lived. A <a href=\"https://www.hashicorp.com/blog/why-we-need-dynamic-secrets\">dynamic secret</a> is generated on demand and is unique to a client. Vault associates each dynamic secret with a lease and automatically destroys the credentials when the lease expires. By leveraging just-in-time ephemeral credentials, organizations are able to dramatically reduce the blast radius in case of credential leakage. Vault takes over the operational burden of managing credential lifecycle by renewing or revoking credentials as needed.</p>\n<h2><a href=\"#what-is-snowflake\">»</a><a></a>What is Snowflake?</h2>\n<p><a href=\"https://www.snowflake.com/\">Snowflake</a> delivers the Data Cloud, a global network where thousands of organizations mobilize data with near-unlimited scale, concurrency, and performance. Inside the Data Cloud, organizations unite their siloed data, easily discover and securely share governed data, and execute diverse analytic workloads. Wherever data or users live, Snowflake delivers a single and seamless experience across multiple public clouds. Snowflake’s platform is the engine that powers and provides access to the Data Cloud, creating a solution for data warehousing, data lakes, data engineering, data science, data application development, and data sharing. Join Snowflake customers, partners, and data providers already taking their businesses to new frontiers in the Data Cloud.</p>\n<p>With HCP Vault being generally available, Snowflake customers can take advantage of a managed service offering that aligns with the deployment model they are used to.</p>\n<h2><a href=\"#the-snowflake-database-secrets-engine\">»</a><a></a>The Snowflake Database Secrets Engine</h2>\n<p>As mentioned, the database secrets engine supports static and dynamic roles as well as root credential rotation. For both static and dynamic roles, the Snowflake secrets engine supports the setting of <a href=\"https://www.vaultproject.io/docs/concepts/password-policies\">default password policies</a> so the generated passwords will meet an organization's password requirements.</p>\n<h3><a href=\"#example-snowflake-use-cases\">»</a><a></a>Example Snowflake Use Cases</h3>\n<p>While many Snowflake customers may have single sign-on (SSO) set up for end users, they may still have some passwords to manage in Snowflake. This plugin can manage the lifecycle and access to those passwords with HashiCorp Vault.</p>\n<p><strong>Root accountadmin user:</strong> Customers will want at least one user with an <code>accountadmin</code> role in Snowflake that can authenticate using a username and password in Snowflake. This user is required to fix SSO issues. Since this is a privileged user with the highest level of access, the password of this user needs to be protected. Vault can be used to manage this password and rotate it on demand in regular intervals.</p>\n<p><strong>Service user accounts:</strong> Snowflake users may have ETL and other automation tools that connect to Snowflake using a service account user. If these tools support username and password authentication only, then Vault can be used to generate dynamic, short-lived credentials for these service user accounts.</p>\n<h3><a href=\"#setup\">»</a><a></a>Setup</h3>\n<p>Configure Vault with the proper plugin and connection information. <strong>Note</strong>: A properly formatted data source name (DSN) must be provided during configuration of the database (e.g. <code>{{username}}:{{password}}@account/db_name</code>).</p><pre><code>$ vault write database/static-roles/my-static-role \\\n        plugin_name=snowflake-database-plugin \\\n        allowed_roles=\"my-role\" \\ \n        connection_url=\"{{username}}:{{password}}@ecxxxx.west-us-1.azure/db_name\" \\\n        username=\"vaultuser\" \\\n        password=\"vaultpass\"</code></pre><h3><a href=\"#static-roles\">»</a><a></a>Static Roles</h3>\n<p>Static roles are a 1-to-1 mapping of Vault Roles to usernames in Snowflake. The current password for the database user is stored and automatically rotated by Vault on a configurable period of time.</p><pre><code>$vault write database/static-roles/my-static-role \\\n    db_name=\"my-snowflake-database\" \\\n    username=\"my-existing-snowflake-user\" \\\n    rotation_period=5m\n\n    $ vault read database/static-creds/my-static-role\n    Key                    Value\n    ---                    -----\n    last_vault_rotation    2020-08-07T16:50:48.393354+01:00\n    password               Z4-KH8F-VK5VJc0hSkXQ\n    rotation_period        5m\n    ttl                    4m39s\n    username               my-existing-snowflake-user</code></pre><h3><a href=\"#dynamic-roles\">»</a><a></a>Dynamic Roles</h3>\n<p>For dynamic roles, operators create a role in Vault that is mapped to a Snowflake role. When a credential request comes in from a client, Vault dynamically generates a unique username and password pair in Snowflake and automatically associates it with the corresponding role. Vault returns the credentials to the client. Once the lease expires, Vault automatically drops the user from Snowflake.</p><pre><code>$vault write database/roles/my-dynamic-role \\\n    db_name=my-snowflake-database \\\n        creation_statements=\"CREATE USER {{name}} \n        PASSWORD = '{{password}}' \n        DEFAULT_ROLE=myrole; \n        GRANT ROLE myrole TO USER {{name}};\" \\ \n        default_ttl=1m  max_ttl=24h\n\n    $ vault read database/creds/my-dynamic-role\n    Key                Value\n    ---                -----\n    lease_id           database/creds/my-dynamic-role/wiLNQjtcvCOT1VnN3qnUJnBz\n    lease_duration     24h\n    lease_renewable    true\n    password           mhyM-Gs7IpmOPnSqXEDe\n    username           v-root-my-dynamic-role-eXnVr4gm55dpM1EVgTYz-1596815027</code></pre><h3><a href=\"#root-credential-rotation\">»</a><a></a>Root Credential Rotation</h3>\n<p>Since Vault is managing the database credentials on behalf of the database administrator, it needs a set of highly privileged credentials that can create and delete users in the database system. Therefore, it is very common to give Vault a set of root credentials. However, these credentials are often long-lived and never change once configured on Vault. This may violate the governance, risk, and compliance (GRC) policies surrounding that data stored in the database. Vault is able to rotate the root credentials stored for the Snowflake database connection. Once the root credential has been rotated, only Vault knows the new password.</p>\n<h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>The Snowflake Secrets Engine is packaged as part of the Database Secrets Engine plugin. This plugin is available with all versions of Vault. Step-by-step instructions on how to use the secrets engine are available in the <a href=\"https://www.vaultproject.io/docs/secrets/databases/couchbase\">Vault documentation</a>, and you can try it out right now with <a href=\"https://portal.cloud.hashicorp.com/sign-up\">HCP Vault</a>.</p>","author":"Alex Cahn","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"d7a9d2a90f077e60755227ae45d596d1f5bc64e4e051637cf72a154da873e60b","category":"Tech"}
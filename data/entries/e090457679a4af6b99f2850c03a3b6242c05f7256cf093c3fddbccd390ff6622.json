{"title":"ลอง Mithril.js","link":"https://blog.whs.in.th/node/3452","date":1590340831000,"content":"<p>หลังจากเขียน Vue ไปเกือบเสร็จ มารู้ว่า Vue จะทำ hook โดยเฉพาะที่ Vue 3 อยากจะเปลี่ยน API เป็น function หมดแล้วโดนด่าต้องถอยสุดซอย การันตีว่าจะไม่เปลี่ยนอีกใน Vue 3.x (แล้ว 4 ล่ะ?) ก็เลยว่าจะ rewrite</p>\n\n\n\n<p>สรุปว่า Project นี้เปลี่ยน framework ไปแล้ว 3 ตัว คือ Svelte (รีวิวไว้ใน Facebook ตั้งแต่ Svelte 3 ออก), Vue และ Mithril</p>\n\n\n\n<p>Mithril นี่ claim มันคือมันบอกว่า API design มันคิดมาถูกตั้งนานแล้ว React อ่ะ design มั่วถึงต้องเปลี่ยนไปเปลี่ยนมา</p>\n\n\n\n<p>แถม bundle size เล็กมาก 10kB เท่านั้น แล้วไม่ใช่แค่ view library อย่างเดียวแต่ใน 10kB นี้รวม router, promise polyfill และ XHR library แล้วด้วย!! แล้วเค้าก็ขายต่อว่า เพราะโค้ดมันเล็ก มันเลย review ได้ง่ายว่าปัญหาอยู่ตรงไหน performance ก็จะดีตาม</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"582\" height=\"178\" src=\"https://blog.whs.in.th/wp-content/uploads/2020/05/image.png\" alt=\"\" class=\"wp-image-3453\" srcset=\"https://blog.whs.in.th/wp-content/uploads/2020/05/image.png 582w, https://blog.whs.in.th/wp-content/uploads/2020/05/image-300x92.png 300w\" sizes=\"(max-width: 582px) 85vw, 582px\" /></figure>\n\n\n\n<p>ส่วนว่าทำไม Mithril มีมาตั้งแต่ 6 ปีแล้วแต่ไม่ดัง บางคนบอกว่า &#8220;อ๋อ คนเขียน Mithril เค้าไม่ว่างเชียร์ พอดีกำลังเพลิดเพลินกับการเขียนโค้ดอยู่&#8221;</p>\n\n\n\n<p>เอาสิ คนเขียน Vue ยังไม่ขิงขนาดนี้อ่ะ</p>\n\n\n\n<h2>Reactivity</h2>\n\n\n\n<p>View library ยุคใหม่ๆ จะเป็น Declarative หมด ก็คือเราบอกว่า interface หน้าตาแบบนี้ แล้ว library จะไปหาทาง update UI บนหน้าจอให้ตรงกับสิ่งที่เราบอกเอง</p>\n\n\n\n<p>แต่สิ่งที่แสดงบนหน้าจอมักจะ depend กับ state เมื่อ state เปลี่ยนต้อง rerender interface ใหม่ ซึ่งวิธีที่แต่ละ Library ทำก็จะแตกต่างกันออกไป&#8230;</p>\n\n\n\n<ul><li>AngularJS 1 ใช้ <a href=\"https://docs.angularjs.org/guide/scope#scope-watch-performance-considerations\">dirty checking</a> โดยมันจะแอบ clone state เก่าไว้ พอเราแก้มันจะ diff state เก่ากับใหม่เพื่อดูว่า state ตรงไหนเปลี่ยน แล้ว view ตรงไหน depend กับ state นี้</li><li>MobX 4 กับ VueJS 2 ใช้วิธี rewrite ทุก field บน state object ให้มี getter setter เพื่อที่จะได้ track การใช้งานได้ว่ามีการ set field นี้ แล้วใคร get มันบ้าง</li><li>MobX 5 กับ VueJS 3 ใช้ <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy</a> แทนการ rewrite field</li><li>Svelte ใช้ compiler rewrite field assignment ให้ไป mark ว่า field นี้มีการเปลี่ยนแปลง</li><li>React บังคับให้ state เป็น Immutable เพื่อให้ set state ได้ทางเดียว เมื่อ set แล้วก็จะ rerender component ที่เปลี่ยน state เพราะไม่รู้ว่าตรงไหนใช้อะไรบ้าง</li><li>Redux ใช้ Immutable state เช่นกัน เมื่อมีการ dispatch action แล้ว listener จะยิงให้ view library refresh</li></ul>\n\n\n\n<p>คำตอบของ Mithril คือ Mithril ไม่มี reactivity</p>\n\n\n\n<p>ถ้าใครเขียน AngularJS 1 หรือ MobX จะรู้ว่าการเปลี่ยนค่าตัวแปรจะต้องรันในฟังค์ชั่นที่อนุญาตเท่านั้น ไม่อย่างนั้นมันอาจจะไม่อัพเดต ใน angular เรียกว่า $apply หรือ MobX เรียกว่า action เมื่อออกจาก action แล้ว library จึงจะเช็คว่าต้องแจ้งใครให้อัพเดตตามบ้าง</p>\n\n\n\n<p>ใน Mithril โค้ดก็จะคล้ายๆ กัน แต่ไม่ต้องครอบฟังค์ชั่น เพียงแค่เรียก <code>m.redraw()</code> หลังจากแก้ state เสร็จแล้วเท่านั้นเอง แล้วมันจะ rerender ทั้งหน้าเว็บหลัง <code>requestAnimationFrame</code></p>\n\n\n\n<p>แล้วจุดที่มักจะมี state change ใน Angular เองก็จะครอบ <code>$apply</code> ให้ ใน Mithril ก็จะทำให้เช่นกัน ได้แก่ event handler และ หลัง AJAX call (ถ้าใช้ <code>m.request</code>)</p>\n\n\n\n<p>ผมไม่แน่ใจว่าผมรู้สึกยังไงกับฟีเจอร์นี้ การทำ fine grained update แบบ Angular อาจจะฟังดูเร็วกว่าแต่มันก็มี CPU overhead และเพิ่ม code size ที่ต้อง track change ในขณะที่การรีเฟรชทั้งหมดก็เปลือง CPU</p>\n\n\n\n<h2>Global</h2>\n\n\n\n<p>State ของ Mithril เป็น Global เกือบทั้งหมดจนผมกังวลใจ</p>\n\n\n\n<p>เช่น ฟังค์ชั่น <code>m.redraw()</code> ที่เล่าไปด้านบน นั่นคือ Signature เต็มๆ ของมันแล้วเพราะ Mithril เก็บ state เป็น global ไม่ต้องบอกว่าจะ redraw อะไร</p>\n\n\n\n<p>หรือ Mithril router เองก็ใช้ <code>m.router.get()</code> อ่านค่า Route ล่าสุดโดยไม่ต้องพยายามหา router instance</p>\n\n\n\n<p>เรื่องนี้คิดว่าเป็นเรื่องหนึ่งที่ยากจะกลืน พอๆ กับที่ React เอา HTML กับ JavaScript ผสมกัน (คนเขียนเว็บยุคเก่าจะบอกว่ามันผิด <a href=\"https://medium.com/@chrisza/maintainability-1-separation-of-concerns-81785e801aa4\">Separation of Concern</a>) แต่คิดว่าที่ออกแบบมาแบบนี้เพราะ Mithril ไม่ได้คิดเรื่อง server side rendering เท่าไรนัก โค้ดที่ใช้ทำ SSR เองก็อยู่นอก codebase หลักของ Mithril</p>\n\n\n\n<p>ผมก็เลยต้องถามว่าแล้วมันจะ get router state บน server ยังไงให้มัน thread safe เพราะถ้ากำลัง fetch data อยู่แล้วอีก request เข้ามา route มันก็จะเปลี่ยน</p>\n\n\n\n<p>ปรากฎว่า ใน project ตัวอย่างมันใช้ Mithril router ใน clientside อย่างเดียว บน server มัน convert route definition ไปรันบน Express router</p>\n\n\n\n<p>ก็เป็นประเด็นหนึ่งที่น่ากังวลถ้าต้องทำ server side rendering เพราะมันทำได้ แต่อาจจะต้อง if แยกไปพอสมควร สำหรับใน project นี้แล้วไม่มี server side rendering ก็เลยยังไม่ต้องห่วงเท่าไร</p>\n\n\n\n<h2>Component</h2>\n\n\n\n<p>เล่าทฤษฎีเสียนาน เข้าประเด็นดีกว่าว่า Component ใน Mithril หน้าตาอย่างไร</p>\n\n\n\n<p>Component ใน Mithril เป็น JavaScript Object ธรรมดา ซึ่งก็น่าสนใจดีเพราะมันไม่ใช่ class ที่จะมี constructor และมันไม่ใช่ function ที่จะไม่มี state</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const component = {\n    view() {\n        return m(\".text\", [\"Hello world\"]);\n    }\n}</code></pre>\n\n\n\n<p>ในทางปฏิบัติเหมือนว่า Mithril จะทำให้ component มี state อยู่ดีและเราสามารถเก็บข้อมูลไว้ใน this ได้ หรือใช้เรียกเมธอดอื่นๆ บน component</p>\n\n\n\n<p>ฟังค์ชั่น JSX ของ Mithril คือ default export ของ Mithril เองซึ่งมักจะนิยมตั้งเป็น m</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">import m from 'mithril';</code></pre>\n\n\n\n<p>แต่ Mithril ไม่ค่อยจะเชียร์ JSX เท่าไรนักนอกจากบอกว่ามันก็ทำได้ เพราะ m จริงๆ นอกจากจะระบุ parameter แรกเป็น HTML Tag หรือ component ได้แล้วมันยังสามารถระบุ CSS Selector ได้ด้วย เรียกว่า <a href=\"https://github.com/hyperhype/hyperscript\">Hyperscript</a> เช่น <code>m(\"input.input-lg[type=text][name=username]\")</code> จะได้ผลเป็น <code>&lt;input class=\"input-lg\" type=\"text\" name=\"username\"&gt;</code> (กรณีที่มี dynamic attribute ก็ยังใส่ใน parameter ที่ 2 ของ <code>m</code> ได้ตามปกติเหมือน JSX ทั่วไป)</p>\n\n\n\n<p>การใช้งานจริงผมพบว่า Prettier ไม่เข้าใจ Hyperscript และทำให้โค้ดอ่านค่อนข้างยาก เช่น โค้ดนี้</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const component = {\n    view() {\n        return m(\"form.main\", {\n            onsubmit: onSubmit,\n        }, [\n            \"Username: \",\n            m(\"input[type=text][name=username]\"),\n            m(\"br\"),\n            m(\"input[type=submit][value=Submit]\"),\n        ]);\n    }\n}</code></pre>\n\n\n\n<p>จะโดน Prettier จัดเป็น</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const component = {\n    view() {\n        return m(\n            \"form.main\",\n            {\n                onsubmit: onSubmit,\n            },\n            [\n                \"Username: \",\n                m(\"input[type=text][name=username]\"),\n                m(\"br\"),\n                m(\"input[type=submit][value=Submit]\"),\n            ]\n        );\n    },\n};\n</code></pre>\n\n\n\n<p>ทำให้โค้ดค่อนข้างเทอะทะ อ่านยาก ทาง Prettier เองก็ไม่อยากให้มี Framework-specific formatting เท่าไรแต่อาจจะมีระบบ Plugin ในอนาคต</p>\n\n\n\n<p>ในขณะเดียวกันเองถ้าจะเลี่ยงปัญหานี้ไปเขียน JSX เลย ก็ยังรู้สึกว่า m syntax สะดวกในการเขียนมากกว่า อย่างหนึ่งคือมันแยก static attribute กับ dynamic attribute ออกจากกันชัดเจน ก็ยังตัดสินใจไม่ค่อยได้เท่าไรว่าใช้แบบไหนดี ไม่อยากผสมกันหลายๆ ท่าเพราะมันจะเหนื่อยตอน convert เมื่อ component เริ่มเปลี่ยนไปแล้วอีกแบบเหมาะกว่า</p>\n\n\n\n<h2>Local State</h2>\n\n\n\n<p>ผมดองบล็อคเรื่องว่า React hook มันผิดยังไงมานานแล้ว สั้นๆ คือ Function ไม่มี State แต่ปรากฏว่า React hook call แต่ละครั้งได้ผลไม่เหมือนกัน แปลว่ามันต้องมี Global state สักที่</p>\n\n\n\n<p>แล้ว React ก็ใส่ magic เข้าไป ทำให้ state แทนที่จะเป็น Global ก็ขึ้นอยู่กับ call site ได้ แต่เมื่อ call site เปลี่ยนมันก็พัง รวมถึงไปเรียกนอก React ไม่ได้</p>\n\n\n\n<p>คำถามคือ แล้ว useState() ที่ไม่ Magic หน้าตายังไง? ผมก็ไม่รู้เหมือนกัน จนกระทั่งมาเห็นท่าที่ Mithril ทำ</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function factory() {\n    let counter = 0;\n\n    return {\n        view() {\n            return m(\"div\", [\n                counter,\n                m(\"input[type=button]\", {\n                    onclick: () => {\n                        counter++\n                    }\n                })\n            ])\n        }\n    }\n}</code></pre>\n\n\n\n<p>ใช่! ใช่! ใช่!</p>\n\n\n\n<p>วิธีที่เป็น Idiomatic ของ JavaScript ในการทำ local state ก็คือ Closure กับ class attribute นี่แหละ</p>\n\n\n\n<p>เวลาใช้งาน function นี้เรา<strong>ไม่ต้อง</strong>เรียก factory function เองแต่ Mithril ยอมรับ component factory เป็น component ด้วย แล้วมันจะไป manage instance ให้เอง</p>\n\n\n\n<h2>Final Thoughts</h2>\n\n\n\n<p>ผมคิดว่า Mithril ยังไม่ตอบโจทย์อยู่ 2 เรื่องที่ framework อื่นๆ ถือเป็นเรื่อง Hot มาก คือ Server rendering ซึ่งตามมาด้วยประเด็นว่า Global state ใน Frontend มันกลายเป็นอดีตไปแล้วเมื่อมันต้อง render บน client side</p>\n\n\n\n<p>ถ้าตัด Server render ออกแล้วใช้ Global state คิดว่ามันก็น่าจะใช้ง่ายดี อาจจะตัด state management library ไปได้ด้วย แต่ถ้าทำแบบนั้นจะเอาไปเทียบกับเฟรมเวิร์คอื่นๆ ก็จะไม่แฟร์เท่าไร</p>\n\n\n\n<p>Claim ที่แฟน Mithril เขียนมันผมก็เลยยังตามหาไม่เจอว่าแล้วมันจริงหรือเปล่า เค้ามองเห็นอะไรที่ผมยังไม่เจอหรือเปล่า และเค้าทำเว็บโดยไม่ใช้ SSR จริงหรอ</p>\n\n\n\n<h2>Hard things in VDOM Framework</h2>\n\n\n\n<p>หลังจากดู Framework มาหลายตัว คิดว่าจุดที่ควรจะศึกษาจาก Framework แต่ละตัวคือ</p>\n\n\n\n<h4>Routing</h4>\n\n\n\n<p>เท่าที่เขียนเว็บมา Routing จะมีอยู่สามแนวคือ</p>\n\n\n\n<ol><li>Router เป็น component ที่ render subtree ตามหน้า ท่านี้จะเหมือนกับ React Router 4</li><li>Router เป็น state manager แล้วเราต้อง check state และ render เอง ท่านี้เจอใน <a href=\"https://router5.js.org/\">Router5</a></li><li>Router อยู่ข้างนอกแล้ว Manage root component ตามที่ใช้ อันนี้เคยเขียนเองใน <a href=\"https://github.com/TehShrike/abstract-state-router\">abstract-state-router</a> หรือ Mithril router ก็จะทำท่านี้</li></ol>\n\n\n\n<p>ตอนนี้ยังเอนเอียงอยู่ระหว่าง 2 กับ 3 ว่าท่าไหนเป็นท่าที่ถูก ข้อดีของ Router5 คือมันทำ subroute แล้วให route หลัก render ส่วนนึง subroute render อีกส่วนได้ แต่ใน Vue อาจจะใช้ Slot API ทำท่านี้แทนได้โดยไม่ต้องพึ่ง router?</p>\n\n\n\n<p>อีกปัญหาหนึ่งที่ยากของ Router คือ Fetch data ก่อนที่จะ Navigate ซึ่งเหมือนกับที่ Browser ทำอยู่ ก็แปลกใจมากที่ React Router 4 เลิก support ท่านี้ไปแล้วให้ไปทำที่ Link component แทน (กลายเป็นว่าคนใช้ต้องรู้ว่าจะ link ไปหน้านี้ต้องใช้ component ไหน) คิดว่า React suspense ออกมาเพื่อแก้ปัญหานี้ ส่วน Framework อื่นๆ ยังไม่ได้สนใจตรงนี้</p>\n\n\n\n<h4>State management</h4>\n\n\n\n<p>State ใน web framework เท่าที่เห็นจะมีอยู่สามแบบคือ</p>\n\n\n\n<ol><li>Local state เช่น form เพราะถ้า hoist มันขึ้นมันจะช้า (แต่ก็มีคนทำอยู่บ้าง พวก Redux form)</li><li>Scope state คือ local state แต่ pass through ลงไปให้ component ลูกด้วย บางที scope อาจจะใหญ่มากจนถึงทั้งหน้า</li><li>Global state คือ state ที่ share ระหว่างหน้า หรือระหว่าง component ที่ไม่ได้เป็น parent-child กัน</li></ol>\n\n\n\n<p>ที่น่าจะดูคือเราสามารถ Pass object จากด้านบนลงไปด้านล่างแบบ implicit ได้ไหม (แบบ React context API) เพราะการใช้ global variable ไม่ดีต่อ server render ในขณะเดียวกันการ pass ทุกอย่างเป็น explicit ก็ทำให้ component ที่ไม่อ่าน state ก็ต้องรับ state ไปเพื่อส่งต่อด้วย (นอกจากนั้นอาจจะเจอปัญหาว่าข้างบนไม่ได้รับ state ข้างล่างจะใช้ไม่ได้)</p>\n\n\n\n<p>บาง Framework อาจจะมี state management มาในตัวเลย (หรือมีตัวที่ค่อนข้างแนะนำ) อันนี้ก็ต้องลองดูเหมือนกันว่ามันเวิร์คมั้ย เช่น Angular $scope หรือ Vuex (ที่ไม่ได้มาด้วยกันแต่แนะนำมากๆ)</p>\n\n\n\n<h4>Reactivity</h4>\n\n\n\n<p>พูดถึง state แล้วสิ่งที่ตามมาคือเมื่อ state เปลี่ยนแล้วมันจะรู้ได้ยังไงว่าต้อง rerender อันนี้ด้านบนอธิบายไปแล้ว เลื่อนขึ้นไปอ่านได้</p>\n\n\n\n<h4>Code Splitting</h4>\n\n\n\n<p>อย่างน้อยๆ ก็ใน Router ก็มักจะได้ใช้ Code splitting แล้วใน Page อาจจะแยกต่อไปอีกก็ได้</p>\n\n\n\n<p>บาง Framework เช่น Vue รองรับ component ที่คืน Promise มาได้เลย เห็นว่า React Suspense ก็น่าจะมา ส่วนบาง library ที่บ้านๆ มาหน่อยอาจจะต้อง manage Promise state เอง</p>\n\n\n\n<p>ฟังดูเหมือนไม่ยาก แต่ถ้าวาด state machine มาจะพบว่ามันมีหลาย state กว่าที่คิด</p>\n\n\n\n<ol><li>Initial (บาง framework เช่น React side effect จะเกิดขึ้นได้เฉพาะหลัง mount แล้ว)</li><li>Loading แต่ไม่แสดง indicator</li><li>Loading และแสดง indicator (ปกติถ้าโหลดเร็วมากๆ ไม่ขึ้น indicator เลย คนจะรู้สึกว่าเว็บเร็วกว่า)</li><li>Load สำเร็จแล้ว ไปแสดง component จริง</li><li>Load ไม่สำเร็จ แสดง error component</li></ol>\n\n\n\n<p>และบน server render มันอาจจะต้อง force ให้มันโหลด component ทันทีก่อนคืนให้ client</p>\n\n\n\n<h4>Fragment</h4>\n\n\n\n<p>บางที component ย่อย/output ของ loop อาจจะจำเป็นต้องคืนสมาชิกหลายตัวโดยไม่มีอะไรครอบ โดยเฉพาะเมื่ออยู่ภายใต้ &lt;table&gt; หรือ &lt;ul&gt; ตัว framework ควรจะอนุญาตให้คืนหลายๆ child component ได้</p>\n\n\n\n<p>หรือบางที component อาจจะไม่อยาก render เลยถ้าไม่มีอะไร เช่น error display ถ้าไม่มี error ก็ไม่ต้องคืนอะไร</p>\n\n\n\n<p>บาง library เช่น <a href=\"https://github.com/domvm/domvm\">domvm</a> ใช้แนวคิดว่า virtual DOM map 1-1 กับ DOM จริง ก็เลยจะไม่ support use case ข้างบนนี้ ต้องทำ div ขยะไว้บนหน้าแทน</p>\n\n\n\n<h4>Portal</h4>\n\n\n\n<p>โดยปกติแล้วในเว็บเราจะใช้ element ซ้อนกันไปได้เรื่อยๆ แล้วก็ใช้ CSS จัดหน้าได้ไม่มีปัญหา แต่ CSS เช่นกันที่ทำให้เราซ้อน element ที่ไม่เกี่ยวข้องกันไม่ได้เพราะ style ของ parent มีผลต่อ child ด้วย และบางอย่าง child override ไม่ได้ เช่น <code>z-index</code> ที่ยุ่งยาก ไปจนถึง <code>position: relative</code> แล้วมี <code>position: absolute</code> ซ้อนด้านใน</p>\n\n\n\n<p>requirement ที่จะเจอบ่อยมากคือ Modal window ซึ่งในแอพง่ายๆ อาจจะยังไม่เจอหรือขี้เกียจเขียนแล้วใช้ prompt/alert ไปก่อน แต่พอจะทำดีๆ แล้ว framework บางตัวไม่มีคำตอบให้ว่าตอนนี้อยู่ข้างในจะโผล่ Modal ออกมาได้ยังไง</p>\n\n\n\n<p>ท่า hackๆ หน่อย ก็อาจจะเป็นว่ามี component ตัวรับอยู่ด้านนอกแล้ว component ด้านในส่งสัญญาณไปหาตัวนอกว่าช่วย render อันนี้ตรงด้านนอกให้หน่อย ซึ่งมัน break การแยก component (ทำไม component ตัวนอกต้อง add portal receiver ที่ตัวเองไม่ได้ใช้) แล้วอาจจะมี hack เข้ามาเกี่ยวข้อง (component ด้านในคุยกับตัวด้านนอกยังไง? แล้วมันส่ง vdom ออกไปได้ยังไง?)</p>\n\n\n\n<p>คำถามถัดมาคือแล้ว event bubbling จะทำงานยังไง? ถ้า parent ดัก click event ทั้งหมดไว้แล้วเราคลิกบน portal, parent ควรจะได้ไหม? เพราะ DOM จริงไม่ส่งมาเพราะมันไม่ได้เป็น parent-child กันแล้ว แต่ใน Virtual DOM มันยังเป็น parent-child กันอยู่นะ</p>\n\n\n\n<h4>CSS Class</h4>\n\n\n\n<p>คิดว่าการผสม CSS Class เป็นอะไรที่ใช้บ่อยมากถ้าใช้ CSS Module บาง framework เช่น Vue ก็ทำได้เลย แต่ถ้าใช้ React หรือ Mithril ก็ยังต้องใช้ classnames helper</p>\n\n\n\n<p>บางคนก็จะใช้ CSS-in-JS ไปเลยซึ่งเวลาสั่งให้มันผสมมันจะทำ class ใหม่มา</p>\n\n\n\n<h4>Error Boundary</h4>\n\n\n\n<p>สุดท้ายเรื่อง Error ก็สำคัญกับ UX ที่ดี เราควรจะทำให้เว็บ partial failure ได้ว่าถ้า component ด้านในพัง ด้านนอกจะ render error ให้ user ได้ ซึ่งเราไม่สามารถ try..catch ใน render function ได้ (เพราะเราคืน Virtual DOM nodes ไปก่อน แล้ว vdom library เป็นคนเรียก component ด้านใน) ดังนั้น Virtual DOM ต้องจัดการเรื่อง error ให้ด้วยว่าถ้าข้างใน fail ต้องกลับมาให้ด้านนอก catch ได้อยู่</p>","author":"whs","siteTitle":"Quietly Verbose","siteHash":"5f972a6fe70a917eb1b1aa165b3cb2be8a9465af33ab38bf05f34c55c0e40587","entryHash":"e090457679a4af6b99f2850c03a3b6242c05f7256cf093c3fddbccd390ff6622","category":"Thai"}
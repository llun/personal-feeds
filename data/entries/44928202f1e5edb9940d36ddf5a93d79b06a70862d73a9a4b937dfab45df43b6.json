{"title":"How to Build Network Infrastructure Automation (NIA) with HashiCorp Terraform, Consul, and A10 ADC","link":"https://www.hashicorp.com/blog/how-build-network-infrastructure-automation-nia-hashicorp-terraform-consul-a10-adc","date":1623859200000,"content":"<p><em>This guest post was written by Taka Mitsuhata, Senior Manager of Technical Marketing at <a href=\"https://www.a10networks.com/\">A10 Networks</a>, a provider of secure application solutions for on-premises, multi-cloud, and edge-cloud environments.</em></p>\n<p>As cloud adoption continues to grow, many organizations are moving towards hybrid cloud environments, gradually transferring some of their application services to public cloud platforms while also keeping their existing on-premises datacenters. Hybrid-cloud environments increase complexity when designing and deploying application services globally, and they complicate the operations workflow by requiring collaboration among different groups (application, server, networking, and security teams) and among different platforms (cloud providers and datacenters). This motivates organizations to leverage DevOps approaches and tools that simplify and streamline the process, enabling self-service models and automating operational tasks.</p>\n<p>A new outlook on network automation involves the creation of automation flows between your service networking control plane, your infrastructure provisioning platform, and network devices. This article demonstrates step-by-step how you can automate the configuration update process for an application delivery controller (ADC) using open source DevOps tools.</p>\n<p>HashiCorp and A10 Networks recently collaborated on a strategy like this called “Network Infrastructure Automation (NIA).” NIA consists of four components: HashiCorp Terraform for infrastructure as code, HashiCorp Consul for service networking and service mesh, Consul-Terraform-Sync (CTS) for automation between those two products, and integrations provided by network devices such as<a href=\"https://www.a10networks.com/products/thunder-adc/\"> A10 Thunder ADC</a>. In this article, we’re going to show you how this workflow looks so that you can see if it makes sense as a new pattern to simplify and accelerate your own networking infrastructure management.</p>\n<h2><a href=\"#the-ingredients-of-nia\">»</a><a></a>The Ingredients of NIA</h2>\n<p>Before we show you NIA in action, let’s first take a brief look at the components.</p><img src=\"https://www.datocms-assets.com/2885/1623779771-nia-1.png\" /><p><em>This is a basic architecture of an NIA setup.</em></p>\n<h3><a href=\"#network-device-a10-thunder-application-delivery-controller-adc\">»</a><a></a>Network Device - A10 Thunder Application Delivery Controller (ADC)</h3>\n<p>First, there are network devices that need to be automated for provisioning workflows. In this article, we’ll be using <a href=\"https://www.hashicorp.com/integrations/a10-networks/consul\">A10 Thunder ADC</a> as an example, but this workflow can also work with <a href=\"https://www.hashicorp.com/blog/announcing-consul-terraform-sync-tech-preview\">other vendors</a> that have built NIA integrations.</p>\n<p>One of the main ADC functions is as a reverse proxy for application servers. This increases service resiliency with server load balancing, application acceleration, and security features and enables agile traffic control including CI/CD operation support. Furthermore, global server load balancing (GSLB), which comes with A10 ADC by default, can intelligently distribute the traffic across available global sites, based on regions and locations, contents and language localization policy, or the site’s load and health condition regardless of cloud or platform types. So, it can work as a cloud selector and effectively utilize hybrid and multi-cloud environments (resources).</p>\n<h3><a href=\"#terraform\">»</a><a></a>Terraform</h3>\n<p><a href=\"https://www.terraform.io/\">Terraform</a> is a widely adopted, de facto choice for creating and managing cross-cloud infrastructures. The <a href=\"https://registry.terraform.io/namespaces/a10networks\">A10 Terraform provider</a> supports the provisioning and configuration updates for A10 Thunder ADC in any form factors or underlying cloud infrastructure (<a href=\"https://github.com/a10networks/a10-terraform\">GitHub repository</a>).</p>\n<p>Below is an example Terraform configuration that shows a minimum service load balancing (SLB) configuration required for A10 ADC and NIA integration. This defines a service group <code>web80</code> and a virtual server named <code>vip-web80</code>. The application server resources are automatically added or deleted via an NIA workflow process that I’ll explain in a moment.</p><pre><code>provider \"thunder\" {}\nresource \"thunder_virtual_server\" \"vip-web\" {\n  name = \"vip-web80\"\n  ip_address = \"10.64.4.111\"\n  port_list {\n    auto          = 1\n    port_number   = 80\n    protocol      = \"http\"\n    service_group = thunder_service_group.sg1.name\n    snat_on_vip   = 1\n  }\n}\nresource \"thunder_service_group\" \"sg1\" {\n  name     = \"web80\"\n  protocol = \"TCP\"\n}\n</code></pre><p><strong>Note:</strong> <em>It is assumed that system, interface, and routing are already configured on the Thunder ADC during the installation process.</em></p>\n<h3><a href=\"#consul\">»</a><a></a>Consul</h3>\n<p>In NIA, application servers and their services’ statuses are monitored via <a href=\"https://www.consul.io/\">Consul</a>. Consul builds a service catalog by communicating with each server running as a Consul agent.</p><pre><code>$ consul members\nNode                 Address             Status  Type    Build  Protocol  DC   Segment\ndevops1.a10tme-demo  192.168.0.201:8301  alive   server  1.8.4  2         dc1  \ns1.a10tme-demo       192.168.0.10:8301   alive   client  1.8.4  2         dc1  \ns2.a10tme-demo       192.168.0.11:8301   alive   client  1.8.4  2         dc1   \ns3.a10tme-demo       192.168.0.12:8301   alive   client  1.8.4  2         dc1  </code></pre><p>Once Consul membership is formed with agents (e.g. web servers), it is time to <a href=\"https://www.consul.io/docs/nia/installation/install\">prepare Consul-Terraform-Sync (CTS)</a>.</p>\n<h3><a href=\"#consul-terraform-sync\">»</a><a></a>Consul-Terraform-Sync</h3>\n<p>CTS is a tool that uses Consul’s service catalog as a source of truth for all applications running in a given environment. When changes are detected to these applications (e.g. a new service node is added or deleted from the service list), CTS dynamically applies the necessary changes to your network infrastructure using Terraform.</p><img src=\"https://www.datocms-assets.com/2885/1623779774-nia-2.png\" /><p><em>Example NIA workflow with Terraform, Consul, CTS, and Thunder ADC.</em></p>\n<p>You will define a set of <a href=\"https://learn.hashicorp.com/tutorials/consul/consul-terraform-sync-intro\">tasks</a> for CTS to execute whenever a service is registered or removed on Consul. The CTS configuration (in HCL format) below contains several blocks:</p><pre><code>$ cat tasks.hcl \nlog_level = \"info\"\ndriver \"terraform\" {\n  log = true\n  required_providers {\n    thunder = {\n      source = \"a10networks/thunder\"\n      version = \"0.4.14\"\n    }\n  }\n}\nterraform_provider \"thunder\" {\n  address  = \"10.64.4.104\"\n  username = \"{{ env \\\"THUNDER_USER\\\" }}\"\n  password = \"{{ env \\\"THUNDER_PASSWORD\\\" }}\"\n  alias = \"adc-1\"\n}\nconsul {\n  address = \"192.168.0.201:8500\"\n}\ntask {\n  name = \"slb_auto_config\"\n  description = \"Automate SLB Config on A10 Thunder\"\n  source = \"a10networks/service-group-sync-nia/thunder\"\n  providers = [\"thunder.adc-1\"]\n  services = [\"web80\"]\n  variable_files = []\n}\n</code></pre><p>The <code>driver</code> defines all Terraform providers required to execute the task. In this case, <code>source = \"a10networks/thunder\"</code> is listed. The <code>terraform_provider</code> specifies the options and variables to interface with network infrastructure such as ADC. The example above includes the IP address of an A10 Thunder ADC, an alias, and a login credential.</p>\n<p><strong>Note:</strong> <em>For security’s sake, you may want to separate login credentials and load dynamically via shell (Env), Consul KV, or <a href=\"https://www.vaultproject.io/\">HashiCorp Vault</a>.</em></p>\n<p>The <code>task</code> block identifies a task to run as automation for the selected services. The task named <code>slb_auto_conifg</code> includes a list under <code>services</code> of logical service names that should match the service name(s) registered on the Consul catalog. <code>providers</code> lists the network infrastructure (e.g., Thunder ADC) with aliases (if applicable). <code>source</code> specifies a path to the Thunder Terraform module defined for CTS that allows Thunder ADC to dynamically manage ADC configuration (e.g. SLB server and SLB service group) for the services monitored on the Consul catalog.</p>\n<p><strong>Note:</strong> <em>For more details about the configuration, refer to the <a href=\"https://www.consul.io/docs/nia/configuration\">Consul NIA Configuration</a>. For more details on the Terraform NIA module for A10 Thunder, refer to the <a href=\"https://registry.terraform.io/modules/a10networks/service-group-sync-nia/thunder/latest\">Terraform Registry</a> or <a href=\"https://github.com/a10networks/terraform-thunder-service-group-sync-nia\">GitHub</a>.</em></p>\n<p>Once CTS is started by running <code>$ consul-terraform-sync -config-file=tasks.hcl</code>, it will download and install Terraform providers and modules according to your HCL config file, then create Terraform files for the tasks defined and connect to Consul.</p>\n<p>Here’s what that looks like:</p><pre><code>$ consul-terraform-sync -config-file=tasks.hcl\n2021/04/10 06:40:12.364475 [INFO] v0.1.0 (354ce7a)\n2021/04/10 06:40:12.365844 [INFO] (driver.terraform) installing terraform to path '/root/nia'\n2021/04/10 06:40:16.009060 [INFO] (driver.terraform) successfully installed terraform\n2021/04/10 06:40:16.012513 [INFO] (templates.hcltmpl) evaluating dynamic configuration for \"thunder\"\n\t\t:\n2021/04/10 06:40:17.258628 [INFO] running Terraform command: /root/nia/terraform init -no-color -force-copy -input=false -lock-timeout=0s -backend=true -get=true -upgrade=false -lock=true -get-plugins=true -verify-plugins=true\nInitializing modules...\nDownloading a10networks/service-group-sync-nia/thunder 0.1.6 for slb_auto_config...\n- slb_auto_config in .terraform/modules/slb_auto_config\n\nInitializing the backend...\n\nSuccessfully configured the backend \"consul\"! Terraform will automatically\nuse this backend unless the backend configuration changes.\n\t\t:\nTerraform has been successfully initialized!\n2021/04/10 06:40:20.158072 [INFO] running Terraform command: /root/nia/terraform workspace new -no-color slb_auto_config\nWorkspace \"slb_auto_config\" already exists\n2021/04/10 06:40:20.512676 [INFO] running Terraform command: /root/nia/terraform workspace select -no-color slb_auto_config\nSwitched to workspace \"slb_auto_config\".\n2021/04/10 06:40:20.853882 [INFO] running Terraform command: /root/nia/terraform apply -no-color -auto-approve -input=false -var-file=terraform.tfvars -var-file=providers.tfvars -lock=true -parallelism=10 -refresh=true\nmodule.slb_auto_config.thunder_service_group.service-group[\"web80\"]: Refreshing state... [id=web80]\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n2021/04/10 06:40:22.636456 [INFO] (ctrl) task completed slb_auto_config\n2021/04/10 06:40:22.637694 [INFO] (ctrl) all tasks completed once\n2021/04/10 06:40:22.637722 [INFO] (cli) running controller in daemon mode\n2021/04/10 06:40:22.638563 [INFO] (api) starting server at '8558'</code></pre><h2><a href=\"#see-nia-in-action\">»</a><a></a>See NIA in Action</h2>\n<p>Let’s get started by adding services registered with the Consul service catalog. On each server, you will define service details (IP, port, etc.) and health check information as shown in the Consul config file below. Please note that the service name should match the service-group name defined on the A10 ADC.</p><pre><code>$ cat /etc/consul.d/web.json\n{\n \"service\": {\n   \"name\": \"web80\",\n   \"id\": \"web80-s1\",\n   \"tags\": [\"web-p80\"],\n   \"port\": 80,\n   \"address\": \"192.168.0.10\",\n   \"check\": {\n     \"http\": \"http://localhost:80/\",\n     \"interval\": \"15s\"\n   }\n  }\n}</code></pre><p>Once you place the config file onto the Consul home directory (e.g. <code>/etc/consul.d/</code>) and run the <code>$ consul reload</code> command, the Consul catalog will show the application servers available:</p><img src=\"https://www.datocms-assets.com/2885/1623779766-nia-3.png\" /><p>On CTS, the change is picked up and the task <code>slb_auto_config</code> is executed automatically. In this process, CTS automatically creates a new “slb server” and adds them into the <code>service-group</code> named <code>web80</code> using Terraform on the Thunder ADC.</p><pre><code>:\n2021/04/19 23:26:47.770352 [INFO] (ctrl) executing task slb_auto_config\n2021/04/19 23:26:47.770494 [INFO] running Terraform command: /root/nia/terraform apply -no-color -auto-approve -input=false -var-file=terraform.tfvars -var-file=providers.tfvars -lock=true -parallelism=10 -refresh=true\n\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\n2021/04/19 23:26:49.450869 [INFO] (ctrl) task completed slb_auto_config\n2021/04/19 23:26:59.549362 [INFO] (ctrl) executing task slb_auto_config\n2021/04/19 23:26:59.549466 [INFO] running Terraform command: /root/nia/terraform apply -no-color -auto-approve -input=false -var-file=terraform.tfvars -var-file=providers.tfvars -lock=true -parallelism=10 -refresh=true\nmodule.slb_auto_config.thunder_service_group.service-group[\"web80\"]: Creating...\nmodule.slb_auto_config.thunder_service_group.service-group[\"web80\"]: Creation complete after 0s [id=web80]\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n2021/04/19 23:27:01.380723 [INFO] (ctrl) task completed slb_auto_config</code></pre><p>On vThunder ADC, all three servers were successfully added by CTS, and the service (VIP with service port 80) is now up and running.</p><pre><code>vThunder#show slb virtual-server bind\nTotal Number of Virtual Services configured: 1\n---------------------------------------------------------------------------------\n*Virtual Server :vip-web80 10.64.4.111     All Up\n\n   +port 80  http ====&gt;web80                    State :All Up\n        +192.168.0.10:80                         192.168.0.10        State :Up\n        +192.168.0.11:80                         192.168.0.11        State :Up\n        +192.168.0.12:80                         192.168.0.12        State :Up</code></pre><p>Even if many more servers are added to the service as shown below, Thunder ADC’s SLB configurations are automatically updated in near-real time by CTS.</p><img src=\"https://www.datocms-assets.com/2885/1623779778-nia-4.png\" /><h2><a href=\"#next-steps\">»</a><a></a>Next Steps</h2>\n<p>The NIA solution using CTS is a powerful network automation enabler and works perfectly with A10 Thunder ADC whenever any new service nodes are added/deleted/moved or any unexpected server failure happens. Furthermore, you can easily extend this NIA solution to support CI/CD operations including <a href=\"https://www.hashicorp.com/blog/terraform-feature-toggles-blue-green-deployments-canary-test\">blue-green deployment by leveraging Terraform</a> and service tags on Consul.</p>\n<p>The strength of this NIA solution is that it can be implemented in any type of platform as Consul is a cloud-agnostic DevOps tool and A10 Thunder can run on various clouds, hypervisors, and containers.</p>\n<p>For more resources on how to try NIA out yourself, see this list:</p>\n<ul>\n<li><a href=\"https://www.consul.io/docs\">Consul documentation</a></li>\n<li>Try A10 Thunder <a href=\"https://www.a10networks.com/products/vthunder-trial/\">free for 30 days</a></li>\n<li>Get the Terraform <a href=\"https://registry.terraform.io/modules/a10networks/service-group-sync-nia/thunder/latest\">NIA module for A10 Thunder</a></li>\n<li>Webinar: <a href=\"https://www.brighttalk.com/webcast/16409/476300\">Automating Network Infrastructure Tasks with A10 and HashiCorp</a></li>\n</ul>","author":"Taka Mitsuhata","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"44928202f1e5edb9940d36ddf5a93d79b06a70862d73a9a4b937dfab45df43b6","category":"Tech"}
{"title":"สรุปข้อผิดพลาดที่เกิดกับการพัฒนาด้วย ReactJS","link":"https://www.somkiat.cc/mistake-with-reactjs/","date":1620630663000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/reactjs-bad-150x150.jpg\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/reactjs-bad.jpg\" /></figure>\n\n\n\n<p>เพิ่งทำการสอนและ review ระบที่พัฒนาด้วย React<br />พบว่ามีข้อผิดพลาดบางอย่างที่มักเกิดขึ้นกับทุก ๆ ระบบ<br />ซึ่งบ่อยครั้งมันทำงานได้ปกติ แต่ยากต่อการดูแลรักษา <br />หรือยากต่อการทำความเข้าใจ<br />จึงสรุปไว้นิดหน่อย</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกคือ การออกแบบและสร้าง component</strong></p>\n\n\n\n<p>โดย React นั้นจะยึดตามแนวทางของ Web component<br />คือแยกการทำงานเป็น component ไป<br />ซึ่งเลือกพัฒนาได้ทั้ง Class และ function component<br />แต่ปัจจุบันน่าจะเป็น function component + Hook กันเป็นส่วนใหญ่<br /></p>\n\n\n\n<p>ปัญหาที่พบบ่อย ๆ คือ component จะมีขนาดใหญ่<br />มีหน้าที่รับผิดชอบหรือทำงานเยอะ<br />แน่นอนว่า ทำงานได้ปกติ และ ตรงตามที่ต้องการ<br />แต่เมื่อกลับมาแก้ไขหรือหาข้อผิดพลาด <br />กลับทำให้เสียเวลามากยิ่งขึ้น</p>\n\n\n\n<p>ดังนั้นแนวทางที่น่าจะดีกว่าคือ<br />การแบ่งเป็น component เล็ก ๆ ตามหน้าที่รับผิดชอบ<br />แต่ไม่ใช่ว่าจะเล็กมากเกินไป ทำให้ยากกว่าเดิมไปอีก<br />ยิ่งถ้าใครสร้างแบบ function component แล้ว <br />จะพบว่า มันเอื้อให้ component มีขนาดเล็กลง</p>\n\n\n\n<p><strong><em>ระวัง God component ไว้ให้มาก ๆ</em></strong></p>\n\n\n\n<p><strong>เรื่องที่สอง อย่าทำการแก้ไข state ของ component ตรง ๆ</strong></p>\n\n\n\n<p>ให้ใช้ผ่าน method setState() หรือ useState() ของ Hook<br />ซึ่งจะทำให้เรามั่นใจได้ว่า<br />ถ้าเปลี่ยน state ผ่านทั้งสองทางแล้วReact <br />จะทำการ re-render DOM ให้แบบอัตโนมัติและถูกต้อง</p>\n\n\n\n<p>แต่อย่าลืมว่าจะทำงานแบบ asynchronous ด้วยนะ<br />นั่นคือ จะไม่ได้เปลี่ยนและ re-render ทันทีดังนั้น</p>\n\n\n\n<ul><li>ใช้งาน setState() ต้องทำงานร่วมกับ callback ด้วย</li><li>ใช้งาน useState() ต้องทำงานร่วมกับ useEffect() ด้วย</li></ul>\n\n\n\n<p><strong>เรื่องที่สาม ในการจัดการ state แบบ Global</strong></p>\n\n\n\n<p>แนะนำให้เริ่มจาก Hook context <br />ก่อนที่จะไปใช้ตัวอื่น ๆ เช่น Redux เป็นต้น<br /></p>\n\n\n\n<p><strong>เรื่องอื่น ๆ ที่สำคัญ เช่น</strong></p>\n\n\n\n<ul><li>project structure ที่เหมาะสมกับงาน บางครั้ง project เล็ก ๆ ก็ออกแบบซะเยอะและซับซ้อนไป</li><li>การทดสอบตั้งแต่ unit, component, integration และ end-to-end</li><li>รูปแบบของการตั้งชื่อ</li><li>performance ในการ render และการทำงาน</li></ul>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"75506164384401f3cac74c99e8b63d11b6ff189aa01760de019b02244803796f","category":"Thai"}
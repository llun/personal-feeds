{"title":"[AWS] ทำ Websocket ใน API-Gateway ผ่าน HTTP","link":"https://thanapon.info/websocket-aws-api-gateway/","date":1623512764000,"content":"<p>จั่วหัวเรื่องมาแบบนี้ ปัญหาที่เจอเวลาค้นหา API-Gateway Websocket Type ใน AWS ก็คือส่วนมากมีแต่การ Integrate เข้ากับ Lambda function ซึ่งเป็น Serverless ใน AWS อย่างเซงงง</p>\n\n\n\n<p>แต่เราอยากใช้ Websocket ที่เรา implement แล้วใน Application ของเราแล้วนะสิ ซึ่งผมพยายามหาก็ยังไม่เจอเลย~~~~~ เลยยอมแพ้ จนสายตานั้นเหลือบไปเห็น Integration type <strong>HTTP</strong> (น้ำตาจะไหล)</p>\n\n\n\n<figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-1024x721.png\" /></figure>\n\n\n\n<p>โดย Concept ของวิธีนี้จริงๆมันก็คือ การ Request &lt;=&gt; Response หล่ะครับโดยที่ เราจะให้ API-Gateway เป็นตัวจัดการ Connection ระหว่าง client และ Backend-service แบบเวลามี Event มาจากฝั่ง Client ตัว API-Gateway ก็จะมา Trigger endpoint ที่เรากำหนดให้แล้วจะทำอะไรกับ Request body ก็แล้วแต่ Backend-service เลย </p>\n\n\n\n<p>จริงๆวิธีนี้มันก็ไม่ได้ใช้ Websocket ที่เรา Implement ใน Application ของเรานะ แต่ก็ไม่เป็นไรแค่เขียน Endpoint ขึ้นมาใหม่เอง</p>\n\n\n\n<hr />\n\n\n\n<h3>Prerequisites</h3>\n\n\n\n<blockquote><p><a href=\"https://github.com/toygame/WebsocketAwsApiGateway\">toygame/WebsocketAwsApiGateway (github.com)</a></p><cite>Aws api-gateway websocket connect through Http</cite></blockquote>\n\n\n\n<p>เริ่มต้นให้ Clone repository ข้างบนนี้มาก่อนนะครับ ตัว Repository นี้ผมเขียนด้วย Nodejs นะครับใครไม่มีก็ไปโหลดมาลงก่อนเน้อ </p>\n\n\n\n<p>เสร็จแล้วให้ติดตั้ง package <strong><em>Ngrok</em></strong> กับ <em><strong>wscat</strong></em> นะครับ โดยที่ Ngrok มันก็จะไปสร้าง tunnel ให้คนอื่นสามารถเรียก Application ของเราได้จากภายนอกนะครับส่วน wscat เป็น Websocket client สำหรับเชื่อมต่อกับ API-Gateway websocket type</p>\n\n\n\n<div><pre><code># Install npm package\n$ npm install\n\n# Install ngrok\n$ npm install -g ngrok\n\n# Install wscat\n$ npm install -g wscat</code></pre></div>\n\n\n\n<h3>Backend Flow</h3>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/image-4-1024x418.png\" /></figure></div>\n\n\n\n<ol><li>User connect เข้ากับ API-Gateway, จากนั้น API-Gateway จะทำการ Mapping Connection-id เข้ากับ Request body แล้วส่งไปยัง Backend-service ของเรา</li><li>เมื่อ Backend-service ของเราได้รับ Request ที่มาจาก API-Gateway เข้ามาที่ endpoint “<strong>/connect</strong>” Backend-service ของเราจะทำการ store ค่าไว้ใน global variable (ถ้าใช้จริงๆแนะนำให้ไปใช้พวก Cache service: Redis หรือ Memcache อะไรก็ว่าไปดีกว่าครับ)</li><li>จากนั้นเมื่อ User ส่ง Message มา API-Gateway จะทำการ Route ไปที่ <strong>$default</strong> route ของเราแล้วก็ส่งมาที่ endpoint “<strong>/handle-event</strong>“</li><li>ใน “<strong>/handle-event</strong>” จะทำการ Broadcast message ไปตาม Connection-id ที่เราได้เก็บเอาไว้ ผ่าน API-Gateway <strong>Connection URL</strong></li><li>หลังจากที่ User disconnect หรือ timeout ออกไป API-Gateway ก็จะส่ง event พร้อมกับ Connection-id มาที่ endpoint “/disconnect” เพื่อให้ Backend-service เรา ลบ Connection-id นั้นทิ้งไป ก็จบ…….</li></ol>\n\n\n\n<div><pre><code>const awsAccessKey = process.env.AWS_ACCESS_KEY_ID\nconst secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY\nconst region = process.env.AWS_REGION\nconst responseMessageUrl = process.env.RESPONSE_MESSAGE_URL\nconst apiGateway = new AWS.ApiGatewayManagementApi({\n  accessKeyId: awsAccessKey,\n  secretAccessKey: secretAccessKey,\n  region: region,\n  endpoint: responseMessageUrl,\n  apiVersion: '2018-11-29'\n})\n\napp.post('/connect', (req, res) =&gt; {\n  /**\n   * Store connection_id in cache or database,\n   * Implement your code below\n   */ \n  const connectionId = req.body.connection_id\n  connectionClient.push(connectionId)\n  console.log('connectionId connected :&gt;&gt; ', connectionId);\n  res.status(200).end()\n})\n\napp.delete('/disconnect', (req, res) =&gt; {\n  /**\n   * Remove connection_id from cache or database,\n   * Implement your code below.\n   */\n  const connectionId = req.body.connection_id\n  removeConnectionId(connectionId)\n  console.log('connectionId disconnected :&gt;&gt; ', connectionId);\n  res.status(200).end()\n})\n\napp.post('/handle-event', async (req, res) =&gt; {\n  console.log('message :&gt;&gt; ', req.body)\n  const responseBody = {\n    body: req.body.body.message,\n  }\n  const promises = []\n  for (const id of connectionClient) {\n    const params = {\n      ConnectionId: id,\n      Data: JSON.stringify(responseBody)\n    }\n    const apiGatewayPost = apiGateway.postToConnection(params).promise()\n    promises.push(apiGatewayPost)\n  }\n  await Promise.all(promises)\n  res.status(200).send('received!')\n})</code></pre></div>\n\n\n\n<h3>Config API-Gateway ก่อน</h3>\n\n\n\n<ul><li>เข้าไปที่ API-Gateway แล้วทำการสร้าง WebSocket API ก่อนนะครับ</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-1-1024x488.png\" /></figure></div>\n\n\n\n<ul><li>จากนั้นเราก็จะเห็นว่ามันจะให้เราใส่ชื่อ API กับ <strong>Route selection expression</strong></li></ul>\n\n\n\n<blockquote><p><strong>Route selection expression</strong> คือ JSON key ที่บอกให้ API-Gateway รู้ว่ามันต้องส่ง Request body เข้าไปที่ route event ไหน เช่น {“action”: “joinroom”, “message”: “test”} ถ้าส่ง body อย่างงี้มาจาก client ตัว API-Gateway ก็จะเข้าใจว่า route ที่มันจะส่งไปคือ joinroom แต่ถ้าไม่มี joinroom มันก็จะส่งเข้าไปยัง $default route</p></blockquote>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-2-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>ขั้นตอนต่อมา เราจะต้องกำหนด Route key แต่ละตัวโดยที่หลักๆแล้วจะมี $connect, $disconnect และ $default</li></ul>\n\n\n\n<blockquote><p><strong>$connect</strong> หลังจากที่ client เชื่อมต่อเข้ามายัง url แล้ว เราจะให้ API-Gateway ส่ง request ไปยัง endpoint ไหน</p><p><strong>$disconnect</strong> ก็คือหลังจากที่ client disconnect จากตัว Gateway แล้วจะให้ไปไหน</p><p><strong>$default</strong> ถ้าตัว routes selection expression ของเราไม่เข้าเงื่อนไขสัก event มันก็จะถูกส่งมาที่ default route นี้</p><p>ส่วน Custom routes ก็คือ route อื่นๆที่เราอยากจะ handle ซึ่งใน repo ข้างบนนี้ผมขอไม่ใช่ custom route ละกันครับ</p></blockquote>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-3-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>เรียบร้อยแล้วหลังจากนั้น API-Gateway จะให้เราเลือก ประเภทของ Service ที่เราจะให้ API-Gateway เรียกมา เราก็กำหนดเป็น HTTP Type ส่วน Method กับ URL endpoint จะเป็น Endpoint ที่ Nrgok forwarding package มาให้เรานะครับ จะได้หน้าตาแบบนี้ =&gt; <strong>https://{endpoint}/{path}</strong></li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/Screen-Shot-2564-05-10-at-17.28.32-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>เลือก Stage ที่จะ deploy ค่า default จะเป็น <strong>production</strong> จะเปลี่ยนเป็น dev, staging ก็แล้วแต่เราเลยครับ</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-5-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>เช็ค config เสร็จแล้วก็ <strong>done/deploy</strong> เลยครับ</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-6-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>จากภาพข้างล่างจะเห็นว่า ตรง Routes จะมี Route Selection Expression ตรงก็นี้เหมือนที่อธิบายไว้ข้างบนนะครับ จากนั้นเราจะมา mapping template ใน <strong>Integration Request</strong> กันต่อ เพื่อให้ API-Gateway ส่ง body ไปให้ Backend-service ของเรา</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-7-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>อย่าลืม ติ๊ก <strong>Use Proxy Integration</strong> ออกด้วยนะครับ แล้วกด save จากนั้นแท็ป <strong>Request Templates</strong> ก็จะโผล่ขึ้นมาให้เราเพิ่ม <strong>Template Selection Expression</strong> เป็น \\$default นะครับต้องมี ( \\ ) slash ด้วยนะครับตามรูปเลย</li></ul>\n\n\n\n<div><pre><code>{\n  \"connection_id\" : \"$context.connectionId\"\n}</code></pre></div>\n\n\n\n<blockquote><p><strong>connectionId</strong> คือ unique id ที่ทาง API-Gateway จะ generate ออกมาให้สำหรับ push message ไปให้ client ผ่าน API-Gateway</p><p><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-mapping-template-reference.html\" target=\"_blank\">API Gateway WebSocket API mapping template reference – Amazon API Gateway</a></p></blockquote>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/Screen-Shot-2564-05-10-at-17.31.28-1024x675.png\" /></figure></div>\n\n\n\n<h4>!!! อย่าลืม Config <strong>Integration Request</strong> กับ<strong> $disconnect</strong> ด้วยนะครับ</h4>\n\n\n\n<ul><li>แล้วก็กด <strong>Add integration response</strong> ด้วย เพื่อที่เราจะสามารถรับ Response body ที่มาจาก backend ได้</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-10-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>หลังจากกด <strong>Add integration response</strong> ก็จะได้หน้าตาแบบนี้ กดเข้าไปที่ <strong>Integration Response</strong> ด้วย เพื่อใส่ค่า default key</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-11-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>เพิ่ม <strong>Response key</strong> เป็น <strong>$default </strong>ตามรูปนะครับ (ไม่ต้องกำหนด spec อะไรของมัน)</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-12-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>ส่วน event -&gt; <strong>$disconnect</strong> ก็ทำเหมือนกันกับ <strong>$connect</strong> นะครับ</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/image-1024x657.png\" /></figure></div>\n\n\n\n<ul><li>แล้วก็เพิ่ม Request Templates ให้กับ event -&gt; <strong>$disconnect</strong> ด้วย</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/image-1-1024x631.png\" /></figure></div>\n\n\n\n<ul><li>กลับมาที่ event -&gt; <strong>$default</strong> <ul><li>Integration type: HTTP</li><li>HTTP method: POST</li><li>Endpoint: http://{มาจาก ngrok}/handle-event</li><li><span>อย่าลืมติ๊ก Use HTTP Proxy integration ออกนะครับ</span></li></ul></li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/image-2-1024x654.png\" /></figure></div>\n\n\n\n<ul><li>เพิ่ม Request Templates ด้วยงั้นตัว backend service ของเราจะรับ Request body ไม่ได้ </li></ul>\n\n\n\n<blockquote><p>กำหนด Template selection expression กับ Template key เป็น “\\$default” ต้องมี slash ด้วยนะครับ</p></blockquote>\n\n\n\n<div><pre><code>{\n  \"connection_id\" : \"$context.connectionId\",\n  \"body\" : $input.body\n}</code></pre></div>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-9-1024x675.png\" /></figure></div>\n\n\n\n<ul><li>เสร็จเรียบร้อยอย่าลืม Deploy API กันนะครับ จด <strong>Connection URL</strong> ไว้ด้วยนะครับเดี๋ยวเอาไปใช้ต่อ</li></ul>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/image-3.png\" /></figure></div>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/06/Screen-Shot-2564-06-12-at-22.09.43-1024x396.png\" /></figure></div>\n\n\n\n<h3>Testing</h3>\n\n\n\n<p>ทดสอบโดยการรัน Nodejs Project ของเราก่อนเลย อย่าลืมรัน Ngrok กับ Nodejs ไว้ด้วยนะครับ</p>\n\n\n\n<p><span>****อย่าลืมแก้ env.local ด้วยนะครับ</span></p>\n\n\n\n<ul><li>RESPONSE_MESSAGE_URL: ใส่ <strong>Connection URL</strong> จาก API-Gateway เข้าไปเลยนะครับ ไม่ต้องใส่ @connections นะครับ</li></ul>\n\n\n\n<div><pre><code>RESPONSE_MESSAGE_URL=https://xxxxx.execute-api.{region}.amazonaws.com/xxxx\nAWS_ACCESS_KEY_ID={xxxxxxxx}\nAWS_SECRET_ACCESS_KEY={xxxxxxxxxx}\nAWS_REGION={region}\n\n# Client configuration\nWEB_SOCKET_URL=wss://xxxxxxxxx.execute-api.{region}.amazonaws.com/xxx</code></pre></div>\n\n\n\n<div><figure><img src=\"https://thanapon.info/wp-content/uploads/2021/05/image-13-1024x640.png\" /></figure></div>\n\n\n\n<hr />\n\n\n\n<blockquote><p><a href=\"https://github.com/toygame/WebsocketAwsApiGateway\">toygame/WebsocketAwsApiGateway (github.com)</a></p><cite>Aws api-gateway websocket connect through Http</cite></blockquote>\n\n\n\n<blockquote><p><a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html\" target=\"_blank\">Working with WebSocket APIs</a></p><cite>A WebSocket API in API Gateway is a collection of WebSocket routes that are integrated with backend HTTP endpoints, Lambda functions, or other AWS services. You can use API Gateway features to help you with all aspects of the API lifecycle, from creation through monitoring your production APIs.</cite></blockquote>\n\n\n\n<blockquote><p><a href=\"https://ngrok.com/\" target=\"_blank\">Ngrok</a></p><cite>ngrok provides a real-time web UI where you can introspect all HTTP traffic running over your tunnels. Replay any request against your tunnel with one click.</cite></blockquote>\n\n\n\n<blockquote><p><a href=\"https://github.com/websockets/wscat\" target=\"_blank\">wscat</a></p><cite>https://github.com/websockets/wscat</cite></blockquote>\n<p>The post <a href=\"https://thanapon.info/websocket-aws-api-gateway/\">[AWS] ทำ Websocket ใน API-Gateway ผ่าน HTTP</a> appeared first on <a href=\"https://thanapon.info\">Thanapon</a>.</p>","author":"thanapon.tap","siteTitle":"Thanapon","siteHash":"6a039c2f54d76e4c49227d80968f2a30de5427cc57525c047c383ea3563cde5f","entryHash":"23fb70223b7b09a9925c453664f307e4835c10e5763f76d288c9e382f68f6f3d","category":"Thai"}
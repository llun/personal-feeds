{"title":"Building Your Own Personal Learning Curriculum","link":"https://smashingmagazine.com/2021/02/building-personal-learning-curriculum/","date":1613739600000,"content":"<p>After completing a bootcamp in March 2019, I was overwhelmed by the choice of frameworks, libraries, languages, and courses I had to choose from to continue independent learning and hopefully score myself one of those elusive junior developer jobs. Almost everyone I spoke with had a different opinion on what was important and worth pursuing, but most of them agreed that learning ‘the fundamentals’ was important, while never really specifying what they were.</p>\n<p>Even after getting my first developer job last summer it quickly became apparent that I had to do regular extra-curricular learning to meet the demands of this new role. I flitted between Udemy courses for a while, and while I did learn, I often found myself going through the motions of copying the instructor without <strong>developing problem-solving skills</strong> on my own. It took me making my own small, scratch pad side-project to really grasp the new material. So now I knew what my learning style was: initial exposure to ideas in a course or at work, create a sketch of a project to solidify concepts, and then use this new learning in my daily work if I could.</p>\n<p>Most of us have a solid (if hard-earned) sense of how we learn best in the short-term, but how does that translate to the structure of long-term extracurricular learning? I’m going to tell you how I worked this problem out for myself. These strategies will work across the spectrum of experience, whether you’re brand new to software development or a seasoned engineer.</p>\n<h3>Your Own Personal Curriculum</h3>\n<p>This is my method of putting together a <strong>learning curriculum</strong>. As someone with limited time and a tendency to be taken by the breeze of impulsivity at the expense of sustained, focused working, I found this method the most compatible with my brain and general rhythms. Your mileage, of course, may vary.</p>\n<h4>Use ‘Dream Job’ Role Specifications To Set Goals</h4>\n<p>I found this step really useful for drowning out all the ambient noise and getting myself to focus on things that will be practically useful to my career in the next five or so years. (As more of a front-end developer, I often found myself making goo-goo eyes at learning Rust. While fascinating, it’s not exactly a priority.)</p>\n<p>You may not want to work at a huge tech company yourself, but it is worth looking at what they prioritize when hiring as, for better or worse, the big companies tend to set the tone for the industry at large. I have a <strong>small shopping list of non-evil companies</strong> I’d like to end up at one day and they all broadly share the same priorities: semantic HTML/CSS, excellent vanilla JS skills, accessibility, and a popular framework. One day I am going to learn Rust, but, for now, working on these skills are my top priorities.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/449ae366-4ff7-4f3b-90d8-69e583a7a389/image2-building-your-own-personal-curriculum.png\" /></p>\n<p>I tend to favor <a href=\"https://www.indeed.co.uk/\">Indeed</a>, <a href=\"https://jobs.theguardian.com/\">Guardian Jobs</a> and <a href=\"https://www.linkedin.com/jobs/\">LinkedIn</a> for getting a broad sweep of jobs that are on the market, but equally useful is Twitter (just search [company name you are interested in] and ‘jobs’), and <strong>keep a periodic eye on the ‘Careers’ page</strong> of your favorite few companies every couple of months. Jessica Rose, who tweets as <a href=\"https://twitter.com/jesslynnrose\">@jesslynnrose</a>, frequently writes long Twitter threads of job vacancies at ‘non-evil companies’ that sometimes aren’t very well publicized elsewhere.</p>\n<p>Once you’ve gathered a few job specs, try to <strong>spot the commonalities</strong> between them and make note of them. We’ll use them for the next step.</p>\n<h4>Identify Opportunities To Develop The Skills You Want</h4>\n<p>Remember that list I mentioned? Split it into two columns. Column one: things you can work on in your day job. Column two: things you need to look at in your own time.</p>\n<h5>At-Work Learning</h5>\n<p>The things on your list that are covered by your day-job are the things you need to worry about the least. No matter what, your skills in these areas will improve with time. Some of you will be working at enormous organizations staffed by many developers with various levels of seniority and specialisms, and I advise you to milk that for all it’s worth, to put it bluntly.</p>\n<p><strong>If accessibility is a knowledge gap of yours</strong> that you’d like to improve on, try to swallow any nerves and approach someone at your workplace who has those skills for a chat/a Zoom coffee. <a href=\"https://www.smashingmagazine.com/2020/04/collaborative-coding-ultimate-career-hack/\">Try to pair with them</a>, with the understanding that you can ‘pair’ on things that aren’t coding problems. Chat to them about where they find their information, which Twitter accounts, blogs, and podcasts they keep up with, and how they remain up-to-date with new developments themselves.</p>\n<h5>At-Home Learning</h5>\n<p>As someone with two prior careers, neither of which were computer science-related, who entered the industry via a nine-week bootcamp a year ago, I have a rudimentary understanding of computer science, and lots of you are likely in the same situation.</p>\n<p>I have found <a href=\"https://frontendmasters.com/\">Frontend Masters</a> to be invaluable when it comes to really well-designed courses on computer science principles and more specific learning. Personally, I’ve found <a href=\"https://frontendmasters.com/teachers/will-sentance/\">Will Sentance’s courses on Frontend Masters</a> to be valuable for understanding the how and why when it comes to vanilla JavaScript. Equally, <a href=\"https://frontendmasters.com/courses/computer-science/\">Brian Holt’s ‘Four Semesters of Computer Science in 5 Hours’</a> courses expose students to the sort of concepts that can arise in tech interviews.</p>\n<p>There is a monthly subscription fee for Frontend Masters, and it is well worth it, but <strong>there are plenty of wonderful free resources</strong> out there. I really recommend that anyone who hasn’t already done so enrolls in <a href=\"https://www.edx.org/course/cs50s-introduction-to-computer-science\">CS50</a>. The course, run by Harvard University, is a wonderful, free resource, that will expose you to C, Python, JavaScript and modules on ethics and basic data structures. The lectures are enormous fun, and you can do as much or as little of the course as you like, with no time constraints.\n<img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/4d375c93-21dc-4622-8a35-db1b7e0be7b1/image1-building-your-own-personal-curriculum.jpg\" /></p>\n<p>Equally, <a href=\"https://www.freecodecamp.org\">FreeCodeCamp</a> has well earned its status as a key starting point for both self-taught developers and those wishing to build on their existing skills, and I encourage you to seek out courses relevant to your interests on <a href=\"https://www.udemy.com/\">Udemy</a> (I’d suggest not to buy a Udemy course that isn’t on a heavy discount. Their sales come around once every few weeks, and there are always discount codes floating around).</p>\n<p>A particular favorite of mine is <a href=\"https://www.udemy.com/course/the-complete-nodejs-developer-course-2/\">The Complete Node.js Developer Course by Andrew Mead</a>, and I adore <a href=\"https://www.udemy.com/user/coltsteele/\">Colt Steele</a>’s courses (there’s a particularly <a href=\"https://www.udemy.com/course/js-algorithms-and-data-structures-masterclass/\">good one on algorithms and data structures</a> that will help you if you ever find yourself on the more algorithm-heavy side of the tech interviewing spectrum). Smashing Magazine also runs frequent <a href=\"https://smashingconf.com/online-workshops/workshops\">online workshops</a> on a range of subjects that will help you to improve your skills.</p>\n<p>As you might know, the skills that get people jobs in tech can often diverge from the skills people need to use on the job. These courses will teach you computer science fundamentals while keeping you nimble for interviews, and help you to fill any potentially crushing silences with snappy summations of different data structures, and their pros and cons. The point is not to do all of these courses, but to <strong>identify and combine the ones that fit with the job specs</strong> you’ve targeted.</p>\n<p>I’ve found Twitter to be incredibly helpful for finding people to chat to about code problems. Last spring I shouted into the void about an issue I was having with Android Studio and was surprised to be on a video call with an Android developer less than ten minutes later, and, not only that, he seemed pleased to help!</p>\n<p>Don’t underestimate the <strong>kindness of the developer community</strong> and don’t be shy about calling on it for help when you need it, and do your best to put yourself into situations where you can talk to people from a similar world to you within the wider context of the tech industry. The <a href=\"https://twitter.com/search?q=%23CodeNewbie&amp;src=hashtag_click\">#CodeNewbie</a> hashtag is a handy thing to use if you’re ever in need of help.</p>\n<h4>Set Targets And Timetables</h4>\n<p>Now it’s time to tie your self-directed learning goals to some targets. Try not to set the bar too high — if it’s unrealistic for you to complete a Udemy course in one week, don’t try to push yourself to do it so hard you either meet the target at the expense of other important things in your life or fail to meet the target and make yourself feel like a failure. The idea is to <strong>keep yourself on track</strong>, applying gentle pressure to stay motivated, but not so much that you feel overwhelmed and lose all motivation.</p>\n<p>As a morning person, I feel best able to concentrate on study in the hours before my day-job starts at 9.30 am. With this in mind, and using the wonderful time-tracking tool, <a href=\"https://toggl.com/\">Toggl</a>, I spend 7 am to 9 am two mornings per week on code study. Using Toggl was extremely important to me because, no matter how much I do, I often feel as if it isn’t enough. But with Toggl’s help, I could see for certain that I was doing a <strong>minimum of four hours per week</strong> (with extra in the evenings and weekends if I felt like it) and I felt better able to step away from my laptop and rest when my time was up, safe in the knowledge that I’d racked up an acceptable amount of hours by my own standards.</p>\n<h4>Make Progress Measureable</h4>\n<p>Think about your average weekly schedule and try to <strong>block off some time</strong> in the day when you stand the best chance of securing unbroken focus. Some of you will be carers or otherwise extremely busy, and it’s probably going to be better for you to take your time as and when you can get it.</p>\n<p>If it helps you to see an example, my personal targets are the following:</p>\n<ul>\n<li>Complete a Node.js Udemy course by the end of February.</li>\n<li>Do 30 minutes of Execute Program before work every day.</li>\n</ul>\n<p>Try to err on the side of caution for your first set of targets. You can always turn up the pressure if you want to, but it’s better to do so once you’ve succeeded at a few; <strong>make sure you have the spare mental and physical space</strong> to really concentrate on what you need to do to stay on track.</p>\n<h4>Find A Mentor, Or A Buddy, Or Both!</h4>\n<p>Mentorship is something that most developers would recommend to improve skills, but, from my personal experience, finding someone with the time to guide you is a challenge, especially now. There are resources such as <a href=\"https://codingcoach.io/\">Coding Coach</a> that may help you, and I know a few developers who found their dream mentor at meet-ups and on social media, but finding the perfect match is easier said than done.</p>\n<p>I spoke to Falina Lothamer, an Instructional Designer at <a href=\"https://www.thinkful.com/\">Thinkful</a> — a Massive Open Online Course (or MOOC, for short) — to get an idea of how professionals approach independent learning. She was very clear that finding and <strong>working with a mentor is key</strong> to progressing your skills as a developer.</p>\n<blockquote><p>“If you need to have something laid out for you, having that mentor to say: ‘Here’s where I think you should focus’, showing you what they’re doing at their job, and sharing their opinion on what the future of your area of tech is is going to help a lot. I think there are a lot of people in the industry who are willing to <strong>fill that mentor role</strong> and do for others what someone has done for them.”</p></blockquote>\n\n<p>After expressing some of my frustrations at having hit a brick wall with a number of Udemy courses, simply finding myself retaining information and not necessarily having the confidence in what I’ve learned to apply it in other areas, or on other projects, Fallina was clear that <strong>being accountable to another person</strong> — ideally a mentor but equally another developer with a similar amount of professional experience to you — is essential.</p>\n<blockquote><p>“As a developer, you need to look for <strong>opportunities to demonstrate what you know</strong>, and how you’re learning. Having someone else to talk to about the challenges you’re facing, and having space to talk it over with someone and to realize ‘this thing that I’m trying to do is complicated, I’m not a terrible developer’, having that validation can be huge.”</p></blockquote>\n\n<p>For those who don’t manage to find a senior developer to take them under their wing, I recommend taking Fallina’s advice and making yourself accountable to someone else in the industry at a similar level to you. Developers banding together and sharing stories will reinforce that this job _is_ hard, and that they are not the only engineers struggling to get by at work some days. This work can be very emotionally taxing, and <strong>having a buddy to struggle along with</strong> will be invaluable on those days when nothing seems to be going well.</p>\n<p>I’d recommend signing up to <a href=\"https://www.interviewcake.com/\">Interview Cake</a>, <a href=\"https://www.executeprogram.com/\">Execute Program</a>, or a relevant Udemy course for your skill level and specialism, and completing the same exercises as your buddy at roughly the same time. Discuss what you found easier, and where you fell down, and maintain contact with one another throughout. While you certainly can do these things alone, fostering a sense of community will help you to stay on task, and make it more likely that you stick at it.</p>\n<h4>A Case For Scratch Pad Applications</h4>\n<p>If you’ve got the time and energy to pour into a large side-project on top of work, more power to you, but I find the pressure to do so somewhat burdensome. Instead, I am a fan of the scratch pad project, primarily because I really benefit from following lots of new ideas at once, and quickly become disinterested in personal projects there is no time pressure to drive me along.</p>\n<p>If your side-project makes an API call, displays the information in a semi-appealing way, and you’ve learned something from the process, and building the project out into a larger application doesn’t fit with your neurology, your caring schedule, or your tastes, then <strong>give yourself a break</strong>. You wouldn’t sneer at an artist for sketching, and you certainly shouldn’t feel bad if your side-projects are half-formed mutants as long as you’re getting something out of the process. My GitHub repositories are elegies to good ideas gone by, and I’ve made my peace with it.</p>\n<h3>Roundup</h3>\n<p>Given the state of the world right now, the last thing I want to be is another voice demanding productivity in lockdown. That’s not what this is about. These are simply <strong>steps that worked for me</strong> when I needed to learn over time, without burning out or placing undue pressure on myself. If they work for you, wonderful. If not, no worries. We all have our own pace.</p>\n<h4>Steps</h4>\n<ol>\n<li>Use job specs to identify key skills.</li>\n<li>Split those skills between at-work learning and in-your-own-time learning.</li>\n<li>Set clear, measurable, realistic goals, and step them up only when you’ve found your rhythm.</li>\n<li>Find a mentor or buddy so you’re accountable for those goals.</li>\n<li>Relax! Messy learning is better than no learning.</li>\n</ol>\n<h4>Useful Resources</h4>\n<ul>\n<li><a href=\"https://www.udemy.com/\">Udemy</a></li>\n<li><a href=\"https://www.interviewcake.com/\">Interview Cake</a></li>\n<li><a href=\"https://www.edx.org/course/cs50s-introduction-to-computer-science\">CS50</a></li>\n<li><a href=\"https://www.executeprogram.com/\">Execute Program</a></li>\n<li><a href=\"https://codingcoach.io/\">Coding Coach</a></li>\n<li><a href=\"https://toggl.com/\">Toggl</a></li>\n<li><a href=\"https://twitter.com/search?q=%23CodeNewbie&amp;src=hashtag_click\">#CodeNewbie</a></li>\n<li><a href=\"https://smashingconf.com/online-workshops/workshops\">Smashing Mag’s Online Workshops</a></li>\n<li><a href=\"https://www.freecodecamp.org\">FreeCodeCamp</a></li>\n<li><a href=\"https://frontendmasters.com/\">Frontend Masters</a></li>\n<li><a href=\"https://www.indeed.co.uk/\">Indeed</a></li>\n<li><a href=\"https://jobs.theguardian.com/\">Guardian Jobs</a></li>\n<li><a href=\"https://www.linkedin.com/jobs/\">LinkedIn</a></li>\n</ul>\n<p>Good luck!</p>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"2f7e29a608eee6f639e318a4649188cdd7a223f7db4ee35b5b706e73f81511ea","category":"Tech"}
{"title":"Azure Managed Identities with the HashiCorp Stack: Part 1","link":"https://www.hashicorp.com/blog/azure-managed-identities-with-the-hashicorp-stack-part-1","date":1614978900000,"content":"<p>Managing credentials for infrastructure to authenticate against the cloud has been a problem many cloud engineers have faced over the years. With the introduction of concepts such as <a href=\"https://www.hashicorp.com/resources/what-is-infrastructure-as-code\">infrastructure as code</a> and configuration as code, the problem has spread to code management of infrastructure and its configuration.</p>\n<p>There are also applications that run on this infrastructure that need to authenticate against the cloud. Engineers have attempted to solve this issue in many different ways over the years; however, these attempts have often not been without compromise. Cloud providers have been working to solve this issue and Microsoft has played their part by releasing <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\">Managed Identities</a>.</p>\n<h2><a class=\"__permalink-h\" href=\"#introduction-to-azure-managed-identities\" aria-label=\"introduction to azure managed identities permalink\">»</a><a class=\"__target-h\" id=\"introduction-to-azure-managed-identities\" aria-hidden></a>Introduction to Azure Managed Identities</h2>\n<p>Managed Identities (formerly known as Managed Service Identities) is an identity and access management feature of Microsoft’s Azure cloud offering that assigns identities to machines. This comes in two flavors: System-assigned identities, and user-assigned identities.</p>\n<p>System-assigned identities are created with the Azure resource and are tied to the lifecycle of that resource. The nice thing about this type is that, when the resource is deleted, the identity is also deleted. This has a one-to-one relationship with the Azure resource, which greatly reduces the risk of identity sprawl.</p>\n<p>User-assigned identities are created independent of Azure resources and are scoped to the subscription. In fact, this in itself is an Azure resource. The benefit of this approach is that it allows a one-to-one or one-to-many relationship. This means that you can assign an identity to a group of VMs, for example, all VMs provisioned for the purpose of hosting HashiCorp Vault can have a single identity assigned to them. This eases the burden of access management. The tradeoff with this approach is that you will need to manage the lifecycle of the identities yourself in order to not have identity sprawl.</p>\n<p>While we need not worry about the inner workings under the hood, it’s handy to point out a few key details:</p>\n<ul>\n<li>Managed Identities are a feature of Azure Active Directory.</li>\n<li>They are just Service Principals.</li>\n<li>The Service Principal is scoped to the tenant trusted by the subscription.</li>\n<li>The service Principal consists of a Client ID and a certificate</li>\n<li>It uses the Client ID and Certificate to request an access token from Azure AD</li>\n</ul>\n<h2><a class=\"__permalink-h\" href=\"#hashicorp-support-for-azure-managed-identities\" aria-label=\"hashicorp support for azure managed identities permalink\">»</a><a class=\"__target-h\" id=\"hashicorp-support-for-azure-managed-identities\" aria-hidden></a>HashiCorp Support for Azure Managed Identities</h2>\n<p>The HashiCorp stack works in harmony with Azure and many of our products allow practitioners to make use of Managed Identities. HashiCorp Packer and Terraform fully support Managed Identities as an authentication method (as well as a <a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/user_assigned_identity\">resource in the case of Terraform</a>).</p>\n<p>A common use case for Managed Identities with Terraform is authentication of a worker node responsible for Terraform runs to provision other Azure resources as part of an orchestration piece. This could be a Jenkins worker node for example.</p>\n<p>In order for that node to have the ability to provision to Azure resources, it first needs to authenticate against Azure. To achieve this, people historically set some environment variables to tell Terraform what subscription ID, Tenant ID, and Client Secret to use to authenticate with. It’s important to highlight that these environment variables are sensitive data or “secrets” and should be handled accordingly.</p>\n<p>In order to reliably ensure these variables are always set correctly, we have the challenge of secure secret introduction. This is the problem of how we can inject secret zero into the machine build. As we typically deploy infrastructure with code, we would need to find a way of putting this information in the code without exposing it. This is a barrier to storing your code in a version control system (VCS).</p>\n<p>These authentication details can also be set inside the provider declaration block; however, we have the same challenges as the environment variables as we still are unable to store our code in a VCS while the secrets are present in the code.</p>\n<p>Managed Identities solve these problems as we now do not need to configure these authentication details. Instead, these details are securely baked into the VM as metadata which is only readable by Azure. Now we can express ourselves in Terraform and trust that our VM will have the ability to provision our Azure resources without the burden of managing the <a href=\"https://www.hashicorp.com/resources/secret-zero-mitigating-the-risk-of-secret-introduction-with-vault\">introduction of secret zero</a>.</p>\n<h2><a class=\"__permalink-h\" href=\"#demo-provisioning-managed-identities-using-a-terraform-resource\" aria-label=\"demo provisioning managed identities using a terraform resource permalink\">»</a><a class=\"__target-h\" id=\"demo-provisioning-managed-identities-using-a-terraform-resource\" aria-hidden></a>Demo: Provisioning Managed Identities Using a Terraform Resource</h2>\n<p>The below video is a demonstration of how we can provision Managed Identities using this Terraform resource.</p><iframe width=\"560\" height=\"315\" src=https://youtu.be/5EsXuyqwiLM frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><h2><a class=\"__permalink-h\" href=\"#how-to-use-managed-identities-in-packer\" aria-label=\"how to use managed identities in packer permalink\">»</a><a class=\"__target-h\" id=\"how-to-use-managed-identities-in-packer\" aria-hidden></a>How to Use Managed Identities in Packer</h2>\n<p>The use case for Packer is almost identical to Terraform. The workflow for a Packer image build follows these steps:</p>\n<ol>\n<li>\n<p>Packer deploys a VM and any other required resources in your cloud environment as per the configuration in your Packer template.</p>\n</li>\n<li>\n<p>Packer will run your provisioner against the VM provisioned in step 1. This could be a shell script, Ansible playbook, a PowerShell script, or any other type of configuration management. Currently, Packer supports 18 different provisioners. In addition to this, there are community-supported provisioners as Packer allows you to build your own.</p>\n</li>\n<li>\n<p>Packer will then run any post processors that are specified in the build manifest.</p>\n</li>\n<li>\n<p>The above steps prepare the VM to be in the state that you would like to image. Packer then takes this VM and creates a VM image.</p>\n</li>\n<li>\n<p>With the image built, Packer will store it according to your storage definition in your manifest. This could be Azure Shared Image Gallery for example.</p>\n</li>\n<li>\n<p>For the final step, Packer cleans up all of the resources it created in step</p>\n</li>\n</ol>\n<p>As you can see from the steps above, Packer will need to authenticate with Azure in order to deploy the target machine, access it, and store the image. Even though you can specify service principal details in your manifest, we have the same challenges as discussed with Terraform. When your Packer VM is deployed in Azure, it can use Managed Identity to authenticate with Azure. This will allow Packer to perform the steps above. This is the default authentication method when no credentials are supplied and a managed Identity is present on the Virtual Machine.</p>\n<h2><a class=\"__permalink-h\" href=\"#summary\" aria-label=\"summary permalink\">»</a><a class=\"__target-h\" id=\"summary\" aria-hidden></a>Summary</h2>\n<p>In this blog post, we have introduced the concept of Managed Identities, looked at how they work and why we would use them. We have also demonstrated how we can use Terraform to provision a Managed Identity resource as well as authenticate with Azure using them. We have also looked at how Packer can take advantage of Managed Identity.</p>\n<p>In part 2, we will look at how HashiCorp Vault can take advantage of Managed Identities to ease Vault operations.</p>","author":"Rob Barnes","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"9973ee1f64e853cc4cc7303e1849f90de3dcff4db442ebd12abba7425688adc4","category":"Tech"}
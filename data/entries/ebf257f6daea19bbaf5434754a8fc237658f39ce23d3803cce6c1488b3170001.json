{"title":"Easily Manage Security Group Rules with the New Security Group Rule ID","link":"https://aws.amazon.com/blogs/aws/easily-manage-security-group-rules-with-the-new-security-group-rule-id/","date":1625693264000,"content":"<p>At AWS, we tirelessly innovate to allow you to focus on your business, not its underlying IT infrastructure. Sometimes we launch a <a href=\"https://aws.amazon.com/blogs/aws/aws-compute-optimizer-your-customized-resource-optimization-service/\">new service</a> or a <a href=\"https://aws.amazon.com/blogs/aws/lightsail-containers-an-easy-way-to-run-your-containers-in-the-cloud/\">major capability</a>. Sometimes we focus on <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/11/faster-access-to-regions-on-AWS-management-console/\">details</a> that make your professional life easier.</p> \n<p>Today, I’m happy to announce one of these small details that makes a difference: VPC security group rule IDs.</p> \n<p>A security group acts as a virtual firewall for your cloud resources, such as an <a href=\"https://aws.amazon.com/ec2/\">Amazon Elastic Compute Cloud (Amazon EC2)</a> instance or a <a href=\"https://aws.amazon.com/rds/\">Amazon Relational Database Service (RDS)</a> database. It controls ingress and egress network traffic. Security groups are made up of security group rules, a combination of protocol, source or destination IP address and port number, and an optional description.</p> \n<p>When you use the <a href=\"https://aws.amazon.com/cli/\">AWS Command Line Interface (CLI)</a> or API to modify a security group rule, you must specify all these elements to identify the rule. This produces long CLI commands that are cumbersome to type or read and error-prone. For example:</p> \n<pre><code>aws ec2 revoke-security-group-egress \\\n         --group-id sg-0xxx6          \\\n         --ip-permissions IpProtocol=tcp, FromPort=22, ToPort=22, IpRanges='[{CidrIp=192.168.0.0/0}, {84.156.0.0/0}]'</code></pre> \n<p><strong><span>What’s New?</span></strong><br /> A security group rule ID is an unique identifier for a security group rule. When you add a rule to a security group, these identifiers are created and added to security group rules automatically. Security group IDs are unique in an AWS Region. Here is the <strong>Edit inbound rules</strong> page of the <a href=\"https://eu-central-1.console.aws.amazon.com/vpc/home\">Amazon VPC console</a>:</p> \n<p><a href=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/04/16/2021-04-16_17-56-45.png\"><img src=\"https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/04/16/2021-04-16_17-56-45-1024x450.png\" /></a></p> \n<p>As mentioned already, when you create a rule, the identifier is added automatically. For example, when I’m using the <span>CLI</span>:</p> \n<pre><code>aws ec2 authorize-security-group-egress                                  \\\n        --group-id sg-0xxx6                                              \\\n        --ip-permissions IpProtocol=tcp,FromPort=22,ToPort=22,           \\\n                         IpRanges=[{CidrIp=1.2.3.4/32}]\n        --tag-specifications                                             \\\n                         ResourceType='security-group-rule',             \\\n                         \"Tags\": [{                                      \\\n                           \"Key\": \"usage\", \"Value\": \"bastion\"            \\\n                         }]</code></pre> \n<p>The updated <code>AuthorizeSecurityGroupEgress</code> API action now returns details about the security group rule, including the security group rule ID:</p> \n<pre><code>\"SecurityGroupRules\": [\n    {\n        \"SecurityGroupRuleId\": \"sgr-abcdefghi01234561\",\n        \"GroupId\": \"sg-0xxx6\",\n        \"GroupOwnerId\": \"6800000000003\",\n        \"IsEgress\": false,\n        \"IpProtocol\": \"tcp\",\n        \"FromPort\": 22,\n        \"ToPort\": 22,\n        \"CidrIpv4\": \"1.2.3.4/32\",\n        \"Tags\": [\n            {\n                \"Key\": \"usage\",\n                \"Value\": \"bastion\"\n            }\n        ]\n    }\n]</code></pre> \n<p>We’re also adding two API actions: <code>DescribeSecurityGroupRules</code> and <code>ModifySecurityGroupRules</code> to the <span>VPC</span> APIs. You can use these to list or modify security group rules respectively.</p> \n<p><span><strong>What are the benefits ?</strong></span><br /> The first benefit of a security group rule ID is simplifying your <span>CLI</span> commands. For example, the <code>RevokeSecurityGroupEgress</code> command used earlier can be now be expressed as:</p> \n<pre><code>aws ec2 revoke-security-group-egress \\\n         --group-id sg-0xxx6         \\\n         --security-group-rule-ids \"sgr-abcdefghi01234561\"</code></pre> \n<p>Shorter and easier, isn’t it?</p> \n<p>The second benefit is that security group rules can now be tagged, just like many other AWS resources. You can use tags to quickly list or identify a set of security group rules, across multiple security groups.</p> \n<p>In the previous example, I used the tag-on-create technique to add tags with <code>--tag-specifications</code> at the time I created the security group rule. I can also add tags at a later stage, on an existing security group rule, using its ID:</p> \n<pre><code>aws ec2 create-tags                         \\\n        --resources sgr-abcdefghi01234561   \\\n        --tags \"Key=usage,Value=bastion\"</code></pre> \n<p>Let’s say my company authorizes access to a set of <span>EC2</span> instances, but only when the network connection is initiated from an on-premises bastion host. The security group rule would be <code>IpProtocol=tcp, FromPort=22, ToPort=22, IpRanges='[{1.2.3.4/32}]'</code> where <code>1.2.3.4</code> is the IP address of the on-premises bastion host. This rule can be replicated in many security groups.</p> \n<p>What if the on-premises bastion host IP address changes? I need to change the <code>IpRanges</code> parameter in all the affected rules. By tagging the security group rules with <code>usage : bastion</code>, I can now use the <code>DescribeSecurityGroupRules</code> API action to list the security group rules used in my AWS account’s security groups, and then filter the results on the <code>usage : bastion</code> tag. By doing so, I was able to quickly identify the security group rules I want to update.</p> \n<pre><code>aws ec2 describe-security-group-rules \\\n        --max-results 100 \n        --filters \"Name=tag-key,Values=usage\" --filters \"Name=tag-value,Values=bastion\" </code></pre> \n<p>This gives me the following output:</p> \n<pre><code>{\n    \"SecurityGroupRules\": [\n        {\n            \"SecurityGroupRuleId\": \"sgr-abcdefghi01234561\",\n            \"GroupId\": \"sg-0xxx6\",\n            \"GroupOwnerId\": \"40000000003\",\n            \"IsEgress\": false,\n            \"IpProtocol\": \"tcp\",\n            \"FromPort\": 22,\n            \"ToPort\": 22,\n            \"CidrIpv4\": \"1.2.3.4/32\",\n            \"Tags\": [\n                {\n                    \"Key\": \"usage\",\n                    \"Value\": \"bastion\"\n                }\n            ]\n        }\n    ],\n    \"NextToken\": \"ey...J9\"\n}</code></pre> \n<p>As usual, you can manage results pagination by issuing the same API call again passing the value of <code>NextToken</code> with <code>--next-token</code>.</p> \n<p><span><strong>Availability</strong></span><br /> Security group rule IDs are available for VPC security groups rules, in all commercial AWS Regions, at no cost.</p> \n<p>It might look like a small, incremental change, but this actually creates the foundation for future additional capabilities to manage security groups and security group rules. Stay tuned!</p>","author":"Sébastien Stormacq","siteTitle":"AWS News Blog","siteHash":"6093e072e4117ec22616e844cb857d03ca62c57a411a8affc77cb5e8b6b15bf6","entryHash":"ebf257f6daea19bbaf5434754a8fc237658f39ce23d3803cce6c1488b3170001","category":"Tech"}
{"title":"Announcing Launch Day Support for AWS App Runner in the Terraform AWS Provider","link":"https://www.hashicorp.com/blog/announcing-launch-day-support-for-aws-app-runner-in-the-terraform-aws-provider","date":1621357200000,"content":"<p>In partnership with AWS, we are pleased to announce launch day support for AWS App Runner in the Terraform AWS Provider. AWS App Runner is a purpose-built container application service that enables you to build and run containerized web applications, mobile backends, and API services in just a few clicks.</p>\n<h2><a href=\"#how-it-works\">»</a><a></a>How It Works</h2>\n<p>App Runner is powered by <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a>, a serverless compute engine that runs billions of containers, and provides customers with a secure compute environment with no infrastructure overhead. With App Runner, there are no servers or container orchestrators to manage.</p>\n<p>You provide your source code or image repository and App Runner automatically builds and deploys the container image, sets up and manages load balancing, delivers encryption, and scales up or down based on incoming request traffic. App Runner connects directly to your code or image repository, providing an automatic integration and delivery pipeline with fully managed operations, high performance, scalability, and security.</p>\n<p>You can use App Runner to easily and immediately deploy a new version of your code or container image. App Runner enables automatic deployments each time a commit is pushed to the code repository or a new container image version is pushed to the image repository.</p>\n<p>Additional information about this service can be found within <a href=\"https://aws.amazon.com/blogs/aws/app-runner-from-code-to-scalable-secure-web-apps/\">this blog post</a> from AWS, and the <a href=\"https://aws.amazon.com/apprunner/\">AWS App Runner documentation</a>.</p>\n<h2><a href=\"#configuring-app-runner-in-the-terraform-aws-provider\">»</a><a></a>Configuring App Runner in the Terraform AWS Provider</h2>\n<p>To set up AWS App Runner in the Terraform AWS provider, you will employ a few new resources: <code>aws_apprunner_connection</code>, <code>aws_apprunner_service</code>, \t<code>aws_apprunner_autoscaling_configuration_version</code>, <code>aws_apprunner_custom_domain_association</code>.</p>\n<p>In order to try out this feature, you will need:</p>\n<ul>\n<li>Terraform v0.12 or greater installed</li>\n<li>The latest version of the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\">Terraform AWS provider</a></li>\n</ul>\n<p>To create an App Runner service built from a GitHub repository source, you will first apply the following configuration and then complete the authentication handshake in the AWS App Runner console:</p><pre><code>resource \"aws_apprunner_connection\" \"example\"\n  connection_name = \"example\"\n  provider_type       = \"GITHUB\"\n  tags = {\n    Name = \"example-gh-connection\"\n  }\n}</code></pre><p>Once you have completed the authentication step and the connection status is “AVAILABLE”, you can further configure AWS App Runner using the sample configuration below as a guide.</p><pre><code>resource “aws_apprunner_auto_scaling_configuration_version” “example” {\n  auto_scaling_configuration_name = “example”\n  max_concurrency                 = 100\n  max_size                        = 10\n  min_size                        = 2\n\n  tags = {\n    Name = “apprunner-auto-scaling-example”\n  }\n}\n\nresource \"aws_apprunner_service\" \"example\" {\n  auto_scaling_configuration_arn = aws_apprunner_auto_scaling_configuration_version.example.arn\n\n service_name = “example”\n\n source_configuration {\n   authentication_configuration {\n    connection_arn = aws_apprunner_connection.example.arn\n   }\n\n   code_repository {\ncode_configuration {\n       configuration_source = \"API\"\n       \n       code_configuration_values {\n \t   runtime = \"python3\"\n \t   build_command = \"python setup.py develop\"\n \t   start_command = \"python runapp.py\"\n \t   port           = \"8000\"\n       }\n      }\n \n      repository_url = \"https://github.com/example/my-python-app\"\n     \n \t source_code_version {\n       type  = \"BRANCH\"\n       value = \"main\"\n      }\n\n   }\n}\n tags = {\n   Name = “my-apprunner-service”\n } \n}\n\nresource “aws_apprunner_custom_domain_association” “example” {\n  domain_name = “example.com”\n  service_arn = aws_apprunner_service.example.arn\n}</code></pre><h2><a href=\"#further-information\">»</a><a></a>Further Information</h2>\n<p>For more information on how to use this feature in Terraform, consult the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\">provider documentation</a> in the Terraform Registry.</p>\n<p>To report bugs and request enhancements for this feature, open an issue on the <a href=\"http://github.com/terraform-providers/terraform-provider-aws\">Terraform AWS Provider repository</a> on GitHub. We would love to hear your feedback!</p>","author":"Mary Cutrali","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"75917b7aca65ad48801df41d0ecb76ba1fc5f1155135159e03a4bc25c5ed6578","category":"Tech"}
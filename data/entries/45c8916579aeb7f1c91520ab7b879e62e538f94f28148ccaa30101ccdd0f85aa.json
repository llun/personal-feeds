{"title":"Tips การใช้งาน Git แบบง่าย ๆ  ไหมนะ !!","link":"https://www.somkiat.cc/tips-with-git/","date":1621150199000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/git-shit-150x150.jpg\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/git-shit.jpg\" /></figure>\n\n\n\n<p>วันนี้ทำการสรุปเรื่องการใช้งาน Git ไว้<br />เพื่อใช้สำหรับการทำ workshop เกี่ยวกับการจัดการ version ของ code<br />จึงทำให้เห็นว่ามี tip ที่น่าสนใจ และ ใช้งานบ่อย ๆ ไว้</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>เรื่องแรกที่มักจะบอกเสมอคือ อย่า Force Push</strong> !!</p>\n\n\n\n<p>ถ้าไม่จำเป็นจริง ๆ เช่น ต้องการให้พังก็ force ไป<br />เพราะว่า การ force push นั้น<br />เป็นการเปลี่ยนแปลง history ของ commit ใน remote repository<br />ดังนั้นจะทำให้คนอื่น ๆ มีปัญหาไปด้วย<br />อาจจะมาจากการ rebase หรือ squash commit<br /><br />ดังนั้นถึงระวังไว้ <br />ยิ่งถ้าใครสาย UI จะพบว่าแค่ไป check ที่ force push ก็ไปเลยนะ !!<br /><br />ถ้าจะทำจริง ๆ ทางเลือกที่เจ็บน้อยลงคือ Force with lease<br />ซึ่งสามารถทำการ alias จาก force push มาเป็น Force with lease ได้</p>\n\n\n\n<p><strong>เรื่องที่สอง ถ้าขี้เกียจกำหนด remote branch ก็ใช้ upstream ไป</strong></p>\n\n\n\n[code]\n$git push -u origin your-branch\n[/code]\n\n\n\n<p><strong>เรื่องที่สาม ตั้วชื่อ branch ให้มันรู้เรื่องและเข้าใจ ตรงกับสิ่งที่ทำ</strong></p>\n\n\n\n<p>ชื่อ branch ที่ไม่ควรมี</p>\n\n\n\n<ul><li>feature01, 02, 03</li><li>ชื่อของเราเอง !!</li></ul>\n\n\n\n<p>เพิ่มเติมคือ commit message เช่นเดียวกัน<br />มันมีใส่ทั้ง subject และ description นะ<br />ไม่ใช่มีแต่ update update update<br />ไม่ใช่มีแต่ fixed fixed fixed</p>\n\n\n\n<p><strong>เรื่องที่สี่ สำหรับสาย feature branch ถ้า merge ไปแล้วก็ลบทิ้งไปซะ</strong></p>\n\n\n\n<p>มาก branch มากความ <br />แต่หลายคนบอกว่าหลีกเลี่ยงไม่ได้<br />แต่เมื่อคุณทำการ merge ไปยัง branch หลักเรียบร้อย<br />แล้วควรลบ feature branch นั้น ๆ ไปซะ<br />จะเก็บไว้ทำซากอะไร !!<br />ยิ่งเป็น local branch ยิ่งควรลบ</p>\n\n\n\n<p>หรือถ้ามีคนลบ branch จาก remote repository แล้ว<br />เมื่อเราทำการ fetch มา แล้วทำการลบที่ local repository เลย<br />ให้ทำการ config ดังนี้</p>\n\n\n\n[code]\n$git config fetch.prune true\n[/code]\n\n\n\n<p><strong>เรื่องที่ห้า สายหลบ หรือ การ stash เพื่อเก็บการเปลี่ยนแปลงที่ local ไว้</strong></p>\n\n\n\n<p>ก่อนที่จะทำการ pull หรือเปลี่ยน branch มักจะใช้ stash <br />ดังนั้นการใช้งานควรใส่ชื่อหรือ stash message ที่สื่อถึงก่ีเปลี่ยนแปลงเหล่านั้นไว้ด้วย<br />กฎกติกาคือ ควรมี stash ได้เพียง 1 ตัวเท่านั้น</p>\n\n\n\n<p><strong>เรื่องที่หก Rebase vs Merge</strong></p>\n\n\n\n<p>ปกติแล้วนั้น git จะทำการ merge ให้อัตโนมัติ<br />สำหรับการ pull การเปลี่ยนแปลงมาที่ local branch repository<br />ซึ่งจะทำการสร้าง commit สำหรับการ merge ขึ้นมา<br />ทำให้หลาย ๆ คนอาจจะไม่พอได้ผลการทำงาน</p>\n\n\n\n<p>ดังนั้น เพื่อความ clean ของ commit ใน branch ต่าง ๆ<br />แนะนำให้ใช้การ rebase แทน<br />แต่ก็ระวังด้วย เพราะว่า จะทำให้เกิดปัญหาในข้อหนึ่ง</p>\n\n\n\n<p>สามารถเปลี่ยนค่า default ของการ pull เป็น rebase ดังนี้</p>\n\n\n\n[code]\n$git config pull.rebase true\n[/code]\n\n\n\n<p>อีกอย่าง ผมมักจะทำ squash ก่อน rebase เสมอ<br />เป็นการยุบหรือตกแต่ง commit ให้สวยงาม<br />เช่นจาก 20 commit รวมให้เหลือแค่ 5 commit <br />ก็ได้จะทำให้เราได้ release note สวย ๆ</p>\n\n\n\n<p>สามารถกำหนดค่า default ของการ rebase ให้เป็น squash ได้เลย</p>\n\n\n\n[code]\n$git config rebase.autosquash true\n[/code]\n\n\n\n<p><strong>เรื่องที่เจ็ด ต้องการเปลี่ยน commit message ใน commit ล่าสุดด้วย amend</strong></p>\n\n\n\n[code]\n$git commit --amend\n[/code]\n\n\n\n<p>หรือลืม add file ใน commit ล่าสุด ก็เพิ่มเข้าไป</p>\n\n\n\n[code]\n$git add somefile\n$git commit --amend\n[/code]\n\n\n\n<p><strong>เรื่องสุดท้าย ลบ file และ folder ที่ untracked ทิ้งไป ด้วย git clean -d --force</strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"45c8916579aeb7f1c91520ab7b879e62e538f94f28148ccaa30101ccdd0f85aa","category":"Thai"}
{"title":"Announcing Support for Predictive Scaling Policy in the Terraform AWS Provider","link":"https://www.hashicorp.com/blog/announcing-support-for-predictive-scaling-policy-in-the-terraform-aws-provider","date":1621463400000,"content":"<p>Along with our partner Amazon Web Services, we are pleased to announce support for predictive scaling policy for <a href=\"https://aws.amazon.com/ec2/autoscaling/\">Amazon EC2 Auto Scaling</a> in the Terraform AWS Provider. Predictive Scaling uses machine learning to analyze the history of the Auto Scaling group in order to launch capacity levels in advance.</p>\n<h2><a href=\"#how-it-works\">»</a><a></a>How It Works</h2>\n<p>Predictive scaling is a new auto scaling policy that proactively increases capacity of your EC2 Auto Scaling group to meet upcoming demand. In other words, predictive scaling learns from the historic demand and usage patterns within an EC2 Auto Scaling group, including regularly occurring spikes, to predict future capacity. After predicting capacity requirements, your Auto Scaling group will then launch the required number of instances to ensure that enough instances are provisioned to meet predicted demand. As a result, applications are more responsive for end users without over-provisioned capacity going unused.</p>\n<p>In order to accurately forecast demand and capacity, predictive scaling relies on two historical metrics, Load Metric and Scaling Metric. Load Metric is a proxy for total demand on the Auto Scaling group while Scaling Metric is a proxy for average usage of an instance within an Auto Scaling group.</p>\n<p>Predictive scaling forecasts demand based on Load Metric trends. To calculate required capacity, predictive scaling tracks the corresponding trend of the Scaling Metric against the Load Metric and ensures that enough instances are launched to maintain the Scaling Metric at the target value.</p>\n<p>AWS recommends using both dynamic scaling and predictive scaling for more accurate auto scaling. Predictive scaling sets the baseline capacity according to the historic pattern of your Auto Scaling group, while dynamic scaling makes upward adjustments to account for any deviations on top of forecasted demand. Predictive scaling leads to a scaling action only if the predicted capacity is higher than the desired capacity. Predictive scaling does not scale-in your Auto Scaling groups on its own and relies on dynamic scaling to scale-in. If you are using an alternate mechanism to change the desired capacity of an Auto Scaling group, you can continue using that along with predictive scaling.</p>\n<p>Additional information about this service can be found within the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\">EC2 Auto Scaling documentation</a>.</p>\n<h2><a href=\"#enabling-predictive-scaling-policy-in-the-terraform-aws-provider\">»</a><a></a>Enabling Predictive Scaling Policy in the Terraform AWS Provider</h2>\n<p>In order to use  Predictive Scaling Policy in the Terraform AWS provider, you will need to employ one new resource <code>aws_predictive_scaling_configuration</code> as well as make some changes to the existing <code>aws_autoscaling_policy</code> resource.</p>\n<p>In order to try out this feature, you will need:</p>\n<ul>\n<li>Terraform v0.12 or greater installed</li>\n<li>The latest version of the Terraform AWS provider</li>\n</ul>\n<p>The Terraform configuration below demonstrates how the Terraform AWS provider can be used to configure Predictive Scaling within an EC2 Auto Scaling group.</p><pre><code>data \"aws_ami\" \"amzn\" {                                                         \n most_recent = true                                                            \n owners      = [\"amazon\"]                                                          \n filter {                                                                      \n   name   = \"name\"                                                             \n   values = [\"amzn2-ami-hvm-*-x86_64-gp2\"]                                     \n }                                                                             \n}                                                                               \ndata \"aws_availability_zones\" \"available\" {                                      \n state = \"available\"                                                           \n filter {                                                                      \n   name   = \"opt-in-status\"                                                    \n   values = [\"opt-in-not-required\"]                                            \n }                                                                             \n}                                                                               \nresource \"aws_launch_configuration\" \"test\" {                                    \n name          = \"launch_configuration\"                                                          \n image_id      = data.aws_ami.amzn.id                                          \n instance_type = \"t2.micro\"                                                    \n}                                                                               \nresource \"aws_autoscaling_group\" \"test\" {                                       \n availability_zones   = slice(data.aws_availability_zones.available.names, 0, 2)\n name                 = \"autoscaling_group\"                                                   \n max_size             = 0                                                      \n min_size             = 0                                                      \n force_delete         = true                                                   \n launch_configuration = aws_launch_configuration.test.name                     \n}\nresource \"aws_autoscaling_policy\" \"policy_predictive\" {\n name                   = \"policy_predictive\"\n policy_type            = \"PredictiveScaling\"\n autoscaling_group_name = aws_autoscaling_group.test.name\n predictive_scaling_config {\n   metric_specification {\n     target_value = 32\n     predefined_scaling_metric_specification {\n      predefined_metric_type = \"ASGAverageCPUUtilization\"\n      resource_label         = \"testLabel\"\n     }\n     predefined_load_metric_specification {\n      predefined_metric_type = \"ASGTotalCPUUtilization\"\n      resource_label         = \"testLabel\"\n     }\n   }\n   mode                          = \"ForecastAndScale\"\n   scheduling_buffer_time        = 10\n   max_capacity_breach_behavior  = \"IncreaseMaxCapacity\"\n   max_capacity_buffer           = 10\n }\n}</code></pre><h2><a href=\"#further-information\">»</a><a></a>Further Information</h2>\n<p>For more information on how to use this feature in Terraform, consult the <a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\">provider documentation</a> in the Terraform Registry.</p>\n<p>To report bugs and request enhancements for this feature, open an issue on the <a href=\"http://github.com/terraform-providers/terraform-provider-aws\">Terraform AWS Provider repository</a> on GitHub. We would love to hear your feedback!</p>","author":"Mary Cutrali","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"5955781e5febb43756875797de5e094629fc8476066b93e4272fcae1570b3295","category":"Tech"}
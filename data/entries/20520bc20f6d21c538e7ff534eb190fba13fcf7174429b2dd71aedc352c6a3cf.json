{"title":"New Terraform Tutorial: Terraform Data Sources","link":"https://www.hashicorp.com/blog/new-terraform-tutorial-terraform-data-sources","date":1617865200000,"content":"<p>HashiCorp Terraform uses providers to manage cloud infrastructure, which you define in Terraform configuration files. When learning to use Terraform, practitioners focus on resource blocks, which map to infrastructure that Terraform will manage.</p><img src=\"https://www.datocms-assets.com/2885/1617837500-tfdatasource1.png\" /><p>In addition to resources, Terraform providers can also define data sources. Terraform uses data sources to fetch information from cloud provider APIs, such as disk image IDs, or information about the rest of your infrastructure through the outputs of other Terraform configurations. Data sources represent data that Terraform queries from the same cloud provider APIs that it uses to provision resources.</p>\n<p>You can make your Terraform projects more flexible by using data sources to query your cloud provider for information.</p><img src=\"https://www.datocms-assets.com/2885/1617837549-tfdatasource2.png\" /><h2><a href=\"#get-hands-on-with-data-sources\">»</a><a></a>Get Hands-on with Data Sources</h2>\n<p>In this tutorial, you will provision a web application with Terraform, and use data sources to configure it to support multiple AWS regions and availability zones: <strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/data-sources?in=terraform/configuration-language&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Query Data Sources</a></strong></p>\n<p><em>For even more news about our latest tutorials being added to HashiCorp Learn, follow <a href=\"https://twitter.com/hashicorp\">@HashiCorp</a> on Twitter.</em></p>\n<h2><a href=\"#learn-more\">»</a><a></a>Learn More</h2>\n<p>Terraform configurations allow you to manage multiple pieces of infrastructure and iterate over structured data. Get more hands-on experience with <a href=\"https://learn.hashicorp.com/collections/terraform/configuration-language\">Terraform configurations</a> with these additional tutorials on HashiCorp Learn:</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/variables?in=terraform/configuration-language\">Customize Terraform Configuration with Variables\n</a></strong></p>\n<p>Learn how to make your Terraform configuration more flexible with input variables. In this tutorial, you will use input variables to customize infrastructure for a web application with Terraform.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/count?in=terraform/configuration-language\">Manage Similar Resources with Count</a></strong></p>\n<p>Learn how to manage similar Terraform resources using the <code>count</code> argument. In this tutorial, you will use Terraform to provision a VPC, load balancer, and EC2 instances on AWS. Then you will use the <code>count</code> argument to provision multiple EC2 instances per private subnet with a single resource block.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/functions?in=terraform/configuration-language\">Perform Dynamic Operations with Functions</a></strong></p>\n<p>The Terraform configuration language allows you to write declarative expressions to create infrastructure. In this tutorial, you will use several built-in functions to perform operations dynamically and effectively to create an EC2 instance running a pre-built web app.</p>","author":"Robin Norwood","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"20520bc20f6d21c538e7ff534eb190fba13fcf7174429b2dd71aedc352c6a3cf","category":"Tech"}
{"title":"Preact Hooks Internal","link":"https://blog.whs.in.th/node/3465","date":1591460115000,"content":"<p>เดือนที่แล้วนั่งอ่าน Inferno ว่าจะทำ Hook มั้ย</p>\n\n\n\n<p>คืออยากหา framework ที่คิดเหมือนเราว่า Hook มันคือ Magic และมัน implement ได้โดยไม่ต้องใช้ Magic นั่นแหละ</p>\n\n\n\n<p>ก็ยังไม่รู้ว่า Inferno คิดยังไง แต่ก็มีคน<a href=\"https://github.com/infernojs/inferno/issues/1453#issuecomment-592884895\">ลองๆ ทำอยู่</a> ซึ่งเค้าก็ไปลอก Preact มาอีกที ไม่รู้ว่าจะเหมือนกับ React มั้ย แต่คิดว่าอ่านแล้วแล้วเข้าใจง่ายดีเลยเอามา blog ไว้หน่อย</p>\n\n\n\n<h2>useState</h2>\n\n\n\n<p>ซอร์สของ Preact Hook อยู่ที่ <a href=\"https://github.com/preactjs/preact/blob/59c9abaee16dfeb1411f197ef071c94525087bc6/hooks/src/index.js#\">hooks/src/index.js</a> เราจะไล่จากด้านนอกที่เราคุ้นเคยไปก่อนน่าจะง่าย นั่นคือ useState ซึ่งพื้นๆ มาก&#8230;</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">export function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}</code></pre>\n\n\n\n<p>ปรากฏว่า <code>useState</code> คือ wrapper บน <code>useReducer</code> ซึ่งก็ทำให้หายสงสัยว่าทำไม React ต้องมี <code>useReducer</code> API ทั้งที่ๆ คนปกติก็จะไปใช้ Redux อยู่แล้ว</p>\n\n\n\n<p>ส่วน invokeOrReturn คิดว่าถ้าจำได้ว่า reducer เขียนยังไง แล้ว setState function มันรับอะไรน่าจะพอเดาได้ว่ามัน implement ยังไง</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function invokeOrReturn(oldState, f) {\n\treturn typeof f == 'function' ? f(oldState) : f;\n}</code></pre>\n\n\n\n<p>ง่ายๆ ก็คือมันคืนค่าที่เราเรียกนี่แหละ แต่ถ้า <code>setState</code> เรียกด้วย function มันจะได้ state เก่าเป็น argument แล้วเราคืนค่าใหม่มาแทน</p>\n\n\n\n<h2>useReducer</h2>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">export function useReducer(reducer, initialState, init) {\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._component = currentComponent;\n\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst nextValue = hookState._reducer(hookState._value[0], action);\n\t\t\t\tif (hookState._value[0] !== nextValue) {\n\t\t\t\t\thookState._value = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t}\n\n\treturn hookState._value;\n}</code></pre>\n\n\n\n<p>ขอข้าม <code>getHookState</code> ไปก่อนที่จะอธิบายต่อไป</p>\n\n\n\n<p><code>useReducer</code> มี state คือ</p>\n\n\n\n<ul><li>Reducer function ที่เราส่งเข้าไป</li><li>Return value ของมันที่ cache ไว้ ก็คือ <code>[state, dispatch]</code> อยู่ใน <code>__value</code></li><li>Component instance ซึ่งมันเก็บไว้เรียก <code>setState({})</code> เพื่อ invalidate view</li></ul>\n\n\n\n<p>จะเห็นว่ามันใช้ global state อยู่ 2 อันคือ <code>currentComponent</code> และ <code>currentIndex</code> แล้วใครเซตตัวแปรพวกนี้?</p>\n\n\n\n<h2>Actual hooks</h2>\n\n\n\n<p>Preact internal มีส่วนที่เปิดให้ implement functionality เพิ่มเติมได้ซึ่งมันเรียกว่า <em>hook</em> ซึ่งเป็น hook ในความหมายดั้งเดิมคือเราเอา function ไปผูกไว้กับอีกส่วนของ library หรือถ้าใครเขียน Vue มันคือ Hook ในความหมายของ Lifecycle <em>hook </em>นั่นแหละ</p>\n\n\n\n<p>Hook ที่เราสนใจคงเป็น _render hook ซึ่งใน <a href=\"https://github.com/preactjs/preact/blob/59c9abaee16dfeb1411f197ef071c94525087bc6/src/internal.d.ts#L29\">docs</a> มันเขียนว่า &#8220;Attach a hook that is invoked before a vnode has rendered&#8221;</p>\n\n\n\n<p>_render hook ของ hook เขียนว่า</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">options._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\thooks._pendingEffects = [];\n\t}\n};</code></pre>\n\n\n\n<h2>VNode</h2>\n\n\n\n<p>ถ้าใครเขียน Vue จะเห็นว่า Vue expose <a href=\"https://github.com/vuejs/vue/blob/98b4d683f578bb09c4e56f35048e49441c590a41/src/core/vdom/vnode.js\">VNode API</a> ออกมาให้ด้วย แต่ใน React API ไม่มีให้ใช้เพราะถือเป็น internals</p>\n\n\n\n<p>VNode คือ Virtual DOM node นั่นแหละ (Component เราไม่ได้เป็น VNode ตรงๆ แต่จะถูกครอบอีกทีนึง อย่างที่เห็นว่ามันต้อง read <code>vnode._component</code> ออกมาในโค้ดด้านบน)</p>\n\n\n\n<p>ฉะนั้นสิ่งที่มันทำก็คือ ทุกครั้งที่เราอยู่บน node ใหม่ มันจะเซฟ currentComponent เก็บไว้ แล้วรีเซต currentIndex เป็น 0</p>\n\n\n\n<p>นี่คือ Magic ของ Hook คือแทนที่มันจะเก็บ local state แบบ this.xxx เค้ากลับเลือกที่จะยกออกไปเป็น global ภายในตัว framework</p>\n\n\n\n<p>ที่ทำได้เพราะ JavaScript code เป็น single thread (ไม่ต้องกังวลว่ารันโค้ด concurrent แล้วจะมีคนเขียนทับ global) และ Preact rendering ก็เป็น synchronous (ไม่มีแบบว่า render อยู่แล้วสลับไปสลับมา)</p>\n\n\n\n<p>ที่น่าสนใจต่อคือ React fiber กำลังจะทำ asynchronous rendering แล้วมัน implement ตรงนี้ยังไงกันนะ?</p>\n\n\n\n<h2>getHookState</h2>\n\n\n\n<p>เมื่อกี้เราติด getHookState ไว้</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">const hookState = getHookState(currentIndex++, 2);</code></pre>\n\n\n\n<p>โค้ดของ getHookState คือ</p>\n\n\n\n<pre class=\"wp-block-prismatic-blocks\"><code class=\"language-javascript\">function getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\treturn hooks._list[index];\n}</code></pre>\n\n\n\n<p>ส่วนแรกคือ Hook เองเปิดโอกาสให้ใส่ functionality hook เข้าไปได้อีก มันเลยต้องมีตัวแปร currentHook เพื่อบอกให้คนที่เข้ามาต่อรู้ว่ากำลังจะ execute hook ประเภทไหนอยู่ สำหรับค่าต่างๆ มีประกาศไว้ใน <a href=\"https://github.com/preactjs/preact/blob/59c9abaee16dfeb1411f197ef071c94525087bc6/src/internal.d.ts#L3\">type definition</a></p>\n\n\n\n<p>ถัดมามันก็จะอ่าน <code>__hooks</code> บน component ปัจจุบัน หรือสร้างใหม่ ด้านในจะมี array อยู่ซึ่งมันจะอ่านตัวที่ <code>currentIndex</code> ที่ส่งเข้ามา ซึ่งในโค้ด useReducer จะเขียนว่า <code>currentIndex++</code> ก็คืออ่านค่าปัจจุบันแล้วเลื่อน index ไปลำดับถัดไป</p>\n\n\n\n<p>นั่นคืออีก Magic ของ hook ที่ทำให้ function ธรรมดาเรียกสองครั้งแล้วได้ค่าไม่เหมือนเดิม เพราะมันแอบมี global state อยู่นั่นเอง แต่ global state นั้นถูก reset ระหว่าง component ทำให้รู้สึกเหมือนว่ามันเป็น local state</p>\n\n\n\n<p>ถ้าถามผมผมก็ยังคิดว่า local state มันควรจะเป็น attribute บน this แล้วใช้ mixin เพื่อ compose behavior ซึ่ง React เคยมีแต่ถอดไปนานแล้ว เพราะมักจะเจอปัญหาตั้งชื่อชนกัน หรือใช้ 2 อันไม่ได้ ใน Hook ก็เลยไม่ให้ตั้งชื่อแล้วทำเป็น index เลื่อนไปเรื่อยๆ แทน</p>\n\n\n\n<p>และนี่คือที่มาของกฎของ hook ว่าทำไมห้ามใช้ hook ใน if เพราะลำดับจะเลื่อนไม่ตรงกันแล้ว hook state จะผสมกันมั่ว</p>\n\n\n\n<p>ที่น่าสนใจคือ ยังไม่มีตรงไหนบอกว่าทำไม Hook ใช้กับ class component ไม่ได้ ซึ่งถ้าไปอ่าน issue ต้นเรื่อง ทีม Preact บอกว่า</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>You may be wondering why we mix those and the reason is simply to save some bytes. And yes, this allows hooks to be used in class components! We don&#8217;t really advertise that though <img src=\"https://s.w.org/images/core/emoji/13.0.1/72x72/1f44d.png\" alt=\"👍\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /></p></blockquote>\n\n\n\n<p>บน Preact ใช้ Hook บน class component ได้! (แต่ไม่ใช่ public API)</p>\n\n\n\n<h2>สรุป</h2>\n\n\n\n<p>สิ่งที่ Preact Hook ทำคือ</p>\n\n\n\n<ol><li>เมื่อกำลังจะ render vdom node ใหม่ ให้เซต currentComponent และเซต currentIndex=0</li><li>เมื่อเราเรียก hook มันจะไปอ่าน state บางอย่างบน component ปัจจุบัน</li><li>อ่านแล้วมันจะเลื่อน pointer ไปยังช่องถัดไปเพื่อให้ hook ตัวถัดไปได้ state ไม่ตรงกัน</li></ol>\n\n\n\n<h2>Final thoughts</h2>\n\n\n\n<p>หลังอ่านจบก็เริ่มสงสัยว่าคนเขียน React สักกี่คนนะที่เชียร์ Hook แล้วเข้าใจจริงๆ ว่า Hook มัน implement อย่างไร (ให้ project เปล่าๆ ห้ามโหลดของจาก npm เขียน Hook ยังไง?)</p>\n\n\n\n<p>ก็เกือบไปลองออกเป็นข้อสอบ interview ดู แต่คิดดูอีกทีหนึ่งแล้ว คนที่เขียน Hook ได้คือคนที่แม่น JavaScript (ซึ่งเรา require) แต่นั่นยังไม่ใช่ทั้งหมดที่จะเป็น frontend dev ที่ดีได้ (ยังมีเรื่องอื่นๆ อีกเยอะแยะ เช่น CSS, box layout, sematic markup, web optimization, SEO) มันไม่น่าจะเป็นข้อสอบที่ดีเท่าไร</p>\n\n\n\n<p>ในขณะเดียวกัน เอาไปเทส backend dev ก็ไม่ได้เหมือนกันเพราะ React เป็นเรื่องของ Frontend</p>\n\n\n\n<p><strong>แล้วใน software team จะให้ role ไหนเป็นคนสร้าง React?</strong></p>\n\n\n\n<p>มันเป็นโจทย์ที่ยากมากและ require ความรู้ลึกทั้งฝั่ง backend (โดยเฉพาะ VDOM implementation กับ Suspense) และ frontend เลย หรือนั่นคือนิยามจริงๆ ของ Full stack developer กันนะ</p>","author":"whs","siteTitle":"Quietly Verbose","siteHash":"5f972a6fe70a917eb1b1aa165b3cb2be8a9465af33ab38bf05f34c55c0e40587","entryHash":"9c8ab1e35e4235246d7c3a8abcd6501f8769c6c80a8ff0c3b6d91ee488ace6f7","category":"Thai"}
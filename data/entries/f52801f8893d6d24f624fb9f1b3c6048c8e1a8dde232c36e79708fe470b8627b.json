{"title":"Code Jam 2021 รอบคัดเลือก","link":"https://neizod.dev/2021/03/28/code-jam-2021-qualification.html","date":1616874978000,"content":"<p>เขียจอธิบาย แกะโค้ดกันไปเองก่อนละกันนะ (เสียจัยที่ชวด 101 คะแนน)</p>\n\n<h2>Reversort</h2>\n\n<div><div><pre><code><span>#include &lt;iostream&gt;\n</span><span>using</span> <span>namespace</span> <span>std</span><span>;</span>\n\n<span>int</span> <span>xs</span><span>[</span><span>100</span><span>];</span>\n\n<span>int</span> <span>count_reversort</span><span>(</span><span>int</span> <span>n</span><span>)</span> <span>{</span>\n    <span>int</span> <span>count</span> <span>=</span> <span>0</span><span>;</span>\n    <span>for</span> <span>(</span><span>int</span> <span>i</span><span>=</span><span>0</span><span>;</span> <span>i</span><span>&lt;</span><span>n</span><span>-</span><span>1</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>\n        <span>int</span> <span>j</span> <span>=</span> <span>i</span><span>;</span>\n        <span>while</span> <span>(</span><span>i</span><span>+</span><span>1</span> <span>!=</span> <span>xs</span><span>[</span><span>j</span><span>])</span> <span>{</span>\n            <span>j</span> <span>+=</span> <span>1</span><span>;</span>\n        <span>}</span>\n        <span>int</span> <span>size</span> <span>=</span> <span>(</span><span>1</span><span>+</span><span>j</span><span>-</span><span>i</span><span>);</span>\n        <span>count</span> <span>+=</span> <span>size</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> <span>k</span><span>=</span><span>0</span><span>;</span> <span>k</span><span>&lt;</span><span>size</span><span>/</span><span>2</span><span>;</span> <span>k</span><span>++</span><span>)</span> <span>{</span>\n            <span>swap</span><span>(</span><span>xs</span><span>[</span><span>i</span><span>+</span><span>k</span><span>],</span> <span>xs</span><span>[</span><span>j</span><span>-</span><span>k</span><span>]);</span>\n        <span>}</span>\n    <span>}</span>\n    <span>return</span> <span>count</span><span>;</span>\n<span>}</span>\n\n<span>int</span> <span>main</span><span>(</span><span>void</span><span>)</span> <span>{</span>\n    <span>int</span> <span>tests</span><span>;</span>\n    <span>cin</span> <span>&gt;&gt;</span> <span>tests</span><span>;</span>\n    <span>for</span> <span>(</span><span>int</span> <span>t</span><span>=</span><span>0</span><span>;</span> <span>t</span><span>&lt;</span><span>tests</span><span>;</span> <span>t</span><span>++</span><span>)</span> <span>{</span>\n        <span>int</span> <span>n</span><span>;</span>\n        <span>cin</span> <span>&gt;&gt;</span> <span>n</span><span>;</span>\n        <span>for</span> <span>(</span><span>int</span> <span>i</span><span>=</span><span>0</span><span>;</span> <span>i</span><span>&lt;</span><span>n</span><span>;</span> <span>i</span><span>++</span><span>)</span> <span>{</span>\n            <span>cin</span> <span>&gt;&gt;</span> <span>xs</span><span>[</span><span>i</span><span>];</span>\n        <span>}</span>\n        <span>int</span> <span>answer</span> <span>=</span> <span>count_reversort</span><span>(</span><span>n</span><span>);</span>\n        <span>printf</span><span>(</span><span>\"Case #%i: %i</span><span>\\n</span><span>\"</span><span>,</span> <span>t</span><span>+</span><span>1</span><span>,</span> <span>answer</span><span>);</span>\n    <span>}</span>\n    <span>return</span> <span>0</span><span>;</span>\n<span>}</span>\n</code></pre></div></div>\n\n<h2>Moons and Umbrellas</h2>\n\n<div><div><pre><code><span>gets</span><span>.</span><span>to_i</span><span>.</span><span>times</span> <span>do</span> <span>|</span><span>test</span><span>|</span>\n  <span>cj</span><span>,</span> <span>jc</span><span>,</span> <span>pattern</span> <span>=</span> <span>gets</span><span>.</span><span>split</span>\n  <span>ans</span> <span>=</span> <span>0</span>\n  <span>pattern</span><span>.</span><span>delete</span><span>(</span><span>\"?\"</span><span>).</span><span>split</span><span>(</span><span>\"\"</span><span>).</span><span>each_cons</span><span>(</span><span>2</span><span>)</span> <span>do</span> <span>|</span><span>a</span><span>,</span><span>b</span><span>|</span>\n    <span>ans</span> <span>+=</span> <span>cj</span><span>.</span><span>to_i</span> <span>if</span> <span>a</span><span>+</span><span>b</span> <span>==</span> <span>\"CJ\"</span>\n    <span>ans</span> <span>+=</span> <span>jc</span><span>.</span><span>to_i</span> <span>if</span> <span>a</span><span>+</span><span>b</span> <span>==</span> <span>\"JC\"</span>\n  <span>end</span>\n  <span>puts</span> <span>\"Case #</span><span>#{</span><span>test</span><span>+</span><span>1</span><span>}</span><span>: </span><span>#{</span><span>ans</span><span>}</span><span>\"</span>\n<span>end</span>\n</code></pre></div></div>\n\n<h2>Reversort Engineering</h2>\n\n<div><div><pre><code><span>import</span> <span>Text.Printf</span>\n\n<span>triangularNumber</span> <span>n</span> <span>=</span> <span>n</span><span>*</span><span>(</span><span>n</span><span>+</span><span>1</span><span>)</span> <span>`</span><span>div</span><span>`</span> <span>2</span>\n\n<span>findOrder</span> <span>1</span> <span>c</span> <span>=</span> <span>[</span><span>0</span><span>]</span>\n<span>findOrder</span> <span>n</span> <span>c</span> <span>=</span> <span>k</span> <span>:</span> <span>findOrder</span> <span>(</span><span>n</span><span>-</span><span>1</span><span>)</span> <span>(</span><span>c</span><span>-</span><span>k</span><span>)</span>\n    <span>where</span> <span>k</span> <span>=</span> <span>min</span> <span>n</span> <span>(</span><span>c</span><span>-</span><span>(</span><span>n</span><span>-</span><span>2</span><span>))</span>\n\n<span>getSample</span> <span>[]</span>     <span>ys</span> <span>=</span> <span>ys</span>\n<span>getSample</span> <span>(</span><span>x</span><span>:</span><span>xs</span><span>)</span> <span>ys</span> <span>=</span> <span>getSample</span> <span>xs</span> <span>$</span> <span>(</span><span>reverse</span> <span>(</span><span>take</span> <span>x</span> <span>zs</span><span>))</span> <span>++</span> <span>(</span><span>drop</span> <span>x</span> <span>zs</span><span>)</span>\n    <span>where</span> <span>zs</span> <span>=</span> <span>(</span><span>1</span> <span>+</span> <span>length</span> <span>xs</span><span>)</span> <span>:</span> <span>ys</span>\n\n<span>findReversort</span> <span>n</span> <span>c</span> <span>=</span> <span>if</span> <span>c</span> <span>&lt;</span> <span>n</span><span>-</span><span>1</span> <span>||</span> <span>c</span> <span>&gt;</span> <span>(</span><span>triangularNumber</span> <span>n</span><span>)</span><span>-</span><span>1</span>\n    <span>then</span> <span>Nothing</span>\n    <span>else</span> <span>Just</span> <span>$</span> <span>getSample</span> <span>(</span><span>reverse</span> <span>(</span><span>findOrder</span> <span>n</span> <span>c</span><span>))</span> <span>[]</span>\n\n<span>test</span> <span>t</span> <span>=</span> <span>do</span>\n    <span>[</span><span>n</span><span>,</span><span>c</span><span>]</span> <span>&lt;-</span> <span>getInts</span>\n    <span>let</span> <span>answer</span> <span>=</span> <span>case</span> <span>findReversort</span> <span>n</span> <span>c</span> <span>of</span>\n                      <span>Nothing</span> <span>-&gt;</span> <span>\"IMPOSSIBLE\"</span>\n                      <span>Just</span> <span>xs</span> <span>-&gt;</span> <span>unwords</span> <span>(</span><span>map</span> <span>show</span> <span>xs</span><span>)</span>\n    <span>printf</span> <span>\"Case #%d: %s</span><span>\\n</span><span>\"</span> <span>t</span> <span>answer</span>\n\n<span>getInts</span> <span>=</span> <span>do</span>\n    <span>xs</span> <span>&lt;-</span> <span>getLine</span>\n    <span>return</span> <span>[</span><span>read</span> <span>x</span> <span>|</span> <span>x</span> <span>&lt;-</span> <span>words</span> <span>xs</span><span>]</span>\n\n<span>main</span> <span>=</span> <span>do</span>\n    <span>[</span><span>loop</span><span>]</span> <span>&lt;-</span> <span>getInts</span>\n    <span>sequence_</span> <span>[</span><span>test</span> <span>t</span> <span>|</span> <span>t</span> <span>&lt;-</span> <span>[</span><span>1</span><span>..</span><span>loop</span><span>]]</span>\n</code></pre></div></div>\n\n<h2>Median Sort</h2>\n\n<div><div><pre><code><span>def</span> <span>ask</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>,</span> <span>c</span><span>):</span>\n    <span>print</span><span>(</span><span>a</span><span>,</span> <span>b</span><span>,</span> <span>c</span><span>)</span>\n    <span>return</span> <span>int</span><span>(</span><span>input</span><span>())</span>\n\n<span>def</span> <span>answer</span><span>(</span><span>xs</span><span>):</span>\n    <span>print</span><span>(</span><span>*</span><span>xs</span><span>)</span>\n    <span>return</span> <span>int</span><span>(</span><span>input</span><span>())</span> <span>==</span> <span>1</span>\n\n<span>def</span> <span>find_lo_hi</span><span>(</span><span>x</span><span>,</span> <span>left</span><span>=</span><span>None</span><span>,</span> <span>right</span><span>=</span><span>None</span><span>):</span>\n    <span>if</span> <span>left</span> <span>is</span> <span>None</span> <span>or</span> <span>right</span> <span>is</span> <span>None</span><span>:</span>\n        <span>return</span> <span>-</span><span>1</span><span>,</span> <span>x</span><span>-</span><span>1</span>\n    <span>q</span><span>,</span> <span>r</span> <span>=</span> <span>divmod</span><span>(</span><span>right</span><span>-</span><span>left</span><span>,</span> <span>3</span><span>)</span>\n    <span>dl</span><span>,</span> <span>dr</span> <span>=</span> <span>q</span><span>+</span><span>bool</span><span>(</span><span>r</span><span>),</span> <span>q</span>\n    <span>if</span> <span>right</span><span>-</span><span>left</span> <span>==</span> <span>2</span> <span>and</span> <span>right</span> <span>==</span> <span>x</span><span>-</span><span>1</span><span>:</span>\n        <span>dl</span><span>,</span> <span>dr</span> <span>=</span> <span>dr</span><span>,</span> <span>dl</span>\n    <span>return</span> <span>left</span><span>+</span><span>dl</span><span>,</span> <span>right</span><span>-</span><span>dr</span>\n\n<span>def</span> <span>interact_median_sort</span><span>(</span><span>n</span><span>):</span>\n    <span>xs</span> <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span>\n    <span>mid</span> <span>=</span> <span>ask</span><span>(</span><span>*</span><span>xs</span><span>)</span>\n    <span>xs</span><span>.</span><span>remove</span><span>(</span><span>mid</span><span>)</span>\n    <span>xs</span><span>[</span><span>1</span><span>:</span><span>1</span><span>]</span> <span>=</span> <span>[</span><span>mid</span><span>]</span>\n    <span>for</span> <span>x</span> <span>in</span> <span>range</span><span>(</span><span>4</span><span>,</span> <span>n</span><span>+</span><span>1</span><span>):</span>\n        <span>left</span><span>,</span> <span>right</span> <span>=</span> <span>find_lo_hi</span><span>(</span><span>x</span><span>)</span>\n        <span>while</span> <span>right</span><span>-</span><span>left</span> <span>&gt;</span> <span>1</span><span>:</span>\n            <span>lo</span><span>,</span> <span>hi</span> <span>=</span> <span>find_lo_hi</span><span>(</span><span>x</span><span>,</span> <span>left</span><span>,</span> <span>right</span><span>)</span>\n            <span>mid</span> <span>=</span> <span>ask</span><span>(</span><span>xs</span><span>[</span><span>lo</span><span>],</span> <span>xs</span><span>[</span><span>hi</span><span>],</span> <span>x</span><span>)</span>\n            <span>if</span> <span>mid</span> <span>==</span> <span>xs</span><span>[</span><span>lo</span><span>]:</span>\n                <span>right</span> <span>=</span> <span>lo</span>\n            <span>elif</span> <span>mid</span> <span>==</span> <span>xs</span><span>[</span><span>hi</span><span>]:</span>\n                <span>left</span> <span>=</span> <span>hi</span>\n            <span>else</span><span>:</span>\n                <span>left</span> <span>=</span> <span>lo</span>\n                <span>right</span> <span>=</span> <span>hi</span>\n        <span>xs</span><span>[</span><span>right</span><span>:</span><span>right</span><span>]</span> <span>=</span> <span>[</span><span>x</span><span>]</span>\n    <span>return</span> <span>answer</span><span>(</span><span>xs</span><span>)</span>\n\n<span>if</span> <span>__name__</span> <span>==</span> <span>'__main__'</span><span>:</span>\n    <span>cases</span><span>,</span> <span>n</span><span>,</span> <span>_</span> <span>=</span> <span>[</span><span>int</span><span>(</span><span>x</span><span>)</span> <span>for</span> <span>x</span> <span>in</span> <span>input</span><span>().</span><span>split</span><span>()]</span>\n    <span>for</span> <span>case</span> <span>in</span> <span>range</span><span>(</span><span>cases</span><span>):</span>\n        <span>interact_median_sort</span><span>(</span><span>n</span><span>)</span>\n</code></pre></div></div>\n\n<h2>Cheating Detection</h2>\n\n<div><div><pre><code><span>neighbor_median</span><span> </span><span>&lt;-</span><span> </span><span>function</span><span>(</span><span>xs</span><span>,</span><span> </span><span>n</span><span>=</span><span>5</span><span>)</span><span> </span><span>{</span><span>\n    </span><span>padxs</span><span> </span><span>&lt;-</span><span> </span><span>c</span><span>(</span><span>tail</span><span>(</span><span>xs</span><span>,</span><span> </span><span>n</span><span>%/%</span><span>2</span><span>),</span><span> </span><span>xs</span><span>,</span><span> </span><span>head</span><span>(</span><span>xs</span><span>,</span><span> </span><span>(</span><span>n</span><span>-1</span><span>)</span><span>%/%</span><span>2</span><span>))</span><span>\n    </span><span>apply</span><span>(</span><span>embed</span><span>(</span><span>padxs</span><span>,</span><span> </span><span>n</span><span>),</span><span> </span><span>1</span><span>,</span><span> </span><span>median</span><span>)</span><span>\n</span><span>}</span><span>\n\n</span><span>partition_sd</span><span> </span><span>&lt;-</span><span> </span><span>function</span><span>(</span><span>xs</span><span>,</span><span> </span><span>ngroup</span><span>=</span><span>10</span><span>)</span><span> </span><span>{</span><span>\n    </span><span>apply</span><span>(</span><span>xs</span><span>,</span><span> </span><span>2</span><span>,</span><span> </span><span>function</span><span>(</span><span>score</span><span>)</span><span> </span><span>sd</span><span>(</span><span>colSums</span><span>(</span><span>matrix</span><span>(</span><span>score</span><span>,</span><span> </span><span>ncol</span><span>=</span><span>ngroup</span><span>))))</span><span>\n</span><span>}</span><span>\n\n</span><span>find_cheater</span><span> </span><span>&lt;-</span><span> </span><span>function</span><span>(</span><span>scores</span><span>)</span><span> </span><span>{</span><span>\n    </span><span>colnames</span><span>(</span><span>scores</span><span>)</span><span> </span><span>&lt;-</span><span> </span><span>1</span><span>:</span><span>100</span><span>\n    </span><span>scores</span><span> </span><span>&lt;-</span><span> </span><span>scores</span><span>[</span><span>order</span><span>(</span><span>rowSums</span><span>(</span><span>scores</span><span>)),</span><span>order</span><span>(</span><span>colSums</span><span>(</span><span>scores</span><span>))]</span><span>\n    </span><span>sd_scores</span><span> </span><span>&lt;-</span><span> </span><span>partition_sd</span><span>(</span><span>scores</span><span>)</span><span>\n    </span><span>md_scores</span><span> </span><span>&lt;-</span><span> </span><span>neighbor_median</span><span>(</span><span>sd_scores</span><span>)</span><span>\n    </span><span>suspect</span><span> </span><span>&lt;-</span><span> </span><span>abs</span><span>(</span><span>sd_scores</span><span> </span><span>-</span><span> </span><span>md_scores</span><span>)</span><span>\n    </span><span>colnames</span><span>(</span><span>scores</span><span>)[</span><span>which</span><span>(</span><span>suspect</span><span> </span><span>==</span><span> </span><span>max</span><span>(</span><span>suspect</span><span>))]</span><span>\n</span><span>}</span><span>\n\n</span><span>if</span><span> </span><span>(</span><span>!</span><span>interactive</span><span>())</span><span> </span><span>{</span><span>\n    </span><span>f</span><span> </span><span>&lt;-</span><span> </span><span>file</span><span>(</span><span>\"stdin\"</span><span>,</span><span> </span><span>\"r\"</span><span>)</span><span>\n    </span><span>cases</span><span> </span><span>&lt;-</span><span> </span><span>as.integer</span><span>(</span><span>readLines</span><span>(</span><span>f</span><span>,</span><span> </span><span>n</span><span>=</span><span>1</span><span>))</span><span>\n    </span><span>percent</span><span> </span><span>&lt;-</span><span> </span><span>as.integer</span><span>(</span><span>readLines</span><span>(</span><span>f</span><span>,</span><span> </span><span>n</span><span>=</span><span>1</span><span>))</span><span>\n    </span><span>for</span><span> </span><span>(</span><span>case</span><span> </span><span>in</span><span> </span><span>1</span><span>:</span><span>cases</span><span>)</span><span> </span><span>{</span><span>\n        </span><span>raw</span><span> </span><span>&lt;-</span><span> </span><span>readLines</span><span>(</span><span>f</span><span>,</span><span> </span><span>n</span><span>=</span><span>100</span><span>)</span><span>\n        </span><span>input</span><span> </span><span>&lt;-</span><span> </span><span>na.omit</span><span>(</span><span>as.integer</span><span>(</span><span>unlist</span><span>(</span><span>strsplit</span><span>(</span><span>raw</span><span>,</span><span> </span><span>\"\"</span><span>))))</span><span>\n        </span><span>answer</span><span> </span><span>&lt;-</span><span> </span><span>find_cheater</span><span>(</span><span>matrix</span><span>(</span><span>input</span><span>,</span><span> </span><span>ncol</span><span>=</span><span>100</span><span>))</span><span>\n        </span><span>cat</span><span>(</span><span>paste0</span><span>(</span><span>\"Case #\"</span><span>,</span><span> </span><span>case</span><span>,</span><span> </span><span>\": \"</span><span>,</span><span> </span><span>answer</span><span>,</span><span> </span><span>\"\\n\"</span><span>))</span><span>\n    </span><span>}</span><span>\n</span><span>}</span><span>\n</span></code></pre></div></div>","author":"","siteTitle":"neizod's speculation","siteHash":"939338c5557b1743f2c128736c6006e145dcabc81da9970f1c0dc8ae2feb0830","entryHash":"f52801f8893d6d24f624fb9f1b3c6048c8e1a8dde232c36e79708fe470b8627b","category":"Thai"}
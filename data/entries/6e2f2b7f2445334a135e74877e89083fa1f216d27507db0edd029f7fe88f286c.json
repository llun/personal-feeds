{"title":"New Terraform Tutorials on HashiCorp Learn","link":"https://www.hashicorp.com/blog/new-terraform-tutorials-on-hashicorp-learn","date":1622649600000,"content":"<p>There are a number of new tutorials for HashiCorp Terraform on the HashiCorp Learn platform this month. The topics include hosting a static website, detecting and fixing infrastructure drift, and publishing custom providers. Learn more about them below:</p>\n<h2><a href=\"#use-cases\">»</a><a></a>Use Cases</h2>\n<p>Automate your work, whether it’s for a hobby or your day job.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/cloudflare-static-website?utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Host a Static Website with S3 and Cloudflare</a></strong></p>\n<p>Use Terraform to set up a static website using AWS S3 as an object store and Cloudflare for DNS, SSL, and CDN. Create Cloudflare page rules to always redirect to HTTPS and temporarily redirect certain paths. The tutorial also gives you the option to use ACM for SSL certificate management and Cloudfront for CDN.</p><img src=\"https://www.datocms-assets.com/2885/1622581808-tflearncloudflare.png\" /><p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/aws-rds?in=terraform/aws&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Manage AWS RDS Instances</a></strong></p>\n<p>Use Terraform and the AWS provider to provision and manage RDS instances, subnet and parameter groups, and configure an RDS read replica.</p>\n<h2><a href=\"#build-your-terraform-skills\">»</a><a></a>Build Your Terraform Skills</h2>\n<p>Become an expert on Terraform by practicing the details of resource and state management.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/data-sources?in=terraform/configuration-language&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Query Data Sources</a></strong></p>\n<p>Learn how to query remote data sources with Terraform in this new tutorial on HashiCorp Learn. In this tutorial, you will provision a web application with Terraform and use data sources to configure it to support multiple AWS regions and availability zones.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/resource-drift?in=terraform/state&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Manage Resource Drift</a></strong></p>\n<p>Manually change an AWS instance managed by Terraform to create drift in your Terraform state file. Reconcile your state drift and import your resources while avoiding downtime.</p><img src=\"https://www.datocms-assets.com/2885/1622581849-tfdrift.png\" /><p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/resource-lifecycle?in=terraform/state&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Manage Resource Lifecycle</a></strong></p>\n<p>Update the configuration for an AWS instance and security group with lifecycle management blocks to prevent resource deletion, create resources before destroying them, and ignore changes to specific resource attributes.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/tfc-state-api?utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Version Remote State with the Terraform Cloud API</a></strong></p>\n<p>Deploy an EC2 instance to a Terraform Cloud workspace and use the Terraform API to interact with and update state. Learn to interact with the Terraform Cloud API to download, version, package, and upload your state file to Terraform Cloud.</p>\n<h2><a href=\"#customize-providers\">»</a><a></a>Customize Providers</h2>\n<p>Extend Terraform by writing and sharing custom providers.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/provider-import?in=terraform/providers&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Add Import Capabilities to Your Custom Provider</a></strong></p>\n<p>Add import capability to a provider for a fictional coffee-shop application, HashiCups. This allows you to retrieve an existing resource and bring it into Terraform state, allowing Terraform to manage it. Implementing import capabilities is especially useful if you’re thinking about managing resources in brownfield environments with your custom Terraform provider.</p>\n<p><strong><a href=\"https://learn.hashicorp.com/tutorials/terraform/provider-release-publish?in=terraform/providers&amp;utm_source=WEBSITE&amp;utm_medium=WEB_BLOG&amp;utm_offer=ARTICLE_PAGE\">Release and Publish a Provider to the Terraform Registry</a></strong></p>\n<p>Create a release for your custom Terraform provider using GoReleaser and GitHub Actions. Add a GPG key to the Terraform Registry to prepare for provider publishing.</p>\n<p>Explore these tutorials and more on <a href=\"https://learn.hashicorp.com/terraform\">HashiCorp Learn</a>.</p>\n<p><em>For even more news about our latest tutorials being added to HashiCorp Learn, follow @HashiCorp on Twitter.</em></p>","author":"Judith Malnick","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"6e2f2b7f2445334a135e74877e89083fa1f216d27507db0edd029f7fe88f286c","category":"Tech"}
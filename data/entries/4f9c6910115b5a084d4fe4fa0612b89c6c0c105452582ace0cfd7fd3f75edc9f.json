{"title":"Announcing CDK for Terraform 0.4","link":"https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-4","date":1622138400000,"content":"<p>We are excited to announce the release of Cloud Development Kit (CDK) for Terraform 0.4. <a href=\"https://github.com/hashicorp/terraform-cdk\">CDK for Terraform</a> provides the ability to write Terraform configurations in C#, Python, TypeScript, and Java, using all existing Terraform providers and Terraform modules. CDK for Terraform 0.4 adds experimental Go support. You can download the new release by following the <a href=\"https://github.com/hashicorp/terraform-cdk/tree/main/docs/getting-started\">getting started guide</a> in the programming language of your choice.</p>\n<p>Key improvements in 0.4 include:</p>\n<ul>\n<li><strong>Go language support</strong>: Use experimental support for the Go language to create Terraform configurations.</li>\n<li><strong>Asset construct</strong>: Simplify workflows that require assets to be deployed, such as deploying serverless functions.</li>\n<li><strong>Improved Terraform Cloud integration</strong>: Output from <a href=\"https://terraform.io/cloud\">Terraform Cloud</a> is streamed rather than displayed at the end of the run.</li>\n</ul>\n<h3><a href=\"#go-support\">»</a><a></a>Go Support</h3>\n<p>Support for the Go language has been one of the top requests from users. The <a href=\"https://github.com/aws/jsii\">jsii library</a>, which we use to generate language bindings between TypeScript and each of the supported languages, recently added experimental Go support. Building on this, we’re excited to announce experimental Go support in CDK for Terraform: you can now define infrastructure with Terraform providers using Go!</p><pre><code>package main\n\nimport (\n\t\"github.com/hashicorp/terraform-cdk/examples/go/aws/generated/aws_eks_module\"\n\t\"github.com/hashicorp/terraform-cdk/examples/go/aws/generated/hashicorp/aws\"\n\n\t\"github.com/aws/constructs-go/constructs/v3\"\n\t\"github.com/aws/jsii-runtime-go\"\n\t\"github.com/hashicorp/terraform-cdk-go/cdktf\"\n)\n\nfunc NewExampleCdktfGoAwsStack(scope constructs.Construct, id string) cdktf.TerraformStack {\n\tstack := cdktf.NewTerraformStack(scope, &amp;id)\n\n\taws.NewAwsProvider(stack, jsii.String(\"aws\"), &amp;aws.AwsProviderConfig{\n\t\tRegion: jsii.String(\"us-east-1\"),\n\t})\n\n\taws.NewInstance(stack, jsii.String(\"Hello\"), &amp;aws.InstanceConfig{\n\t\tAmi:          jsii.String(\"ami-2757f631\"),\n\t\tInstanceType: jsii.String(\"t2.micro\"),\n\t\tTags: &amp;map[string]*string{\n\t\t\t\"environment\": jsii.String(\"development\"),\n\t\t},\n\t})\n\n\taws_eks_module.NewAwsEksModule(stack, jsii.String(\"EKS\"), &amp;aws_eks_module.AwsEksModuleOptions{\n\t\tClusterName:    jsii.String(\"my-eks\"),\n\t\tSubnets:        jsii.Strings(\"a\", \"b\"),\n\t\tVpcId:          jsii.String(\"id\"),\n\t\tClusterVersion: jsii.String(\"1.17\"),\n\t})\n\n\treturn stack\n}\n\nfunc main() {\n\tapp := cdktf.NewApp(nil)\n\n\tNewExampleCdktfGoAwsStack(app, \"ExampleCdktfGoAwsStack\")\n\n\tapp.Synth()\n}\n\n</code></pre><p>To try out writing infrastructure as code in Go, try our <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/getting-started/go.md\">Go Getting Started guide</a>. Note that this feature is still considered experimental, therefore it should not be used in production, and you may see changes to Go syntax. Please share your experiences with us by posting to the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47\">CDK for Terraform Discuss forum</a>.</p>\n<h3><a href=\"#asset-construct\">»</a><a></a>Asset Construct</h3>\n<p>Deploying files or folders is a common part of many workflows, such as provisioning serverless applications. The new <code>asset</code> construct makes it easy to reference files and folders that need to be deployed alongside newly provisioned resources.</p>\n<p>Here is a TypeScript example:</p><pre><code>import * as path from \"path\";\nimport { Construct } from \"constructs\";\nimport { App, TerraformStack, TerraformAsset, AssetType } from \"cdktf\";\nimport { AwsProvider } from \"./.gen/providers/aws/aws-provider\";\nimport { S3BucketObject } from \"./.gen/providers/aws/s3-bucket-object\";\nimport { S3Bucket } from \"./.gen/providers/aws/s3-bucket\";\n\n\nclass MyStack extends TerraformStack {\n  constructor(scope: Construct, name: string) {\n    super(scope, name);\n\n    new AwsProvider(this, \"provider\", {\n      region: \"us-west-2\",\n    });\n\n    const bucket = new S3Bucket(this, \"bucket\", {\n      bucket: \"demo\",\n    });\n\n    const asset = new TerraformAsset(this, \"lambda-asset\", {\n      path: path.resolve(__dirname, \"../lambda\"),\n      type: AssetType.ARCHIVE, // if left empty it infers directory and file\n    });\n\n    new S3BucketObject(this, \"lambda-archive\", {\n      bucket: bucket.bucket,\n      key: asset.fileName,\n      source: asset.path,\n    });\n  }\n}\n\n\nconst app = new App();\nnew MyStack(app, \"demo\");\napp.synth();\n</code></pre><p>The CDK for Terraform project and team have grown significantly since its <a href=\"https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-1\">0.1 launch in January</a>. <a href=\"https://twitter.com/amrtns\">Ansgar Mertens</a> and <a href=\"https://twitter.com/dschmidt1992\">Daniel Schmidt</a> have recently joined the team, and with more people on board we’ve been able to expand the feature set:</p>\n<ul>\n<li><strong><a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/using-providers-and-modules.md\">Full Terraform module support</a></strong> allows HCL Terraform modules to be sourced from all the same sources as Terraform Core.</li>\n<li><strong><a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/using-providers-and-modules.md\">Multiple stacks</a></strong> were added in CDK for Terraform 0.3. Applications can be logically divided into stacks that represent:\n<ul>\n<li>Tiers: such as application and persistence</li>\n<li>Stages: such as development and production, and</li>\n<li>Regions</li>\n</ul>\n</li>\n</ul>\n<p>Each stack can be destroyed separately, and state is stored independently.</p>\n<ul>\n<li>\n<p><strong><a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/remote-templates.md\">Remote templates</a></strong> were added in 0.3 to allow rapid creation of new projects without writing boilerplate code.</p>\n</li>\n<li>\n<p><strong><a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/docs/working-with-cdk-for-terraform/using-providers-and-modules.md#prebuilt-providers\">Language-specific bindings</a></strong> are now published in language-native package repositories, such as <a href=\"https://search.maven.org/\">Maven Central</a>, <a href=\"https://www.npmjs.com/\">NPM</a>, <a href=\"https://pypi.org/\">PyPi</a>, and <a href=\"https://www.nuget.org/\">Nuget</a>.</p>\n</li>\n</ul>\n<p>The <a href=\"https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md\">CDK for Terraform changelog</a> contains a comprehensive list of enhancements and bug fixes.</p>\n<h3><a href=\"#try-cdk-for-terraform\">»</a><a></a>Try CDK for Terraform</h3>\n<p>Whether you’re experimenting or actively using CDK for Terraform, we’d love to hear from you directly. Bring your questions to <a href=\"https://www.hashicorp.com/community/office-hours\">Terraform Community Office Hours</a> on June 3rd, drop notes in the <a href=\"https://discuss.hashicorp.com/c/terraform-core/cdk-for-terraform/47\">discussion forum</a>, and report any issues you encounter in our <a href=\"https://github.com/hashicorp/terraform-cdk/issues/new/choose\">issue tracker</a>. We’re particularly looking for feedback on the new, experimental Go support, so please reach out!</p>\n<p>We have language-specific guides and documentation in our <a href=\"https://github.com/hashicorp/terraform-cdk\">GitHub repository</a>, but if you’re new to the project, the <a href=\"https://learn.hashicorp.com/tutorials/terraform/cdktf\">CDK for Terraform Learn Guide</a> is the best way to get started.</p>","author":"Daniel Dreier","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"4f9c6910115b5a084d4fe4fa0612b89c6c0c105452582ace0cfd7fd3f75edc9f","category":"Tech"}
{"title":"มาดูการปรับปรุง code ของระบบ Airtable","link":"https://www.somkiat.cc/improve-code-quality-at-airtable/","date":1620983323000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/airtable-150x150.png\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/airtable-1024x576.png\" /></figure>\n\n\n\n<p>อ่านเจอบทความเรื่อง <strong><a href=\"https://medium.com/airtable-eng/the-continual-evolution-of-airtables-codebase-migrating-a-million-lines-of-code-to-typescript-612c008baf5c\" target=\"_blank\">The continual evolution of Airtable’s codebase: Migrating a million lines of code to TypeScript</a></strong><br />ทำการอธิบายว่าที่ <a href=\"https://airtable.com/\" target=\"_blank\">Airtable</a> ทำการปรับปรุง code กันอย่างไรบ้าง ?<br />กับ code ที่มีกว่า 1 ล้านบรรทัด<br />จาก Vanilla JavaScript ไปยัง TypeScript<br />ตั้งแต่เริ่มจนถึงปัจจุบัน และในอนาคต</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>โดย history ของการพัฒนาเป็นดังนี้</strong></p>\n\n\n\n<ul><li>เริ่มจาก Vanilla JavaScript</li><li>นำ <a href=\"http://browserify.org/\" target=\"_blank\">Browserify</a> มาใช้งาน ซึ่งทำการ import CommonJS มาใช้งาน</li><li>ทำการแปลงรูปแบบของการเขียน class จาก Backbone style มาเป็น ES6 style</li><li>ทำการ custom เป็น component เพื่อ convert ไปยัง ReactJS component</li><li>แน่นอนว่าเลือก <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> ซึ่งทำงานกับ ReactJS ได้ดี เข้าสู่ยุคของ Static type</li><li>ต่อมาทีมคิดว่า Flow ไม่ตอบโจทย์แล้ว ทั้งในแง่ของ productivity, community และ tool ต่าง ๆ</li><li>ทำการแปลงจาก Flow มายัง TypeScript</li></ul>\n\n\n\n<p><strong>แนวทางของ Airtable สำหรับทุก ๆ การเปลี่ยนแปลง</strong></p>\n\n\n\n<p>ประกอบไปด้วย</p>\n\n\n\n<ul><li>ต้องไม่ส่งผลกระทบต่อ product และผู้ใช้งานในเชิงลบ</li><li>ในการเปลี่ยนต้องไม่ลด type safty ลง จะเห็นได้จากการเปลี่ยนจาก Flow มายัง TypeScript</li><li>พยายามทำให้มันง่ายที่สุด เนื่องจากการเปลี่ยนแปลงมีจำนวนมาก ดังนั้นต้องค่อย ๆ เปลี่ยนแปลงและปรับปรุงไปทีละส่วนเล็ก ๆ (Incremental) เช่น type-by-tpye หรือ file-by-file เป็นต้น</li></ul>\n\n\n\n<p>แต่ถ้าทำการเปลี่ยนแปลงเยอะ ๆ <br />จะสร้างเครื่องมือในการ migrate เป็น TypeScript ขึ้นมา<br />เพื่อช่วยจัดการเรื่องที่ซ้ำ ๆ หรือมี patternคือ <br /><strong><a href=\"https://github.com/Airtable/typescript-migration-codemod\" target=\"_blank\">GitHub :: Airtable’s TypeScript Migration Codemod</a></strong></p>\n\n\n\n<p><strong>ในการเปลี่ยนแปลง จะทำการสร้าง branch แยกออกไปทำ</strong></p>\n\n\n\n<p>จากนั้นทำการตรวจสอบเรื่อง type checking<br />รวมทั้งมี automated test เพื่อทำให้มั่นใจว่ายังคงทำงานตามที่คาดหวัง<br />เมื่อทุกอย่างผ่านเรียบร้อยจึงทำการ merge มายัง main branch <br />เพื่อทำการ deploy ต่อไป</p>\n\n\n\n<p><strong>ในการทำงานก็มีเรื่องราวและแนวคิดมากมาย ที่น่าสนใจ</strong></p>\n\n\n\n<p>ทั้งการแปลงจาก createReactClass component มาเป็น ES6 class component</p>\n\n\n\n<p>ในส่วนของ Automation team ทำการสร้าง helper method<br />สำหรับการ generate TypeScript type ออกมา <br />เพื่อใช้ในการกำหนดและ validate schema</p>\n\n\n\n<p>ในส่วนของ Enterprise team ทำการเปลี่ยนจาก ts file มาเป็น tsx file ให้หมด<br />เพราะว่า จะได้ใช้เพียงแนวทางเดียวไปเลย</p>\n\n\n\n<p><strong>จะเห็นได้ว่าที่ Airtable จะค่อย ๆ ทำการเปลี่ยนแปลง</strong></p>\n\n\n\n<p>พร้อมกับสร้างเครื่องมือมาลดงานที่ซ้ำ ๆ<br />ช่วยทำงานให้ทำงานได้เร็วขึ้น<br />พร้อมทั้งยังต้องมี automated test เพื่อช่วยตรวจสอบความถูกต้องด้วยเสมอ<br />รวมทั้งยังชี้ให้เห็นข้อดีของ static type ด้วยว่า<br />ถ้า code มีขนาดใหญ่แล้ว เรื่อง type จะสำคัญมาก ๆ<br />เพื่อลดความเสี่ยงและความผิดพลาดได้มากขึ้น<br />และเน้นที่เรื่องของ code quality และ การพัฒนาอย่างต่อเนื่อง</p>\n\n\n\n<p><strong><em>ปล. ในปัจจุบัน Airtable ก็ยังมี code เก่า ๆ อยู่เช่นกันยังย้ายไปไม่หมด</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"cdf609b3a09330e889a5c39fc516718d68968beb9d673b21e88b9dce5a3cdf8c","category":"Thai"}
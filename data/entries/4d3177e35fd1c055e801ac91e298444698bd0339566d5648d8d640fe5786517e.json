{"title":"ว่าด้วยเรื่องของ Widget testing ใน Flutter","link":"https://www.somkiat.cc/widget-testing-in-flutter/","date":1620722342000,"content":"<p><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing-150x150.jpg\" /></p>\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/flutter-testing.jpg\" /></figure>\n\n\n\n<p>สำหรับระบบงานที่พัฒนาด้วย Flutter นั้น<br />เมื่อทำการสร้าง project ใหม่ขึ้นมา<br />จะพบว่าจะมี <strong>folder test</strong> มาให้ด้วยเสมอ<br />พร้อม test case เริ่มต้นมาให้<br /><br />แต่จากที่เห็นหลาย ๆ project ก็จะไม่มี test case อะไรเพิ่มขึ้นเลย<br />หนักกว่านั้นทำการลบทิ้งไปอีก !! <br />ทำไมนะ ?<br />ทดสอบระบบงานกันแบบไหนนะ ?</p>\n\n\n\n<span></span>\n\n\n\n<p><strong>ใน Flutter นั้นจะเตรียมเอกสารในการทดสอบไว้ให้แล้ว</strong></p>\n\n\n\n<p>อยู่ที่ <strong><a href=\"https://flutter.dev/docs/testing\" target=\"_blank\">Flutter Testing</a></strong> มีใครอ่านและทำบ้างยกมือขึ้น !!!<br />ประกอบไปด้วย</p>\n\n\n\n<ul><li>Unit testing</li><li>Widget testing</li><li>Integration testing</li></ul>\n\n\n\n<p>รวมไปถึง Continuous Integration กันเลยทีเดียว ครบถ้วนมาก ๆ</p>\n\n\n\n<figure><img src=\"https://www.somkiat.cc/wp-content/uploads/2021/05/Screen-Shot-2564-05-11-at-14.37.14.png\" /></figure>\n\n\n\n<p><strong>แต่จากที่พัฒนาระบบงานมาพบว่า Widget testing นั้นมีประโยชน์มากพอสมควร</strong></p>\n\n\n\n<p>ไม่ช้าจนเกินไป<br />สร้างความเชื่อมั่นในระดับที่ดี<br />เขียนไม่ยากเท่าไร<br />อีกอย่างในการออกแบบจะแยกเป็น component หรือ widget เล็ก ๆ อยู่แล้ว<br />เลยพยายามจะทดสอบในส่วนของ Widget ไปเลยว่า<br />ในแต่ละ widget ทำงานถูกต้องตามที่เราต้องการหรือไม่<br />เพราะเชื่อว่า ถ้าแต่ละ widget ทำงานได้อย่างถูกต้อง<br />เมื่อมารวมกันน่าจะทำงานได้ถูกเช่นกัน<br />หรือถ้าไม่ถูกต้อง น่าจะมีปัญหาเรื่องการรวมกันแล้ว<br />ช่วยให้เราหาและแก้ไขปัญหาได้ง่ายขึ้น</p>\n\n\n\n<p><strong>สิ่งที่ทำได้ใน Widget testing ประกอบไปด้วย</strong></p>\n\n\n\n<ul><li>การทดสอบในแต่ละ widget แยกกันไปเลย</li><li>ตรวจสอบการแสดงผล</li><li>สามารถ interact กับ widget ได้ เช่น tab, drag และ กรอกข้อมูล</li></ul>\n\n\n\n<p>โดยการทำงานต่าง ๆ ด้วย class <strong><a href=\"https://api.flutter.dev/flutter/flutter_test/WidgetTester-class.html\" target=\"_blank\">WidgetTester</a></strong> ที่ทาง Flutter เตรียมไว้ให้แล้ว</p>\n\n\n\n<p><strong>ตัวอย่างของ Test ที่เตรียมไว้ให้เมื่อสร้าง project ใหม่</strong></p>\n\n\n\n[gist id=\"0c54da80f30a01d467a006678f7d2dff\" file=\"widget_test.dart\"]\n\n\n\n<p><strong>คำอธิบาย</strong></p>\n\n\n\n<ul><li>จะสร้าง test case ผ่าน method testWidgets()</li><li>ในแต่ละ test case จะม่การ inject WidgetTester มาให้เสมอ</li><li>การทำงานจะเป็นแบบ asynchronous ดังนั้นรูปแบบการเขียนจึงเป็น async-await</li><li>WidgetTester จะทำการจำลอง environment ของ flutter ขึ้นมา โดยไม่ใช้งาน device จริง ๆ</li><li>ปัญหาของการจำลองคือ เรื่องของ state จะพบว่าไปเปลี่ยน ดังนั้นในการทดสอบต้องใช้ method pump() เข้ามา เพื่อให้ widget ทำการ render ตามค่าที่เปลี่ยนแปลงไปนั่นเอง</li><li>การทดสอบจะมี 3 ขั้นตอนคือ หา และสร้าง widget ที่ต้องการทดสอบ ต่อมาทำการ interact กับ UI นั้น ๆ สุดท้ายก็ตรวจสอบผลการทำงาน ว่าเป็นไปตามที่คาดหวังหรือไม่</li></ul>\n\n\n\n<p><strong>ทำการ run test ง่าย ๆ ด้วยคำสั่ง testและมี coverage ให้ด้วย</strong></p>\n\n\n\n[gist id=\"0c54da80f30a01d467a006678f7d2dff\" file=\"1.txt\"]\n\n\n\n<p><strong>โดยในแต่ละ test case นั้น เราสามารถควบคุมได้เหมือนปกติ</strong></p>\n\n\n\n<p>ยกตัวอย่างเช่น</p>\n\n\n\n<ul><li>Skip test</li><li>Timeout ของการ test</li><li>ใส่ tag เพื่อแยกกลุ่มของ test ได้ ทั้งระดับไฟล์และ test case</li></ul>\n\n\n\n[gist id=\"0c54da80f30a01d467a006678f7d2dff\" file=\"widget_test2.dart\"]\n\n\n\n<p><strong>ส่วน Life cycle ของ test นั้นก็เหมือนกับ test framework ทั่วไปคือ</strong></p>\n\n\n\n<ul><li>setupAll() ทำเพียงครั้งเดียว ก่อนที่จะเริ่มทดสอบ</li><li>tearDownAll() ทำเพียงครั้งเดียวเมื่อทดสอบทุก ๆ test case แล้ว</li><li>setup() ทำก่อนที่จะทดสอบแต่ละ test case</li><li>tearDown() ทำหลังจากที่แต่ละ test case ถูกทดสอบแล้ว</li></ul>\n\n\n\n[gist id=\"0c54da80f30a01d467a006678f7d2dff\" file=\"widget_lifecycle_test.dart\"]\n\n\n\n<p><strong>สิ่งที่ต้องเจอแน่ ๆ คือ การจัดการ dependency </strong></p>\n\n\n\n<p>ที่แต่ละ widget ใช้งาน<br />นั่นสามารถจัดการด้วย <strong><a href=\"https://pub.dev/packages/mockito\" target=\"_blank\">Mockito</a></strong> <br />หรืออาจจะสร้างจำลองขึ้นมาก็ได้ เช่นพวก Mock server หรือใช้ <strong><a href=\"https://pub.dev/packages/nock\" target=\"_blank\">Nock</a></strong> เป็นต้น<br /></p>\n\n\n\n<p><strong><em>ในการพัฒนาระบบงาน จะขาดการทดสอบไปได้อย่างไร ?<br />ขอให้สนุกกับการ coding ครับ</em></strong></p>\n","author":"somkiat","siteTitle":"cc :: somkiat","siteHash":"3a23a5a4389e1e40c6fbb16520a8cc20df5b3591c25145ce72aaa18b19e48201","entryHash":"4d3177e35fd1c055e801ac91e298444698bd0339566d5648d8d640fe5786517e","category":"Thai"}
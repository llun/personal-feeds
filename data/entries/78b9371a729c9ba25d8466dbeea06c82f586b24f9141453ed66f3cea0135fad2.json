{"title":"Getting The Most Out Of Git","link":"https://smashingmagazine.com/2021/02/getting-the-most-out-of-git/","date":1612872000000,"content":"<p>Not a single project today will get away without some sort of version control with Git under the hood. Knowing Git <em>well</em> helps you become a better developer, boost your developer‚Äôs workflow and truly improve the quality of your code base. However, that requires going a little bit outside of the comfort zone that we are all familiar with. As it turns out, there is a bit more to Git than just commit, push and pull.</p>\n<p>Some developers stay true to the main principles in Git, and often that‚Äôs absolutely understandable. In the front-end world of ours, there are just so many sophisticated things to understand and get better at, that frankly Git is often not a high priority. As a side effect, many of the valuable techniques that can boost a developer‚Äôs workflow remain <strong>unnoticed and rarely discovered</strong>.</p>\n<p>In this article, we'll explore four advanced Git tools, and hopefully, whet your appetite to learn even more about Git!</p>\n<h3>Recovering Deleted Commits</h3>\n<p>You‚Äôre convinced that you‚Äôve programmed yourself into a dead end because your last two commits lead nowhere! Understandably, you might want to undo them and start over.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/21b0b502-6394-4002-93c7-03011e4fdd8d/1-reset-last-good-state.png\" /></p>\n<p>Here‚Äôs one way to do this:</p>\n<pre><code>$ git reset --hard 2b504be\n</code></pre>\n\n<p>But let‚Äôs also say that, moments later, you notice that you made a mistake: actually, the commits contained important data and you just lost valuable work! üò±</p>\n<p>Your heart starts pumping, the sweat starts running ‚Äî you know the drill. ü§Ø</p>\n<p>Now, the million-dollar question is: How can we <strong>get those seemingly deleted commits back</strong>? Luckily, there is an answer: the \"Reflog\"!</p>\n<h4>Using the Reflog to Recover Lost States</h4>\n<p>You can think of the Reflog as Git‚Äôs \"diary\": it‚Äôs the place where Git protocols every movement of the HEAD pointer. Or, in other words: all of the more interesting actions like when you commit, merge, checkout, rebase, cherry-pick and others. This, of course, makes it a perfect tool for those inevitable situations when things go wrong.</p>\n<p>Let‚Äôs open the Reflog for our example scenario and see how it can help us:</p>\n<pre><code>$ git reflog\n</code></pre>\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cc737a22-94da-4210-b397-7787de6d1723/2-reflog-cli.png\" /></p>\n<p>The first and most important thing to know about the Reflog is that it‚Äôs <strong>ordered chronologically</strong>. And indeed: the topmost (in other words: newest) item is our mishap when we had hastily used <code>git reset</code> and lost some commits.</p>\n<p>The solution to fix our problem is pretty easy: we can simply return to <em>the state before</em> the mistake. And that state is clearly protocoled in the Reflog, right below our fatal <code>reset</code> command. To undo our mistake, we can simply use <code>git reset</code> once more to recover this seemingly lost state:</p>\n<pre><code>$ git reset e5b19e4\n</code></pre>\n\n<p>You can also accomplish the same result a little bit faster. As a group of friendly and passionate developers on <a href=\"https://www.git-tower.com/?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=TOM\">\"Tower\" Git desktop GUI</a>, we‚Äôve been aiming to resolve common pain points around Git heads-on. So in our little tool, you can achieve the same results by simply hitting CMD + Z ‚Äî as if you wanted to correct a simple typo in your text editor. In fact, the same hotkey is available for a family of different actions, e.g. when you‚Äôve wrongfully deleted a branch, made a mistake with a merge operation, or committed something on the wrong branch.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e63f5832-a021-43c6-8a72-4d56501e5344/4-interactive-rebase-starting-situation.png\" /></p>\n<p>to correct this mistake, we‚Äôll initiate an Interactive Rebase session, starting at the faulty commit‚Äôs <em>parent revision</em>:</p>\n<pre><code>git rebase -i 2b504be\n</code></pre>\n\n<p>An editor window will then open and allow us to manipulate the selected part of our commit history:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/43bcd74c-b45c-4c6c-8ad2-fa016436ea0a/5-interactive-rebase-mark-commit-with-drop.png\" /></p>\n<p>In our case, since we want to delete a commit, we simply mark up the respective line in the editor with the <code>drop</code> action keyword. Once we hit \"Save\" in our editor and close the window, the Interactive Rebase is completed ‚Äî and the unwanted commit will have disappeared!</p>\n<p>(Just a quick note: again, if you‚Äôre using a desktop GUI like <a href=\"https://www.git-tower.com/?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=TOM\">Tower</a>, you can take a shortcut: simply right-click the unwanted commit and select the \"Delete...\" option from the contextual menu.)</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3b242831-24b1-4ace-a9c8-28fb9ce1f70c/6-interactive-rebase-delete-with-tower.png\" /></p>\n<p>As mentioned above, Interactive Rebase has a lot more use cases to offer! If you‚Äôd like to learn more about Interactive Rebase and what it can do, take a look at the free ‚Äú<a href=\"https://www.git-tower.com/learn/git/first-aid-kit?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=TOM\">First Aid Kit for Git</a>‚Äù: a collection of short, helpful, and free videos, all around undoing mistakes with Git.</p>\n<h3>Using Submodules To Manage Third-Party Code</h3>\n<p>In today‚Äôs complex software world, there‚Äôs hardly a project that <em>doesn't</em> include code from other sources: a module or library from a third party or even from your own team. Managing these modules in an elegant, pragmatic way greatly helps to reduce headaches!</p>\n<p>In theory, you could simply copy and paste the necessary code files into your project and then commit them to your code base. But this comes with a couple of downsides. Most importantly, you‚Äôll have a very hard time <strong>updating third-party code</strong> when new versions become available. You‚Äôd have to download the code again and copy-paste it ‚Äî again and again.</p>\n<p>Additionally, it‚Äôs considered bad practice if you squeeze multiple projects (your actual project and all the third-party libraries you might need) into a single Git repository. This mixes external code with our own, unique project files.</p>\n<p>A much better way to do this is to use Git‚Äôs <strong>\"Submodule\" structure</strong>: this allows you to include third-party code simply as a Git repository inside your actual project‚Äôs Git repository. This means that all code bases remain neatly separated.</p>\n<p>Including a third-party module / library is as easy as executing the following Git command:</p>\n<pre><code>$ git submodule add https://github.com/djyde/ToProgress\n</code></pre>\n\n<p>This command will download a clone of the specified Git repository into your project. You‚Äôll be left with a fully-functional, nicely separated Git repository of your third-party code. Tidy, clean and flexible.</p>\n<p>Submodules, admittedly, are quite a complex topic when it comes to handling them in practice. If you want to understand them a bit more thoroughly, check out the ‚Äú<a href=\"https://www.git-tower.com/learn/git/ebook/en/desktop-gui/advanced-topics/submodules/\">Submodules</a>‚Äù chapter of the free \"Learn Version Control with Git\" online book.</p>\n<h3>Composing Commits With Precision</h3>\n<p>There‚Äôs a golden rule in version control: <strong>a commit should only contain changes from a single issue!</strong> When you stick to this rule, you will create commits that are easy to understand. When you don‚Äôt ‚Äî when multiple issues and topics get crammed into the same commit ‚Äî you will inflict chaos on your code base in almost no time.</p>\n<p>In practice, this means that you <strong>create separate commits for each and every topic</strong>. Even if it‚Äôs just a small bug fix where you‚Äôre changing only a semicolon: it‚Äôs a topic of its own, so it gets a commit of its own!</p>\n<p>But in the messy real world, we often don‚Äôt <em>work</em> at only one topic at a time. Or we think we do, and only later discover that our code from the last three hours actually involves three different topics. This trickles down to individual files: often, the changes in a single file belong to multiple topics.</p>\n<p>That‚Äôs when adding a <em>complete</em> file to the next commit isn‚Äôt the best strategy anymore.</p>\n<h4>Staging Selected Parts of Your Changed Files</h4>\n<p>In the example case below, you can see that we currently have <strong>two chunks</strong> (= parts or areas) of modifications in our file <code>imprint.html</code>:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/114035d0-1fc5-472c-b92e-563fa4f5b3f2/7-staging-parts-of-changes.png\" /></p>\n<p>Let‚Äôs say that the first chunk belongs to one topic (maybe we‚Äôre in the process of unifying and cleaning up all page titles in our project). And let‚Äôs also say that the second chunk belongs to another, completely unrelated topic.</p>\n<p>A simple <code>git add imprint.html</code>, i.e. adding the whole file to Staging, would cram all of its changes into the same commit. Our colleagues, then, would have a hard time understanding what this particular commit was really about. Seeing some titles being changed, they might think it was only about the ‚Äútitle clean-up project‚Äù, but they might very well overlook the other changes.</p>\n<p>Luckily, Git allows us to <strong>precisely select the chunks</strong> we want to put into the next commit! All we have to do is add the <code>-p</code> flag to our <code>git add</code> command:</p>\n<pre><code>$ git add -p imprint.html\n</code></pre>\n\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/dd1057bc-fbe7-41ee-9596-4b1e061f21f8/8-git-add-p.png\" /></p>\n<p>Git now takes us by the hand and walks us through each and every chunk of changes in that file. And for each one, it asks us a simple question: ‚ÄúStage this chunk?‚Äù</p>\n<p>Let‚Äôs type Y (for ‚ÄúYes‚Äù) for the first one and N for the second one. When we then actually make our commit, only the first chunk of changes will be included. The second one remains as an uncommitted local change in our working copy for a later, separate commit.</p>\n<p>If you‚Äôre using Git in a desktop GUI, you might be able to do this right through the interface:</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/88713005-7483-45ec-ad61-9481f9d077b7/9-staging-chunks-in-gui.png\" /></p>\n<h3>Becoming More Productive with Git</h3>\n<p>This short article was just a short glimpse into some of the advanced features in Git. But I sincerely hope it shows that Git has so many powerful features under the hood! From Interactive Rebase to Submodules and from the Reflog to File History, it pays to learn these advanced features because they help you become more productive and make fewer mistakes.</p>\n<p>If you want to dive deeper, here are some helpful (and free) resources:</p>\n<ul>\n<li><strong>Git Cheat Sheet</strong><br />If you want to keep the most important commands at hand, the <a href=\"https://www.git-tower.com/blog/git-cheat-sheet/?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=TOM\">‚ÄúGit Cheat Sheet\"</a> might be for you. Available in English, German, Spanish, Portuguese, Arabic and Chinese.</li>\n<li><strong>Undoing Mistakes</strong><br />Git is a perfect safety net for when things go wrong. Learning about the different ‚Äúundo‚Äù features in Git is time well spent for any developer. The <a href=\"https://www.git-tower.com/learn/git/first-aid-kit/?utm_source=smashingmagazine&amp;utm_medium=guestpost&amp;utm_campaign=TOM\">\"First Aid Kit for Git\"</a>, a collection of short videos, provides a great introduction.</li>\n</ul>\n<p>Have fun becoming a better developer!</p>","author":"","siteTitle":"Articles on Smashing Magazine ‚Äî For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"78b9371a729c9ba25d8466dbeea06c82f586b24f9141453ed66f3cea0135fad2","category":"Tech"}
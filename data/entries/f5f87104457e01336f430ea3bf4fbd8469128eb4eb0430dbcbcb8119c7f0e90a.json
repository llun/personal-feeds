{"title":"Request with Intent: Caching Strategies in the Age of PWAs","link":"https://alistapart.com/article/request-with-intent-caching-strategies-in-the-age-of-pwas/","date":1574346606000,"content":"<!-- wp:paragraph -->\n<p>Once upon a time, we relied on browsers to handle caching for us; as developers in those days, we had very little control. But then came <a href=\"https://alistapart.com/article/yes-that-web-project-should-be-a-pwa/\">Progressive Web Apps</a> (PWAs), <a href=\"https://developer.mozilla.org/docs/Web/API/Service_Worker_API\">Service Workers</a>, and the <a href=\"https://developer.mozilla.org/docs/Web/API/Cache\">Cache API</a>—and suddenly we have expansive power over what gets put in the cache and how it gets put there. We can now cache everything we want to… and therein lies a potential problem.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Media files—especially images—make up <a href=\"https://httparchive.org/reports/page-weight\">the bulk of average page weight</a> these days, and <a href=\"https://httparchive.org/reports/page-weight#bytesImg\">it’s getting worse</a>. In order to improve performance, it’s tempting to cache as much of this content as possible, but should we? In most cases, no. Even with all this newfangled technology at our fingertips, great performance still hinges on a simple rule: <a href=\"https://alistapart.com/article/the-best-request-is-no-request-revisited\">request only what you need and make each request as small as possible</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To provide the best possible experience for our users without abusing their network connection or their hard drive, it’s time to put a spin on some classic best practices, experiment with media caching strategies, and play around with a few Cache API tricks that Service Workers have hidden up their sleeves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Best intentions</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>All those lessons we learned optimizing web pages for dial-up became super-useful again when mobile took off, and they continue to be applicable in the work we do for a global audience today. Unreliable or high latency network connections are still the norm in many parts of the world, reminding us that it’s never safe to assume a technical baseline lifts evenly or in sync with its corresponding cutting edge. And that’s the thing about performance best practices: history has borne out that approaches that are good for performance now will continue being good for performance in the future.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before the advent of Service Workers, we could provide <a href=\"https://developer.yahoo.com/performance/rules.html#expires\">some instructions to browsers</a> with respect to how long they should cache a particular resource, but that was about it. Documents and assets downloaded to a user’s machine would be dropped into a directory on their hard drive. When the browser assembled a request for a particular document or asset, it would peek in the cache first to see if it already had what it needed to possibly avoid hitting the network.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We have considerably more control over network requests and the cache these days, but that doesn’t excuse us from being thoughtful about the resources on our web pages.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Request only what you need</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As I mentioned, the web today is lousy with media. Images and videos have become a dominant means of communication. They may convert well when it comes to sales and marketing, but they are hardly performant when it comes to download and rendering speed. With this in mind, each and every image (and video, etc.) should have to fight for its place on the page.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A few years back, a recipe of mine was included in a newspaper story on cooking with spirits (alcohol, not ghosts). I don’t subscribe to the print version of that paper, so when the article came out I went to the site to take a look at how it turned out. During a recent redesign, the site had decided to load all articles into a nearly full-screen modal viewbox layered on top of their homepage. This meant requesting the article required requests for all of the assets associated with the article page <em>plus</em> all the contents and assets for the homepage. Oh, and the homepage had video ads—plural. And, yes, they auto-played.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I popped open DevTools and discovered the page had blown past 15 MB in page weight. Tim Kadlec had recently launched <a href=\"https://whatdoesmysitecost.com/\">What Does My Site Cost?</a>, so I decided to check out the damage. Turns out that the actual cost to view that page for the average US-based user was more than the cost of the print version of that day’s newspaper. That’s just messed up.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Sure, I could blame the folks who built the site for doing their readers such a disservice, but the reality is that none of us go to work with the goal of worsening our users’ experiences. This could happen to any of us. We could spend days scrutinizing the performance of a page only to have some committee decide to set that carefully crafted page atop a Times Square of auto-playing video ads. Imagine how much worse things would be if we were stacking two abysmally-performing pages on top of each other!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Media can be great for drawing attention when competition is high (e.g., on the homepage of a newspaper), but when you want readers to focus on a single task (e.g., reading the actual article), its value can drop from important to “nice to have.” Yes, studies have shown that images excel at drawing eyeballs, but once a visitor is on the article page, <a href=\"https://theoutline.com/post/2485/not-every-article-needs-a-picture\">no one cares</a>; we’re just making it take longer to download and more expensive to access. The situation only gets worse as we shove more media into the page.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We must do everything in our power to reduce the weight of our pages, so avoid requests for things that don’t add value. For starters, if you’re writing an article about a data breach, resist the urge to include <a href=\"https://www.istockphoto.com/jp/en/photo/hacker-attacking-internet-gm540848970-96658127\">that ridiculous stock photo</a> of some random dude in a hoodie typing on a computer in a very dark room.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Request the smallest file you can</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that we’ve taken stock of what we <em>do</em> need to include, we must ask ourselves a critical question: How can we deliver it in the fastest way possible? This can be as simple as <a href=\"https://vimeo.com/290141511\">choosing the most appropriate image format</a> for the content presented (and optimizing the heck out of it) or as complex as recreating assets entirely (for example, if switching from raster to vector imagery would be more efficient).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Offer alternate formats</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When it comes to image formats, we don’t have to choose between performance and reach anymore. We can provide multiple options and let <em>the browser</em> decide which one to use, based on what it can handle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can accomplish this by offering multiple <code>sources</code> within a <code>picture</code> or <code>video</code> element. Start by creating multiple formats of the media asset. For example, with WebP and JPG, it’s likely that the WebP will have a smaller file size than the JPG (but check to make sure). With those alternate sources, you can drop them into a <code>picture</code> like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-markup\">&lt;picture&gt;\n  &lt;source srcset=\"my.webp\" type=\"image/webp\"&gt;\n  &lt;img src=\"my.jpg\" alt=\"Descriptive text about the picture.\"&gt;\n&lt;/picture&gt;</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Browsers that recognize the <code>picture</code> element will check the <code>source</code> element before making a decision about which image to request. If the browser supports the MIME type “image/webp,” it will kick off a request for the WebP format image. If not (or if the browser doesn’t recognize <code>picture</code>), it will request the JPG.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The nice thing about this approach is that you’re serving the smallest image possible to the user without having to resort to any sort of JavaScript hackery.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can take the same approach with video files:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-markup\">&lt;video controls&gt;\n  &lt;source src=\"my.webm\" type=\"video/webm\"&gt;\n  &lt;source src=\"my.mp4\" type=\"video/mp4\"&gt;\n  &lt;p&gt;Your browser doesn’t support native video playback,\n    but you can &lt;a href=\"my.mp4\" download&gt;download&lt;/a&gt;\n    this video instead.&lt;/p&gt;\n&lt;/video&gt;</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Browsers that support WebM will request the first <code>source</code>, whereas browsers that don’t—but do understand MP4 videos—will request the second one. Browsers that don’t support the <code>video</code> element will fall back to the paragraph about downloading the file.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The order of your <code>source</code> elements matters. <a href=\"https://html.spec.whatwg.org/multipage/media.html#concept-media-load-algorithm\">Browsers will choose the first <em>usable</em> <code>source</code></a>, so if you specify an optimized alternative format <em>after</em> a more widely compatible one, the alternative format may never get picked up.&nbsp;&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Depending on your situation, you might consider bypassing this markup-based approach and handle things on the server instead. For example, if a JPG is being requested and the browser supports WebP (which is indicated in the <code>Accept</code> header), there’s nothing stopping you from replying with a WebP version of the resource. In fact, some CDN services—<a href=\"https://cloudinary.com\">Cloudinary</a>, for instance—come with this sort of functionality right out of the box.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":4} -->\n<h4>Offer different sizes</h4>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Formats aside, you may want to deliver alternate image sizes optimized for the current size of the browser’s viewport. After all, there’s no point loading an image that’s 3–4 times larger than the screen rendering it; that’s just wasting bandwidth. This is where <a href=\"https://alistapart.com/article/responsive-images-in-practice/\">responsive images</a> come in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here’s an example:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-markup\">&lt;img src=\"medium.jpg\"\n  srcset=\"small.jpg 256w,\n    medium.jpg 512w,\n    large.jpg 1024w\"\n  sizes=\"(min-width: 30em) 30em, 100vw\"\n  alt=\"Descriptive text about the picture.\"&gt;</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>There’s a lot going on in this super-charged <code>img</code> element, so I’ll break it down:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>This <code>img</code> offers three size options for a given JPG: 256 px wide (<code>small.jpg</code>), 512 px wide (<code>medium.jpg</code>), and 1024 px wide (<code>large.jpg</code>). These are provided in the <code>srcset</code> attribute with corresponding <a href=\"https://cloudfour.com/thinks/responsive-images-101-part-4-srcset-width-descriptors/\">width descriptors</a>.</li><li>The <code>src</code> defines a default image source, which acts as a fallback for browsers that don’t support <code>srcset</code>. Your choice for the default image will likely depend on the context and general usage patterns. Often I’d recommend the smallest image be the default, but if the majority of your traffic is on older desktop browsers, you might want to go with the medium-sized image.</li><li>The <code>sizes</code> attribute is a <a href=\"https://www.w3.org/TR/CSS2/cascade.html#preshint\">presentational hint</a> that informs the browser how the image will be rendered in different scenarios (its <a href=\"https://24ways.org/2018/jank-free-image-loads/\">extrinsic size</a>) once CSS has been applied. This particular example says that the image will be the full width of the viewport (<code>100vw</code>) until the viewport reaches 30 em in width (<code>min-width: 30em</code>), at which point the image will be 30 em wide. You can make the <code>sizes</code> value as complicated or as simple as you want; omitting it causes browsers to use the default value of <code>100vw</code>.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>You can even combine this approach with <a href=\"https://alistapart.com/article/responsive-images-in-practice/#snippet13\">alternate formats and crops within a single <code>picture</code></a>. 🤯</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All of this is to say that you have a number of tools at your disposal for delivering fast-loading media, so use them!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Defer requests (when possible)</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Years ago, Internet Explorer 11 introduced a new attribute that enabled developers to de-prioritize specific <code>img</code> elements to speed up page rendering: <code>lazyload</code>. That attribute never went anywhere, standards-wise, but it was a solid attempt to defer image loading until images are in view (or close to it) without having to involve JavaScript.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There have been countless JavaScript-based implementations of lazy loading images since then, but recently Google also took a stab at a more declarative approach, using a different attribute: <a href=\"https://web.dev/native-lazy-loading\"><code>loading</code></a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The <code>loading</code> attribute supports three values (“auto,” “lazy,” and “eager”) to define how a resource should be brought in. For our purposes, the “lazy” value is the most interesting because it defers loading the resource until it reaches a <a href=\"https://web.dev/native-lazy-loading#load-in-distance-threshold\">calculated distance</a> from the viewport.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adding that into the mix…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-markup\">&lt;img src=\"medium.jpg\"\n  srcset=\"small.jpg 256w,\n    medium.jpg 512w,\n    large.jpg 1024w\"\n  sizes=\"(min-width: 30em) 30em, 100vw\"\n  loading=\"lazy\"\n  alt=\"Descriptive text about the picture.\"&gt;</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>This attribute offers a bit of a performance boost in Chromium-based browsers. Hopefully it will become a standard and get picked up by other browsers in the future, but in the meantime there’s no harm in including it because browsers that don’t understand the attribute will simply ignore it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This approach complements a media prioritization strategy really well, but before I get to that, I want to take a closer look at Service Workers.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Manipulate requests in a Service Worker</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Service Workers are a special type of <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Worker</a> with the ability to intercept, modify, and respond to all network requests via the <a href=\"https://developer.mozilla.org/docs/Web/API/Fetch_API\">Fetch API</a>. They also have access to the <a href=\"https://developer.mozilla.org/docs/Web/API/Cache\">Cache API</a>, as well as other asynchronous client-side data stores like <a href=\"https://developer.mozilla.org/docs/Web/API/IndexedDB_API\">IndexedDB</a> for resource storage.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When a Service Worker is installed, you can hook into that event and prime the cache with resources you want to use later. Many folks use this opportunity to squirrel away copies of global assets, including styles, scripts, logos, and the like, but you can also use it to cache images for use when network requests fail.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Keep a fallback image in your back pocket</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Assuming you want to use a fallback in more than one networking recipe, you can set up a named function that will respond with that resource:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">function respondWithFallbackImage() {\n  return caches.match( \"/i/fallbacks/offline.svg\" );\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then, within a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent\"><code>fetch</code> event handler</a>, you can use that function to provide that fallback image when requests for images fail at the network:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">self.addEventListener( \"fetch\", event =&gt; {\n  const request = event.request;\n  if ( request.headers.get(\"Accept\").includes(\"image\") ) {\n    event.respondWith(\n      return fetch( request, { mode: 'no-cors' } )\n        .then( response =&gt; {\n          return response;\n        })\n        .catch(\n          respondWithFallbackImage\n        );\n    );\n  }\n});</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>When the network is available, users get the expected behavior:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7172145} -->\n<figure class=\"wp-block-image\"><img src=\"https://alistapart.com/wp-content/uploads/2019/11/fig1.png?w=960\" alt=\"Screenshot of a component showing a series of user profile images of users who have liked something\" class=\"wp-image-7172145\"/><figcaption>Social media avatars are rendered as expected when the network is available.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>But when the network is interrupted, images will be swapped automatically for a fallback, and the user experience is still acceptable:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7172144} -->\n<figure class=\"wp-block-image\"><img src=\"https://alistapart.com/wp-content/uploads/2019/11/fig2-1.png?w=960\" alt=\"Screenshot showing a series of identical generic user images in place of the individual ones which have not loaded\" class=\"wp-image-7172144\"/><figcaption>A generic fallback avatar is rendered when the network is unavailable.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>On the surface, this approach may not seem all that helpful in terms of performance since you’ve essentially added an additional image download into the mix. With this system in place, however, some pretty amazing opportunities open up to you.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>Respect a user’s choice to save data</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some users reduce their data consumption by entering a “lite” mode or turning on a “data saver” feature. When this happens, browsers will often send a <a href=\"https://developer.mozilla.org/docs/Web/HTTP/Headers/Save-Data\"><code>Save-Data</code> header</a> with their network requests. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Within your Service Worker, you can look for this header and adjust your responses accordingly. First, you look for the header:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">let save_data = false;\nif ( 'connection' in navigator ) {\n  save_data = navigator.connection.saveData;\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Then, within your <code>fetch</code> handler for images, you might choose to preemptively respond with the fallback image instead of going to the network at all:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">self.addEventListener( \"fetch\", event =&gt; {\n  const request = event.request;\n  if ( request.headers.get(\"Accept\").includes(\"image\") ) {\n    event.respondWith(\n      if ( save_data ) {\n        return respondWithFallbackImage();\n      }\n      // code you saw previously\n    );\n  }\n});</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>You could even take this a step further and tune <code>respondWithFallbackImage()</code> to provide alternate images based on what the original request was for. To do that you’d define several fallbacks globally in the Service Worker:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">const fallback_avatar = \"/i/fallbacks/avatar.svg\",\n      fallback_image = \"/i/fallbacks/image.svg\";</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Both of those files should then be cached during the Service Worker install event:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">return cache.addAll( [\n  fallback_avatar,\n  fallback_image\n]);</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Finally, within <code>respondWithFallbackImage()</code> you could serve up the appropriate image based on the URL being fetched. In my site, the avatars are pulled from <a href=\"https://webmention.io\">Webmention.io</a>, so I test for that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">function respondWithFallbackImage( url ) {\n  const image = avatars.test( /webmention\\.io/ ) ? fallback_avatar\n                                                 : fallback_image;\n  return caches.match( image );\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>With that change, I’ll need to update the <code>fetch</code> handler to pass in <code>request.url</code> as an argument to <code>respondWithFallbackImage()</code>. Once that’s done, when the network gets interrupted I end up seeing something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":7172143} -->\n<figure class=\"wp-block-image\"><img src=\"https://alistapart.com/wp-content/uploads/2019/11/fig3.png?w=960\" alt=\"Screenshot showing a blog comment with a generic user profile image and image placeholder where the network could not load the actual images\" class=\"wp-image-7172143\"/><figcaption>A webmention that contains both an avatar and an embedded image will render with two different fallbacks when the Save-Data header is present.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Next, we need to establish some general guidelines for handling media assets—based on the situation, of course.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading {\"level\":3} -->\n<h3>The caching strategy: prioritize certain media</h3>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In my experience, media—especially images—on the web tend to fall into three categories of necessity. At one end of the spectrum are elements that don’t add meaningful value. At the other end of the spectrum are critical assets that <em>do</em> add value, such as charts and graphs that are essential to understanding the surrounding content. Somewhere in the middle are what I would call “nice-to-have” media. They <em>do</em> add value to the core experience of a page but are not critical to understanding the content.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you consider your media with this division in mind, you can establish some general guidelines for handling each, based on the situation. In other words, a caching strategy. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure>\n  <table>\n    <caption>Media loading strategy, broken down by how critical an asset is to understanding an interface</caption>\n    <thead>\n      <tr>\n        <th scope=\"col\">Media category</th>\n        <th scope=\"col\">Fast connection</th>\n        <th scope=\"col\"><code>Save-Data</code></th>\n        <th scope=\"col\">Slow connection</th>\n        <th scope=\"col\">No network</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td data-title=\"Media category\"><b>Critical</b></td>\n        <td colspan=\"3\" data-title=\"Fast connection, Save-Data, Slow Connection\">Load media</td>\n        <td data-title=\"No network\">Replace with placeholder</td>\n      </tr>\n      <tr>\n        <td data-title=\"Media category\"><b>Nice-to-have</b></td>\n        <td data-title=\"Fast connection\">Load media</td>\n        <td colspan=\"3\" data-title=\"Save-Data, Slow connection, No network\">Replace with placeholder</td>\n      </tr>\n      <tr>\n        <td data-title=\"Media category\"><b>Non-critical</b></td>\n        <td colspan=\"4\" data-title=\"Fast connection, Save-Data, Slow connection, No network\">Remove from content entirely</td>\n      </tr>\n    </tbody>\n  </table>\n</figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>When it comes to disambiguating the critical from the nice-to-have, it’s helpful to have those resources organized into separate directories (or similar). That way we can add some logic into the Service Worker that can help it decide which is which. For example, on my own personal site, critical images are either self-hosted or come from the website for <a href=\"https://adaptivewebdesign.info\">my book</a>. Knowing that, I can write regular expressions that match those domains:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">const high_priority = [\n    /aaron\\-gustafson\\.com/,\n    /adaptivewebdesign\\.info/\n  ];</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>With that <code>high_priority</code> variable defined, I can create a function that will let me know if a given image request (for example) is a high priority request or not:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">function isHighPriority( url ) {\n  // how many high priority links are we dealing with?\n  let i = high_priority.length;\n  // loop through each\n  while ( i-- ) {\n    // does the request URL match this regular expression?\n    if ( high_priority[i].test( url ) ) {\n      // yes, it’s a high priority request\n      return true;\n    }\n  }\n  // no matches, not high priority\n  return false;\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Adding support for prioritizing media requests only requires adding a new conditional into the <code>fetch</code> event handler, like we did with <code>Save-Data</code>. Your specific recipe for network and cache handling will likely differ, but here was <a href=\"https://github.com/aarongustafson/aaron-gustafson.com/blob/master/_javascript/serviceworker/fetch.js#L162-L219\">how I chose to mix in this logic within image requests</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">// Check the cache first\n  // Return the cached image if we have one\n  // If the image is not in the cache, continue\n\n// Is this image high priority?\nif ( isHighPriority( url ) ) {\n\n  // Fetch the image\n    // If the fetch succeeds, save a copy in the cache\n    // If not, respond with an \"offline\" placeholder\n\n// Not high priority\n} else {\n\n  // Should I save data?\n  if ( save_data ) {\n\n    // Respond with a \"saving data\" placeholder\n\n  // Not saving data\n  } else {\n\n    // Fetch the image\n      // If the fetch succeeds, save a copy in the cache\n      // If not, respond with an \"offline\" placeholder\n  }\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>We can apply this prioritized approach to many kinds of assets. We could even use it to control which pages are served cache-first vs. network-first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Keep the cache tidy</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The&nbsp; ability to control which resources are cached to disk is a huge opportunity, but it also carries with it an equally huge responsibility not to abuse it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Every caching strategy is likely to differ, at least a little bit. If we’re publishing a book online, for instance, it might make sense to cache all of the chapters, images, etc. for offline viewing. There’s a fixed amount of content and—assuming there aren’t a ton of heavy images and videos—users will benefit from not having to download each chapter separately.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On a news site, however, caching every article and photo will quickly fill up our users’ hard drives. If a site offers an indeterminate number of pages and assets, it’s <em>critical</em> to have a caching strategy that puts hard limits on how many resources we’re caching to disk.&nbsp;</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>One way to do this is to create several different blocks associated with caching different forms of content. The more ephemeral content caches can have strict limits around how many items can be stored. Sure, we’ll still be bound to the storage limits of the device, but do we really want our website to take up 2 GB of someone’s hard drive?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here’s an example, again from my own site:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">const sw_caches = {\n  static: {\n    name: `${version}static`\n  },\n  images: {\n    name: `${version}images`,\n    limit: 75\n  },\n  pages: {\n    name: `${version}pages`,\n    limit: 5\n  },\n  other: {\n    name: `${version}other`,\n    limit: 50\n  }\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Here I’ve defined several caches, each with a <code>name</code> used for addressing it in the Cache API and a <code>version</code> prefix. The <code>version</code> is defined elsewhere in the Service Worker, and allows me to purge all caches at once if necessary.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With the exception of the <code>static</code> cache, which is used for static assets, every cache has a <code>limit</code> to the number of items that may be stored. I only cache the most recent 5 pages someone has visited, for instance. Images are limited to the most recent 75, and so on. This is an approach that <a href=\"https://adactio.com/\">Jeremy Keith</a> outlines in his fantastic book <a href=\"https://abookapart.com/products/going-offline\"><em>Going Offline</em></a> (which you should really read if you haven’t already—<a href=\"https://alistapart.com/article/going-offline/\">here’s a sample</a>).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With these cache definitions in place, I can clean up my caches periodically and prune the oldest items. Here’s Jeremy’s recommended code for this approach:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">function trimCache(cacheName, maxItems) {\n  // Open the cache\n  caches.open(cacheName)\n  .then( cache =&gt; {\n    // Get the keys and count them\n    cache.keys()\n    .then(keys =&gt; {\n      // Do we have more than we should?\n      if (keys.length &gt; maxItems) {\n        // Delete the oldest item and run trim again\n        cache.delete(keys[0])\n        .then( () =&gt; {\n          trimCache(cacheName, maxItems)\n        });\n      }\n    });\n  });\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>We can trigger this code to run whenever a new page loads. By running it in the Service Worker, it runs in a separate thread and won’t drag down the site’s responsiveness. We trigger it by posting a message (using <code>postMessage()</code>) to the Service Worker from the main JavaScript thread:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">// First check to see if you have an active service worker\nif ( navigator.serviceWorker.controller ) {\n  // Then add an event listener\n  window.addEventListener( \"load\", function(){\n    // Tell the service worker to clean up\n    navigator.serviceWorker.controller.postMessage( \"clean up\" );\n  });\n}</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>The final step in wiring it all up is setting up the Service Worker to receive the message:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:html -->\n<figure><pre><code class=\"language-javascript\">addEventListener(\"message\", messageEvent =&gt; {\n  if (messageEvent.data == \"clean up\") {\n    // loop though the caches\n    for ( let key in sw_caches ) {\n      // if the cache has a limit\n      if ( sw_caches[key].limit !== undefined ) {\n        // trim it to that limit\n        trimCache( sw_caches[key].name, sw_caches[key].limit );\n      }\n    }\n  }\n});</code></pre></figure>\n<!-- /wp:html -->\n\n<!-- wp:paragraph -->\n<p>Here, the Service Worker listens for inbound messages and responds to the “clean up” request by running <code>trimCache()</code> on each of the cache buckets with a defined <code>limit</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This approach is by no means elegant, but it works. It would be far better to make decisions about purging cached responses based on how frequently each item is accessed and/or how much room it takes up on disk. (Removing cached items based purely on when they were cached isn’t nearly as useful.) Sadly, we don’t have that level of detail when it comes to inspecting the caches…yet. I’m actually working to address this limitation in the Cache API right now.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Your users always come first</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The technologies underlying Progressive Web Apps are continuing to mature, but even if you aren’t interested in turning your site into a PWA, there’s so much you can do today to improve your users’ experiences when it comes to media. And, as with every other form of inclusive design, it starts with centering on your users who are most at risk of having an awful experience.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Draw distinctions between critical, nice-to-have, and superfluous media. Remove the cruft, then optimize the bejeezus out of each remaining asset. Serve your media in multiple formats and sizes, prioritizing the smallest versions first to make the most of high latency and slow connections. If your users say they want to save data, respect that and have a fallback plan in place. Cache wisely and with the utmost respect for your users’ disk space. And, finally, audit your caching strategies regularly—especially when it comes to large media files.Follow these guidelines, and every one of your users—from folks rocking a <a href=\"https://www.jio.com/en-in/jiophone2\">JioPhone</a> on a rural mobile network in India to people on a high-end gaming laptop wired to a 10 Gbps fiber line in Silicon Valley—will thank you.</p>\n<!-- /wp:paragraph -->","author":"","siteTitle":"A List Apart: The Full Feed","siteHash":"09b09f389b84b264a6ebab120b6208479961d3fe7df4850a75b103b2b9c8a950","entryHash":"f5f87104457e01336f430ea3bf4fbd8469128eb4eb0430dbcbcb8119c7f0e90a","category":"Tech"}
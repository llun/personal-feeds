{"title":"Announcing Tech Preview of Consul Service Mesh for Amazon ECS","link":"https://www.hashicorp.com/blog/announcing-consul-service-mesh-for-amazon-ecs","date":1622052000000,"content":"<p>Today we are pleased to announce that HashiCorp Consul service mesh is available to deploy on <a href=\"https://aws.amazon.com/ecs/\">Amazon Elastic Container Service</a> (ECS) as a tech preview. This integration enables Consul to be the first open source service mesh provider that is deployable on ECS.</p>\n<p>The tech preview of this integration lets users deploy a non-production version of Consul for testing on the <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html\">Fargate launch type</a> for ECS. As we approach general availability, we will enable more secure, production-ready deployments for self-managed Consul clusters on AWS and <a href=\"https://cloud.hashicorp.com/\">HashiCorp Cloud Platform</a> (HCP) Consul clusters.</p>\n<p>In this blog, we’ll explore how this integration was built and provide steps for users who wish to try it for themselves.</p>\n<h2><a href=\"#a-quick-overview-of-ecs\">»</a><a></a>A Quick Overview of ECS</h2>\n<p>Amazon Elastic Container Service (ECS) is a fully managed container orchestration service provided by Amazon Web Services. ECS is a popular choice for organizations that have built a large portion of their infrastructure in AWS and rely on it for other services. In fact, according to <a href=\"https://github.com/mhausenblas/aws-container-security-survey-2020/blob/master/AWS-container-security-survey-2020-summary.pdf\">AWS’s 2020 Container Security Survey</a>, 56% of respondents are using ECS on EC2 or Fargate to manage their container deployments.</p>\n<p><a href=\"https://aws.amazon.com/eks/\">Amazon Elastic Kubernetes Service</a> (EKS) continues to be a growing service for AWS, but this survey reinforces the notion that customers frequently <a href=\"https://thenewstack.io/the-case-for-multiple-orchestrators/\">opt for multiple kinds of orchestration services</a>. Our goal with Consul is to enable a true multi-platform service mesh that supports all runtimes. Adding ECS to the list of supported runtime platforms brings us closer to achieving this goal.</p>\n<h2><a href=\"#how-it-works\">»</a><a></a>How it Works</h2>\n<p>Let’s walk through the steps of how to use Consul service mesh on ECS. To provide a simple and consistent user experience, users can deploy Consul service mesh on Amazon ECS using HashiCorp Terraform. There are two official Terraform <a href=\"https://www.terraform.io/docs/language/modules/index.html\">modules</a> used to deploy Consul on ECS: <a href=\"https://registry.terraform.io/modules/hashicorp/consul-ecs/aws/latest/submodules/mesh-task\">mesh-task</a> and <a href=\"https://registry.terraform.io/modules/hashicorp/consul-ecs/aws/latest/submodules/dev-server\">dev-server</a>.</p>\n<p>The dev-server module deploys a development/testing-only Consul server task onto ECS Fargate:</p><img src=\"https://www.datocms-assets.com/2885/1622051457-consul-ecs-server.png\" /><p>The image above represents a basic Consul server task. Future releases will support deploying a production-ready Consul server.</p>\n<p>The mesh-task module is used to deploy application tasks into the service mesh. In addition to the application containers, the mesh-task module adds additional containers to the task. Here's a diagram of what an application task deployed with the mesh-task module looks like:</p><img src=\"https://www.datocms-assets.com/2885/1622051493-consul-ecs-task.png\" /><p>The additional containers added to the task are the Consul client container and the sidecar proxy container. The Consul client container communicates with the Consul server and acts as part of the control plane for the service mesh. The sidecar proxy container runs <a href=\"https://www.envoyproxy.io/\">Envoy</a> and proxies all traffic into and out of the task.</p>\n<p>The mesh-task module is designed to make it easy to convert existing task definitions into service mesh tasks. For example, given an existing Terraform task definition:</p><pre><code>resource \"aws_ecs_task_definition\" \"web\" {\n  family                = \"web\"\n  container_definitions = jsonencode(\n    [{\n      name             = \"web\"\n      image            = \"docker.io/org/web:v0.0.1\"\n      essential        = true\n      portMappings = [\n        {\n          containerPort = 9090\n        }\n      ]\n    }]\n  )\n}\n</code></pre><p>All that’s required to add that task to the service mesh is to copy the <code>family</code> and <code>container_definitions</code> inputs into a new instantiation of the mesh-task module:</p><pre><code>module \"web\" {\n  source  = \"hashicorp/consul/aws-ecs//modules/mesh-task\"\n\n  family                = \"web\"\n  container_definitions = [\n    {\n      name             = \"web\"\n      image            = \"docker.io/org/web:v0.0.1\"\n      essential        = true\n      portMappings = [\n        {\n          containerPort = 9090\n        }\n      ]\n    }\n  ]\n}\n</code></pre><p>Under the hood, the module will automatically add in the additional containers.</p>\n<p>Now that you understand how the dev-server and mesh-task modules work, let’s look at how you can combine them into a full service mesh architecture.</p>\n<h2><a href=\"#web-and-api-example\">»</a><a></a>Web and API Example</h2>\n<p>In this example, we want to deploy two services: <code>web</code> and <code>api</code>, and a Consul server. An example Terraform file that creates a Consul server and the two services tasks would look like this:</p><pre><code>module \"consul_server\" {\n  source  = \"hashicorp/consul-ecs/aws//modules/dev-server\"\n  ...\n}\n\nmodule \"web\" {\n  source  = \"hashicorp/consul-ecs/aws//modules/mesh-task\"\n  ...\n}\n\nmodule \"api\" {\n  source  = \"hashicorp/consul-ecs/aws//modules/mesh-task\"\n  ...\n}</code></pre><p>This Terraform configuration would create a Consul server task and two application tasks in the service mesh. The diagram below illustrates this:</p><img src=\"https://www.datocms-assets.com/2885/1622050365-consul-on-ecs.png\" /><p>If we wanted <code>web</code> to be able to call <code>api</code>, we would define an upstream in its Terraform configuration:</p><pre><code>module \"web\" {\n  source  = \"hashicorp/consul/aws-ecs//modules/mesh-task\"\n\n  family                = \"web\"\n  container_definitions = ...\n\n  # Define api as an upstream.\n  upstreams = [\n    {\n      destination_name = \"api\"\n      local_bind_port  = 8080\n    }\n  ]\n}</code></pre><p>This configuration instructs Consul to configure <code>web</code>’s Envoy proxy to bind to port 8080 on the <code>web</code> task. If <code>web</code> then makes a request to <code>http://localhost:8080</code>, the request will be routed through the service mesh and over to the <code>api</code> task.</p>\n<h2><a href=\"#service-mesh-features\">»</a><a></a>Service Mesh Features</h2>\n<p>Running Consul on ECS lets you take advantage of many exciting service mesh features:</p>\n<ul>\n<li><strong>Zero trust networking:</strong> Requests between tasks are fully encrypted with mTLS. This prevents potential attackers from sniffing plain-text traffic. In addition, because requests flow through sidecar proxies, Consul can block requests from unauthorized services.</li>\n<li><strong>Observability:</strong> Sidecar proxies can be configured to emit consistent request metrics between all your services. This means you can build dashboards and create automated alerts without reconfiguring and re-coding all your services.</li>\n<li><strong>Reliability:</strong> Consul’s <a href=\"https://www.consul.io/docs/connect/config-entries\">configuration entries</a> can be used to configure the behavior of proxies to retry failed requests, timeout after a certain period of time, and circuit break services that are not responding. These controls can increase the reliability of your microservices infrastructure without requiring changes to the underlying services.</li>\n</ul>\n<h2><a href=\"#conclusion\">»</a><a></a>Conclusion</h2>\n<p>This exciting evolution in Consul service mesh further expands HashiCorp’s ability to support any application on any runtime. As we move Consul service mesh for Amazon ECS towards general availability we plan to further enhance this offering, so we greatly appreciate any <a href=\"http://github.com/hashicorp/terraform-aws-ecs-consul/issues\">feedback</a> tech preview users can share along the way.</p>\n<p>For more information about Consul on ECS, please visit our <a href=\"http://consul.io/docs/ecs\">documentation</a>, and for more information about Consul service mesh, please visit <a href=\"http://consul.io\">the Consul project home page</a>.</p>","author":"Luke Kysow","siteTitle":"HashiCorp Blog","siteHash":"219aa6310b3388f2335eba49871f4df9581f2c58eaeb5e498363b54e835b7001","entryHash":"07096483d5f2ea2f6f0e0d4a7ee7b95487beee1820688003ba28ac975884120c","category":"Tech"}
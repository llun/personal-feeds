{"title":"Understanding Easing Functions For CSS Animations And Transitions","link":"https://smashingmagazine.com/2021/04/easing-functions-css-animations-transitions/","date":1619524800000,"content":"<p>Have you ever noticed how smooth and delightful animations look on a well-made, professional project? I am reminded of the <a href=\"http://www.species-in-pieces.com/\">In Pieces</a> website where animations are used not just for decoration, but they also convey the message about the endangered species in an impactful way. Not only is the animation design and style beautiful, but they also flow nicely and harmoniously. It is precisely that flow in combination with the design and presentation which makes the animation look stunning and natural. That is the power of easing functions, which are also called timing functions.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c5fed2eb-8c2c-45b6-9c11-f4d4228554a7/3-easing-functions-css-animations-transitions.png\" /></p>\n<p><strong>Animation duration</strong> determines the amount of time for the animation to go from the first keyframe to the last. The following graph shows the connection between the animation keyframes and duration.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d8067d81-7657-4714-886c-4681fd663396/04-easing-functions-css-animations-transitions.png\" /></p>\n<p>There are many ways in which animation can progress between two keyframes. For example, animation can have a constant speed or it can move quickly at the start and slow down near the end, or move slowly at the start and then speed up until it reaches the end, etc. This <a href=\"https://www.w3.org/TR/css-easing-1/#introduction\">rate, or speed</a> is defined with the <strong>easing functions (timing functions)</strong>. If we take a look at the previous graph, the easing function is represented by the shape of the line connecting the two points. We’ve used the linear function (straight line) for the previous example, but we can also use a curve to connect the keyframes.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/725924ac-22d0-42cc-aa91-87261d4593c5/05-easing-functions-css-animations-transitions.png\" /></p>\n<p>As you can see, there are lots of possible options and variations for animation easing functions and we’ll take a look at them next.</p>\n<h3>Types Of Easing Functions</h3>\n<p>There are three main types of easing functions that can be used in CSS:</p>\n<ul>\n<li>Linear functions (<code>linear</code>),</li>\n<li>Cubic Bézier functions (includes <code>ease</code>, <code>ease-in</code>, <code>ease-out</code> and <code>ease-in-out</code>),</li>\n<li>Staircase functions (<code>steps</code>).</li>\n</ul>\n<h4>Linear Functions</h4>\n<p>We’ve covered linear functions in one of the previous examples, so let’s do a quick recap. With the linear timing function, the animation is going through the keyframes at a constant speed. As you might already know, the linear timing function can be easily set in CSS by using the <code>linear</code> keyword.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/032ffd9f-1652-44cb-9f94-541d840a11aa/004-easing-functions-css-animations-transitions.png\" /></p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/b45f4b3c-9f20-4cf4-888f-1052518f4a32/07-easing-functions-css-animations-transitions.png\" /></p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2ab6c48f-b1ea-4fad-8ce9-42112f2f70a7/09-easing-functions-css-animations-transitions.png\" /></p>\n<p>This is because the first (P0) and last points (P3) are fixed to the start (initial animation state) and the end (final animation state) of the curve, as the animation needs to end on a specified keyframe and within the specified duration. With the two remaining points (P1 and P2), we can fine-tune the curve and easing of the function, resulting with non-linear animation speed.</p>\n<pre><code>cubic-bezier(x1, y1, x2, y2)</code></pre>\n\n<p>X coordinates (<code>x1</code> and <code>x2</code>) represent time ratio and are limited to values between 0 and 1 (the animation cannot begin sooner or last longer than specified), while Y coordinates (<code>y1</code> and <code>y2</code>) represent the animation output and their values, which are usually set somewhere between 0 and 1 but are not limited to that range. We can use the <code>y1</code> and <code>y2</code> values that are outside the 0 and 1 range to create bouncing effects.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/98d8f477-6b54-49d7-93d0-103f23f31dc8/10-easing-functions-css-animations-transitions.png\" /></p>\n<p>If the animation consists of several keyframes, defined in CSS <code>@keyframes</code> property, the easing function will be applied to each curve between the two points. If we are applying <code>ease-out</code> function to an animation with 3 keyframes, the animation will accelerate at the start of the first keyframe, and decelerate near the second keyframe and the same motion will be repeated for the next pair of keyframes (second keyframe and the last keyframe).</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8ae6ded8-42b5-45ce-9921-2d27b8152bd9/011-easing-functions-css-animations-transitions.png\" /></p>\n<p>The following example showcases how various jump terms affect the animation behavior. Various jump terms are applied to the 5-step animation with the same duration.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/03c061ce-0a29-4cda-9cda-441415f77691/12-easing-functions-css-animations-transitions.png\" /></p>\n<p><a href=\"https://developer.chrome.com/docs/devtools/css/animations/\">Chrome</a>, <a href=\"https://webkit.org/blog/10266/web-animations-in-safari-13-1/\">Safari</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Work_with_animations\">Firefox</a> also offer a dedicated Animations tab in developer tools that offers a more detailed overview, including animation properties, duration, timeline, keyframes, delay, etc.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d940149a-e4da-4a77-9af2-dedbd395a5d0/13-easing-functions-css-animations-transitions.png\" /></p>\n<h4>Useful Tools And Websites</h4>\n<p>There are plenty of useful online resources and easing presets that can give much more variety to easing functions.</p>\n<p>More popular online resources include <a href=\"https://easings.net/\">Easing Functions Cheat Sheet</a> by Andrey Sitnik and Ivan Solovev and <a href=\"https://matthewlein.com/tools/ceaser\">CSS Easing Animation Tool</a> by Matthew Lein. These tools offer a wide range of presets that you can use as a foundation for your easing function and then fine-tune the curve to fit your animation timeline.</p>\n<p><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/02de9f56-5d84-4ef2-8a19-17fdfcaed801/14-easing-functions-css-animations-transitions.png\" /></p>\n<h3>Animations &amp; Accessibility</h3>\n<p>When working with easing functions and animations in general, it’s important to address accessibility requirements. <a href=\"https://www.w3.org/WAI/WCAG21/Understanding/animation-from-interactions.html\">Some people</a> prefer browsing the web with reduced motion, so we should provide a proper fallback. This can be easily done with widely-supported <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\">prefers-reduced-motion</a> media query. This media query allows us to either remove the animation or assign a different animation based on user preference.</p>\n<pre><code>.animated-element {\n  animation: /* Regular animation */;\n}\n\n@media (prefers-reduced-motion) {\n  .animated-element {\n    /* Accessible animation with reduced motion */\n  }\n}</code></pre>\n\n<p>I’ve modified an analog clock <a href=\"https://codepen.io/alvaromontoro/pen/jGYQoP\">example</a> by <a href=\"https://codepen.io/alvaromontoro\">Alvaro Montoro</a> to include alternative animation for users with <code>prefers-reduced-motion</code> flag set.</p>\n<p>See the Pen <a href=\"https://codepen.io/smashingmag/pen/QWdoXPN\">CSS Analog Clock with prefers reduced motion</a> by <a href=\"https://codepen.io/AdrianBece\">Adrian Bece</a>.</p>\n<p>On a default animation, the seconds hand of the clock is constantly moving which may cause difficulties for some users. We can easily make the animation much more accessible by changing the animation timing function to <code>steps</code>. In the following example, users with <code>prefers-reduced-motion</code> flag set will be displayed an animation where seconds arm ticks every five seconds. </p>\n<pre><code>@media (prefers-reduced-motion) {\n  .arm.second {\n    animation-timing-function: steps(12);\n  }\n}</code></pre>\n\n\n\n<h3>Conclusion</h3>\n<p>Easing functions, or timing functions, change the animation’s look and feel by affecting the animation rate (speed). Easing functions enable us to create animations that resemble natural motion which can result in improved, more delightful UX and having a better impression on the users. We’ve seen how we can use pre-defined values like <code>linear</code>, <code>ease-out</code>, <code>ease</code>, etc. to quickly add a timing function and how to create custom easing functions with <code>cubic-bezier</code> function for more impressive and impactful animations. We’ve also covered staircase functions that can be used to create “ticking” animation and are rarely used. When creating animations, it’s important to keep accessibility in mind and provide an alternative, less distracting animations with less motion to users with <code>prefers-reduced-motion</code> flag set.</p>\n<p>There are plenty of browser and online tools that can simplify and streamline creating custom easing functions, so creating animations with a beautiful flow is easier than ever. If you haven’t done so already, I would recommend experimenting with various easing functions and creating your own easing function library.</p>\n<h4>References</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function\"><code>&lt;easing-function&gt;</code></a>, MDN Web Docs</li>\n<li>“<a href=\"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Work_with_animations\">Work With Animations</a>,” MDN Web Docs</li>\n<li>“<a href=\"https://webkit.org/blog/10266/web-animations-in-safari-13-1/\">Web Animations In Safari 13.1</a>,” Antoine Quint, WebKit</li>\n<li>“<a href=\"https://developers.google.com/web/fundamentals/design-and-ux/animations/the-basics-of-easing\">The Basics Of Easing</a>,” Paul Lewis, Web Fundamentals, Google Developers</li>\n<li>“<a href=\"https://developer.chrome.com/docs/devtools/css/animations/\">Inspect Animations</a>,” Kayce Basques, Chrome DevTools, Chrome Developers</li>\n</ul>","author":"","siteTitle":"Articles on Smashing Magazine — For Web Designers And Developers","siteHash":"ab069ca35bf300e9db0da36f49701f66485a5b0d2db0471dfeee07cef6204939","entryHash":"a0c1672800a0721f021a74ed807705318d38ab117f61ce674d28a0d45b1a3372","category":"Tech"}